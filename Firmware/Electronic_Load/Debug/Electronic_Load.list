
Electronic_Load.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  0800a548  0800a548  0000b548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a924  0800a924  0000c1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a924  0800a924  0000b924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a92c  0800a92c  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a92c  0800a92c  0000b92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a930  0800a930  0000b930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a934  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  200001dc  0800ab10  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  0800ab10  0000c5d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e67  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003307  00000000  00000000  00026073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001800  00000000  00000000  00029380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012b7  00000000  00000000  0002ab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248c3  00000000  00000000  0002be37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af2e  00000000  00000000  000506fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0fd8  00000000  00000000  0006b628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c600  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078c0  00000000  00000000  0014c644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00153f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a52c 	.word	0x0800a52c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a52c 	.word	0x0800a52c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	f023 030f 	bic.w	r3, r3, #15
 8000f86:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	73bb      	strb	r3, [r7, #14]

    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	f043 030c 	orr.w	r3, r3, #12
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	f043 0308 	orr.w	r3, r3, #8
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 8000fa2:	7bbb      	ldrb	r3, [r7, #14]
 8000fa4:	f043 030c 	orr.w	r3, r3, #12
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8000fac:	7bbb      	ldrb	r3, [r7, #14]
 8000fae:	f043 0308 	orr.w	r3, r3, #8
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, (lcd->address << 1), data_t, 4, HAL_MAX_DELAY);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6818      	ldr	r0, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	791b      	ldrb	r3, [r3, #4]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	f107 0208 	add.w	r2, r7, #8
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2304      	movs	r3, #4
 8000fce:	f003 fe2d 	bl	8004c2c <HAL_I2C_Master_Transmit>
}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af02      	add	r7, sp, #8
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 8000fe6:	78fb      	ldrb	r3, [r7, #3]
 8000fe8:	f023 030f 	bic.w	r3, r3, #15
 8000fec:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	73bb      	strb	r3, [r7, #14]

    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	f043 030d 	orr.w	r3, r3, #13
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	f043 0309 	orr.w	r3, r3, #9
 8001004:	b2db      	uxtb	r3, r3
 8001006:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 8001008:	7bbb      	ldrb	r3, [r7, #14]
 800100a:	f043 030d 	orr.w	r3, r3, #13
 800100e:	b2db      	uxtb	r3, r3
 8001010:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	f043 0309 	orr.w	r3, r3, #9
 8001018:	b2db      	uxtb	r3, r3
 800101a:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, (lcd->address << 1), data_t, 4, HAL_MAX_DELAY);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	791b      	ldrb	r3, [r3, #4]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	b299      	uxth	r1, r3
 8001028:	f107 0208 	add.w	r2, r7, #8
 800102c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2304      	movs	r3, #4
 8001034:	f003 fdfa 	bl	8004c2c <HAL_I2C_Master_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8001048:	2180      	movs	r1, #128	@ 0x80
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ff92 	bl	8000f74 <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	e006      	b.n	8001064 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8001056:	2120      	movs	r1, #32
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ffbe 	bl	8000fda <lcd_send_data>
    for (int i = 0; i < 80; i++)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3301      	adds	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b4f      	cmp	r3, #79	@ 0x4f
 8001068:	ddf5      	ble.n	8001056 <lcd_clear+0x16>
    }
}
 800106a:	bf00      	nop
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b03      	cmp	r3, #3
 8001084:	d824      	bhi.n	80010d0 <lcd_gotoxy+0x5c>
 8001086:	a201      	add	r2, pc, #4	@ (adr r2, 800108c <lcd_gotoxy+0x18>)
 8001088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108c:	0800109d 	.word	0x0800109d
 8001090:	080010a7 	.word	0x080010a7
 8001094:	080010b1 	.word	0x080010b1
 8001098:	080010bb 	.word	0x080010bb
    {
        case 0: address = 0x80 + col; break;  // First row
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	3b80      	subs	r3, #128	@ 0x80
 80010a2:	75fb      	strb	r3, [r7, #23]
 80010a4:	e00e      	b.n	80010c4 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	3b40      	subs	r3, #64	@ 0x40
 80010ac:	75fb      	strb	r3, [r7, #23]
 80010ae:	e009      	b.n	80010c4 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	3b6c      	subs	r3, #108	@ 0x6c
 80010b6:	75fb      	strb	r3, [r7, #23]
 80010b8:	e004      	b.n	80010c4 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	3b2c      	subs	r3, #44	@ 0x2c
 80010c0:	75fb      	strb	r3, [r7, #23]
 80010c2:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 80010c4:	7dfb      	ldrb	r3, [r7, #23]
 80010c6:	4619      	mov	r1, r3
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f7ff ff53 	bl	8000f74 <lcd_send_cmd>
 80010ce:	e000      	b.n	80010d2 <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 80010d0:	bf00      	nop
}
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 80010e0:	2032      	movs	r0, #50	@ 0x32
 80010e2:	f001 fa65 	bl	80025b0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80010e6:	2130      	movs	r1, #48	@ 0x30
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff43 	bl	8000f74 <lcd_send_cmd>
    HAL_Delay(5);
 80010ee:	2005      	movs	r0, #5
 80010f0:	f001 fa5e 	bl	80025b0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80010f4:	2130      	movs	r1, #48	@ 0x30
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ff3c 	bl	8000f74 <lcd_send_cmd>
    HAL_Delay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f001 fa57 	bl	80025b0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001102:	2130      	movs	r1, #48	@ 0x30
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff35 	bl	8000f74 <lcd_send_cmd>
    HAL_Delay(10);
 800110a:	200a      	movs	r0, #10
 800110c:	f001 fa50 	bl	80025b0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8001110:	2120      	movs	r1, #32
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ff2e 	bl	8000f74 <lcd_send_cmd>
    HAL_Delay(10);
 8001118:	200a      	movs	r0, #10
 800111a:	f001 fa49 	bl	80025b0 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 800111e:	2128      	movs	r1, #40	@ 0x28
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff27 	bl	8000f74 <lcd_send_cmd>
    HAL_Delay(1);
 8001126:	2001      	movs	r0, #1
 8001128:	f001 fa42 	bl	80025b0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 800112c:	2108      	movs	r1, #8
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff20 	bl	8000f74 <lcd_send_cmd>
    HAL_Delay(1);
 8001134:	2001      	movs	r0, #1
 8001136:	f001 fa3b 	bl	80025b0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 800113a:	2101      	movs	r1, #1
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff19 	bl	8000f74 <lcd_send_cmd>
    HAL_Delay(2);
 8001142:	2002      	movs	r0, #2
 8001144:	f001 fa34 	bl	80025b0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8001148:	2106      	movs	r1, #6
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ff12 	bl	8000f74 <lcd_send_cmd>
    HAL_Delay(1);
 8001150:	2001      	movs	r0, #1
 8001152:	f001 fa2d 	bl	80025b0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8001156:	210c      	movs	r1, #12
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff0b 	bl	8000f74 <lcd_send_cmd>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str, size_t size)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
    for(int i = 0; i < size; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e00a      	b.n	800118e <lcd_puts+0x28>
    	lcd_send_data(lcd, *str++);  // Send each character in the string
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	60ba      	str	r2, [r7, #8]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff29 	bl	8000fda <lcd_send_data>
    for(int i = 0; i < size; i++)
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	429a      	cmp	r2, r3
 8001194:	d8f0      	bhi.n	8001178 <lcd_puts+0x12>
}
 8001196:	bf00      	nop
 8001198:	bf00      	nop
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	b092      	sub	sp, #72	@ 0x48
 80011a4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a6:	f001 f98e 	bl	80024c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011aa:	f000 f99f 	bl	80014ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ae:	f000 fba5 	bl	80018fc <MX_GPIO_Init>
  MX_DMA_Init();
 80011b2:	f000 fb85 	bl	80018c0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011b6:	f000 fb53 	bl	8001860 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011ba:	f000 fa81 	bl	80016c0 <MX_I2C1_Init>
  MX_DAC1_Init();
 80011be:	f000 fa4d 	bl	800165c <MX_DAC1_Init>
  MX_TIM1_Init();
 80011c2:	f000 fabd 	bl	8001740 <MX_TIM1_Init>
  MX_ADC1_Init();
 80011c6:	f000 f9e3 	bl	8001590 <MX_ADC1_Init>
  MX_TIM6_Init();
 80011ca:	f000 fb13 	bl	80017f4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80011ce:	217f      	movs	r1, #127	@ 0x7f
 80011d0:	48af      	ldr	r0, [pc, #700]	@ (8001490 <main+0x2f0>)
 80011d2:	f002 fd31 	bl	8003c38 <HAL_ADCEx_Calibration_Start>
	lcd1.hi2c = &hi2c1;
 80011d6:	4baf      	ldr	r3, [pc, #700]	@ (8001494 <main+0x2f4>)
 80011d8:	4aaf      	ldr	r2, [pc, #700]	@ (8001498 <main+0x2f8>)
 80011da:	601a      	str	r2, [r3, #0]
	lcd1.address = addr;
 80011dc:	4baf      	ldr	r3, [pc, #700]	@ (800149c <main+0x2fc>)
 80011de:	781a      	ldrb	r2, [r3, #0]
 80011e0:	4bac      	ldr	r3, [pc, #688]	@ (8001494 <main+0x2f4>)
 80011e2:	711a      	strb	r2, [r3, #4]
	lcd_init(&lcd1);
 80011e4:	48ab      	ldr	r0, [pc, #684]	@ (8001494 <main+0x2f4>)
 80011e6:	f7ff ff77 	bl	80010d8 <lcd_init>
	HAL_TIM_Base_Start_IT(&htim6);//DAC and ADC timer
 80011ea:	48ad      	ldr	r0, [pc, #692]	@ (80014a0 <main+0x300>)
 80011ec:	f005 fac4 	bl	8006778 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80011f0:	213c      	movs	r1, #60	@ 0x3c
 80011f2:	48ac      	ldr	r0, [pc, #688]	@ (80014a4 <main+0x304>)
 80011f4:	f005 fbba 	bl	800696c <HAL_TIM_Encoder_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_Array, 10);
 80011f8:	220a      	movs	r2, #10
 80011fa:	49ab      	ldr	r1, [pc, #684]	@ (80014a8 <main+0x308>)
 80011fc:	48a4      	ldr	r0, [pc, #656]	@ (8001490 <main+0x2f0>)
 80011fe:	f001 fd3d 	bl	8002c7c <HAL_ADC_Start_DMA>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001202:	2100      	movs	r1, #0
 8001204:	48a9      	ldr	r0, [pc, #676]	@ (80014ac <main+0x30c>)
 8001206:	f002 fedc 	bl	8003fc2 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 800120a:	2300      	movs	r3, #0
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	48a6      	ldr	r0, [pc, #664]	@ (80014ac <main+0x30c>)
 8001212:	f002 ff7d 	bl	8004110 <HAL_DAC_SetValue>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		uint32_t now = HAL_GetTick();
 8001216:	f001 f9bf 	bl	8002598 <HAL_GetTick>
 800121a:	6338      	str	r0, [r7, #48]	@ 0x30
		uint8_t timeElapsed = (uint32_t)(now - lastUiTick) >= UI_REFRESH_MS;
 800121c:	4ba4      	ldr	r3, [pc, #656]	@ (80014b0 <main+0x310>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001228:	4293      	cmp	r3, r2
 800122a:	bf8c      	ite	hi
 800122c:	2301      	movhi	r3, #1
 800122e:	2300      	movls	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		if ((knobTurned == 1) || (buttonPressed != lastButtonState) || timeElapsed)
 8001236:	4b9f      	ldr	r3, [pc, #636]	@ (80014b4 <main+0x314>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b01      	cmp	r3, #1
 800123e:	d00a      	beq.n	8001256 <main+0xb6>
 8001240:	4b9d      	ldr	r3, [pc, #628]	@ (80014b8 <main+0x318>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b9d      	ldr	r3, [pc, #628]	@ (80014bc <main+0x31c>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	d103      	bne.n	8001256 <main+0xb6>
 800124e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0df      	beq.n	8001216 <main+0x76>
		{
		    char buffer[LCD_COLS + 1];

		    // --- Row 1: Current ---
		    int n = snprintf(buffer, sizeof buffer, "I = ");
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4a99      	ldr	r2, [pc, #612]	@ (80014c0 <main+0x320>)
 800125a:	2111      	movs	r1, #17
 800125c:	4618      	mov	r0, r3
 800125e:	f006 ff5d 	bl	800811c <sniprintf>
 8001262:	62b8      	str	r0, [r7, #40]	@ 0x28
		    float power = 0.0f;
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	637b      	str	r3, [r7, #52]	@ 0x34

		    if (buttonPressed == 1) // SET MODE
 800126a:	4b93      	ldr	r3, [pc, #588]	@ (80014b8 <main+0x318>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d136      	bne.n	80012e2 <main+0x142>
		    {
		        uint32_t DAC_value = (uint32_t)(currentSet * 32.0f);
 8001274:	4b93      	ldr	r3, [pc, #588]	@ (80014c4 <main+0x324>)
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 80014c8 <main+0x328>
 800127e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001286:	ee17 3a90 	vmov	r3, s15
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
		        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_value);
 800128c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	4886      	ldr	r0, [pc, #536]	@ (80014ac <main+0x30c>)
 8001294:	f002 ff3c 	bl	8004110 <HAL_DAC_SetValue>

		        float current = 4.0f * current2;
 8001298:	4b8c      	ldr	r3, [pc, #560]	@ (80014cc <main+0x32c>)
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	edc7 7a08 	vstr	s15, [r7, #32]
		        power = current * voltage;
 80012aa:	4b89      	ldr	r3, [pc, #548]	@ (80014d0 <main+0x330>)
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	ed97 7a08 	vldr	s14, [r7, #32]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		        snprintf(buffer + n, sizeof buffer - n, "%.2f", current);
 80012bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012be:	1d3a      	adds	r2, r7, #4
 80012c0:	18d4      	adds	r4, r2, r3
 80012c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c4:	f1c3 0511 	rsb	r5, r3, #17
 80012c8:	6a38      	ldr	r0, [r7, #32]
 80012ca:	f7ff f93d 	bl	8000548 <__aeabi_f2d>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	e9cd 2300 	strd	r2, r3, [sp]
 80012d6:	4a7f      	ldr	r2, [pc, #508]	@ (80014d4 <main+0x334>)
 80012d8:	4629      	mov	r1, r5
 80012da:	4620      	mov	r0, r4
 80012dc:	f006 ff1e 	bl	800811c <sniprintf>
 80012e0:	e06b      	b.n	80013ba <main+0x21a>
		    }
		    else
		    {
		        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80012e2:	2300      	movs	r3, #0
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	4870      	ldr	r0, [pc, #448]	@ (80014ac <main+0x30c>)
 80012ea:	f002 ff11 	bl	8004110 <HAL_DAC_SetValue>
		        if (((prePosition - position) > 0) && (knobTurned == 1)) {
 80012ee:	4b7a      	ldr	r3, [pc, #488]	@ (80014d8 <main+0x338>)
 80012f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b79      	ldr	r3, [pc, #484]	@ (80014dc <main+0x33c>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	dd17      	ble.n	8001332 <main+0x192>
 8001302:	4b6c      	ldr	r3, [pc, #432]	@ (80014b4 <main+0x314>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b01      	cmp	r3, #1
 800130a:	d112      	bne.n	8001332 <main+0x192>
		            direction = 0; currentSet = currentSet + 0.01f; prePosition = position;
 800130c:	4b74      	ldr	r3, [pc, #464]	@ (80014e0 <main+0x340>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
 8001312:	4b6c      	ldr	r3, [pc, #432]	@ (80014c4 <main+0x324>)
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 80014e4 <main+0x344>
 800131c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001320:	4b68      	ldr	r3, [pc, #416]	@ (80014c4 <main+0x324>)
 8001322:	edc3 7a00 	vstr	s15, [r3]
 8001326:	4b6d      	ldr	r3, [pc, #436]	@ (80014dc <main+0x33c>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	b21a      	sxth	r2, r3
 800132c:	4b6a      	ldr	r3, [pc, #424]	@ (80014d8 <main+0x338>)
 800132e:	801a      	strh	r2, [r3, #0]
 8001330:	e02c      	b.n	800138c <main+0x1ec>
		        } else if (((prePosition - position) <= 0) && (knobTurned == 1)) {
 8001332:	4b69      	ldr	r3, [pc, #420]	@ (80014d8 <main+0x338>)
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	461a      	mov	r2, r3
 800133a:	4b68      	ldr	r3, [pc, #416]	@ (80014dc <main+0x33c>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	b21b      	sxth	r3, r3
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	dc22      	bgt.n	800138c <main+0x1ec>
 8001346:	4b5b      	ldr	r3, [pc, #364]	@ (80014b4 <main+0x314>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b01      	cmp	r3, #1
 800134e:	d11d      	bne.n	800138c <main+0x1ec>
		            direction = 1; currentSet = currentSet - 0.01f; if (currentSet < 0.0f) currentSet = 0.0f; prePosition = position;
 8001350:	4b63      	ldr	r3, [pc, #396]	@ (80014e0 <main+0x340>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
 8001356:	4b5b      	ldr	r3, [pc, #364]	@ (80014c4 <main+0x324>)
 8001358:	edd3 7a00 	vldr	s15, [r3]
 800135c:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80014e4 <main+0x344>
 8001360:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001364:	4b57      	ldr	r3, [pc, #348]	@ (80014c4 <main+0x324>)
 8001366:	edc3 7a00 	vstr	s15, [r3]
 800136a:	4b56      	ldr	r3, [pc, #344]	@ (80014c4 <main+0x324>)
 800136c:	edd3 7a00 	vldr	s15, [r3]
 8001370:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001378:	d503      	bpl.n	8001382 <main+0x1e2>
 800137a:	4b52      	ldr	r3, [pc, #328]	@ (80014c4 <main+0x324>)
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	4b56      	ldr	r3, [pc, #344]	@ (80014dc <main+0x33c>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	b21a      	sxth	r2, r3
 8001388:	4b53      	ldr	r3, [pc, #332]	@ (80014d8 <main+0x338>)
 800138a:	801a      	strh	r2, [r3, #0]
		        }
		        power = 0;
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	637b      	str	r3, [r7, #52]	@ 0x34
		        snprintf(buffer + n, sizeof buffer - n, "%.2f", currentSet);
 8001392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001394:	1d3a      	adds	r2, r7, #4
 8001396:	18d4      	adds	r4, r2, r3
 8001398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800139a:	f1c3 0511 	rsb	r5, r3, #17
 800139e:	4b49      	ldr	r3, [pc, #292]	@ (80014c4 <main+0x324>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f8d0 	bl	8000548 <__aeabi_f2d>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	e9cd 2300 	strd	r2, r3, [sp]
 80013b0:	4a48      	ldr	r2, [pc, #288]	@ (80014d4 <main+0x334>)
 80013b2:	4629      	mov	r1, r5
 80013b4:	4620      	mov	r0, r4
 80013b6:	f006 feb1 	bl	800811c <sniprintf>
		    }

		    size_t out_len = strlen(buffer);
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4618      	mov	r0, r3
 80013be:	f7fe ff57 	bl	8000270 <strlen>
 80013c2:	61f8      	str	r0, [r7, #28]
		    if (out_len < LCD_COLS) memset(buffer + out_len, ' ', LCD_COLS - out_len);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	2b0f      	cmp	r3, #15
 80013c8:	d809      	bhi.n	80013de <main+0x23e>
 80013ca:	1d3a      	adds	r2, r7, #4
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	18d0      	adds	r0, r2, r3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0310 	rsb	r3, r3, #16
 80013d6:	461a      	mov	r2, r3
 80013d8:	2120      	movs	r1, #32
 80013da:	f006 ff97 	bl	800830c <memset>
		    buffer[LCD_COLS] = '\0';
 80013de:	2300      	movs	r3, #0
 80013e0:	753b      	strb	r3, [r7, #20]

		    // TOP-RIGHT 'S' only
		    buffer[LCD_COLS - 1] = (buttonPressed == 1) ? 'S' : ' ';
 80013e2:	4b35      	ldr	r3, [pc, #212]	@ (80014b8 <main+0x318>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <main+0x250>
 80013ec:	2353      	movs	r3, #83	@ 0x53
 80013ee:	e000      	b.n	80013f2 <main+0x252>
 80013f0:	2320      	movs	r3, #32
 80013f2:	74fb      	strb	r3, [r7, #19]

		    lcd_clear(&lcd1);
 80013f4:	4827      	ldr	r0, [pc, #156]	@ (8001494 <main+0x2f4>)
 80013f6:	f7ff fe23 	bl	8001040 <lcd_clear>
		    lcd_gotoxy(&lcd1, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	4825      	ldr	r0, [pc, #148]	@ (8001494 <main+0x2f4>)
 8001400:	f7ff fe38 	bl	8001074 <lcd_gotoxy>
		    lcd_puts(&lcd1, buffer, LCD_COLS);
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2210      	movs	r2, #16
 8001408:	4619      	mov	r1, r3
 800140a:	4822      	ldr	r0, [pc, #136]	@ (8001494 <main+0x2f4>)
 800140c:	f7ff feab 	bl	8001166 <lcd_puts>

		    // --- Row 2: Voltage + Wattage (no bottom-right S) ---
		    int m = snprintf(buffer, sizeof buffer, "V=%.2f W=%.2f", voltage, power);
 8001410:	4b2f      	ldr	r3, [pc, #188]	@ (80014d0 <main+0x330>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f897 	bl	8000548 <__aeabi_f2d>
 800141a:	4604      	mov	r4, r0
 800141c:	460d      	mov	r5, r1
 800141e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001420:	f7ff f892 	bl	8000548 <__aeabi_f2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	1d38      	adds	r0, r7, #4
 800142a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800142e:	e9cd 4500 	strd	r4, r5, [sp]
 8001432:	4a2d      	ldr	r2, [pc, #180]	@ (80014e8 <main+0x348>)
 8001434:	2111      	movs	r1, #17
 8001436:	f006 fe71 	bl	800811c <sniprintf>
 800143a:	61b8      	str	r0, [r7, #24]
		    out_len = (m > 0) ? (size_t)m : 0;
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001442:	61fb      	str	r3, [r7, #28]
		    if (out_len < LCD_COLS) memset(buffer + out_len, ' ', LCD_COLS - out_len);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	2b0f      	cmp	r3, #15
 8001448:	d809      	bhi.n	800145e <main+0x2be>
 800144a:	1d3a      	adds	r2, r7, #4
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	18d0      	adds	r0, r2, r3
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0310 	rsb	r3, r3, #16
 8001456:	461a      	mov	r2, r3
 8001458:	2120      	movs	r1, #32
 800145a:	f006 ff57 	bl	800830c <memset>
		    buffer[LCD_COLS] = '\0';                 // no marker at col 15
 800145e:	2300      	movs	r3, #0
 8001460:	753b      	strb	r3, [r7, #20]

		    lcd_gotoxy(&lcd1, 0, 1);
 8001462:	2201      	movs	r2, #1
 8001464:	2100      	movs	r1, #0
 8001466:	480b      	ldr	r0, [pc, #44]	@ (8001494 <main+0x2f4>)
 8001468:	f7ff fe04 	bl	8001074 <lcd_gotoxy>
		    lcd_puts(&lcd1, buffer, LCD_COLS);
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2210      	movs	r2, #16
 8001470:	4619      	mov	r1, r3
 8001472:	4808      	ldr	r0, [pc, #32]	@ (8001494 <main+0x2f4>)
 8001474:	f7ff fe77 	bl	8001166 <lcd_puts>

		    knobTurned = 0;
 8001478:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <main+0x314>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
		    lastButtonState = buttonPressed;
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <main+0x318>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <main+0x31c>)
 8001486:	701a      	strb	r2, [r3, #0]
		    lastUiTick = now;
 8001488:	4a09      	ldr	r2, [pc, #36]	@ (80014b0 <main+0x310>)
 800148a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800148c:	6013      	str	r3, [r2, #0]
	{
 800148e:	e6c2      	b.n	8001216 <main+0x76>
 8001490:	200001f8 	.word	0x200001f8
 8001494:	20000470 	.word	0x20000470
 8001498:	200002b8 	.word	0x200002b8
 800149c:	20000004 	.word	0x20000004
 80014a0:	20000358 	.word	0x20000358
 80014a4:	2000030c 	.word	0x2000030c
 80014a8:	2000042c 	.word	0x2000042c
 80014ac:	200002a4 	.word	0x200002a4
 80014b0:	2000045c 	.word	0x2000045c
 80014b4:	20000454 	.word	0x20000454
 80014b8:	20000448 	.word	0x20000448
 80014bc:	20000449 	.word	0x20000449
 80014c0:	0800a548 	.word	0x0800a548
 80014c4:	20000450 	.word	0x20000450
 80014c8:	42000000 	.word	0x42000000
 80014cc:	20000464 	.word	0x20000464
 80014d0:	20000000 	.word	0x20000000
 80014d4:	0800a550 	.word	0x0800a550
 80014d8:	2000044e 	.word	0x2000044e
 80014dc:	2000044a 	.word	0x2000044a
 80014e0:	2000044c 	.word	0x2000044c
 80014e4:	3c23d70a 	.word	0x3c23d70a
 80014e8:	0800a558 	.word	0x0800a558

080014ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b096      	sub	sp, #88	@ 0x58
 80014f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	2244      	movs	r2, #68	@ 0x44
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f006 ff06 	bl	800830c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001500:	463b      	mov	r3, r7
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800150e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001512:	f003 ff63 	bl	80053dc <HAL_PWREx_ControlVoltageScaling>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800151c:	f000 fbfa 	bl	8001d14 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001520:	2302      	movs	r3, #2
 8001522:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001524:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001528:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800152a:	2310      	movs	r3, #16
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152e:	2302      	movs	r3, #2
 8001530:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001532:	2302      	movs	r3, #2
 8001534:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001536:	2301      	movs	r3, #1
 8001538:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800153a:	230a      	movs	r3, #10
 800153c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800153e:	2307      	movs	r3, #7
 8001540:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001542:	2302      	movs	r3, #2
 8001544:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001546:	2302      	movs	r3, #2
 8001548:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4618      	mov	r0, r3
 8001550:	f003 ff9a 	bl	8005488 <HAL_RCC_OscConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800155a:	f000 fbdb 	bl	8001d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155e:	230f      	movs	r3, #15
 8001560:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001562:	2303      	movs	r3, #3
 8001564:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001572:	463b      	mov	r3, r7
 8001574:	2104      	movs	r1, #4
 8001576:	4618      	mov	r0, r3
 8001578:	f004 fb9a 	bl	8005cb0 <HAL_RCC_ClockConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001582:	f000 fbc7 	bl	8001d14 <Error_Handler>
  }
}
 8001586:	bf00      	nop
 8001588:	3758      	adds	r7, #88	@ 0x58
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001596:	463b      	mov	r3, r7
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
 80015a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001650 <MX_ADC1_Init+0xc0>)
 80015a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001654 <MX_ADC1_Init+0xc4>)
 80015aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 80015ac:	4b28      	ldr	r3, [pc, #160]	@ (8001650 <MX_ADC1_Init+0xc0>)
 80015ae:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 80015b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015b4:	4b26      	ldr	r3, [pc, #152]	@ (8001650 <MX_ADC1_Init+0xc0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ba:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <MX_ADC1_Init+0xc0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015c0:	4b23      	ldr	r3, [pc, #140]	@ (8001650 <MX_ADC1_Init+0xc0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015c6:	4b22      	ldr	r3, [pc, #136]	@ (8001650 <MX_ADC1_Init+0xc0>)
 80015c8:	2204      	movs	r2, #4
 80015ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015cc:	4b20      	ldr	r3, [pc, #128]	@ (8001650 <MX_ADC1_Init+0xc0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <MX_ADC1_Init+0xc0>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80015d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001650 <MX_ADC1_Init+0xc0>)
 80015da:	2201      	movs	r2, #1
 80015dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015de:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <MX_ADC1_Init+0xc0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <MX_ADC1_Init+0xc0>)
 80015e8:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 80015ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80015ee:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <MX_ADC1_Init+0xc0>)
 80015f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015f6:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <MX_ADC1_Init+0xc0>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015fe:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <MX_ADC1_Init+0xc0>)
 8001600:	2200      	movs	r2, #0
 8001602:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001604:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <MX_ADC1_Init+0xc0>)
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800160c:	4810      	ldr	r0, [pc, #64]	@ (8001650 <MX_ADC1_Init+0xc0>)
 800160e:	f001 f9f3 	bl	80029f8 <HAL_ADC_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001618:	f000 fb7c 	bl	8001d14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <MX_ADC1_Init+0xc8>)
 800161e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001620:	2306      	movs	r3, #6
 8001622:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001624:	2306      	movs	r3, #6
 8001626:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001628:	237f      	movs	r3, #127	@ 0x7f
 800162a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800162c:	2304      	movs	r3, #4
 800162e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	@ (8001650 <MX_ADC1_Init+0xc0>)
 800163a:	f001 fd75 	bl	8003128 <HAL_ADC_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8001644:	f000 fb66 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200001f8 	.word	0x200001f8
 8001654:	50040000 	.word	0x50040000
 8001658:	21800100 	.word	0x21800100

0800165c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	@ 0x28
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2224      	movs	r2, #36	@ 0x24
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f006 fe4f 	bl	800830c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800166e:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <MX_DAC1_Init+0x5c>)
 8001670:	4a12      	ldr	r2, [pc, #72]	@ (80016bc <MX_DAC1_Init+0x60>)
 8001672:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001674:	4810      	ldr	r0, [pc, #64]	@ (80016b8 <MX_DAC1_Init+0x5c>)
 8001676:	f002 fc82 	bl	8003f7e <HAL_DAC_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001680:	f000 fb48 	bl	8001d14 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800168c:	2302      	movs	r3, #2
 800168e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2200      	movs	r2, #0
 800169c:	4619      	mov	r1, r3
 800169e:	4806      	ldr	r0, [pc, #24]	@ (80016b8 <MX_DAC1_Init+0x5c>)
 80016a0:	f002 fd65 	bl	800416e <HAL_DAC_ConfigChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80016aa:	f000 fb33 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	@ 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200002a4 	.word	0x200002a4
 80016bc:	40007400 	.word	0x40007400

080016c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <MX_I2C1_Init+0x74>)
 80016c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001738 <MX_I2C1_Init+0x78>)
 80016c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F12981;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001734 <MX_I2C1_Init+0x74>)
 80016cc:	4a1b      	ldr	r2, [pc, #108]	@ (800173c <MX_I2C1_Init+0x7c>)
 80016ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016d0:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <MX_I2C1_Init+0x74>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016d6:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <MX_I2C1_Init+0x74>)
 80016d8:	2201      	movs	r2, #1
 80016da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016dc:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <MX_I2C1_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016e2:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <MX_I2C1_Init+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <MX_I2C1_Init+0x74>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <MX_I2C1_Init+0x74>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <MX_I2C1_Init+0x74>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016fa:	480e      	ldr	r0, [pc, #56]	@ (8001734 <MX_I2C1_Init+0x74>)
 80016fc:	f003 f9fa 	bl	8004af4 <HAL_I2C_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001706:	f000 fb05 	bl	8001d14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800170a:	2100      	movs	r1, #0
 800170c:	4809      	ldr	r0, [pc, #36]	@ (8001734 <MX_I2C1_Init+0x74>)
 800170e:	f003 fdbf 	bl	8005290 <HAL_I2CEx_ConfigAnalogFilter>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001718:	f000 fafc 	bl	8001d14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800171c:	2100      	movs	r1, #0
 800171e:	4805      	ldr	r0, [pc, #20]	@ (8001734 <MX_I2C1_Init+0x74>)
 8001720:	f003 fe01 	bl	8005326 <HAL_I2CEx_ConfigDigitalFilter>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800172a:	f000 faf3 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200002b8 	.word	0x200002b8
 8001738:	40005400 	.word	0x40005400
 800173c:	00f12981 	.word	0x00f12981

08001740 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08c      	sub	sp, #48	@ 0x30
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	2224      	movs	r2, #36	@ 0x24
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f006 fddc 	bl	800830c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	463b      	mov	r3, r7
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800175e:	4b23      	ldr	r3, [pc, #140]	@ (80017ec <MX_TIM1_Init+0xac>)
 8001760:	4a23      	ldr	r2, [pc, #140]	@ (80017f0 <MX_TIM1_Init+0xb0>)
 8001762:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001764:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <MX_TIM1_Init+0xac>)
 8001766:	2200      	movs	r2, #0
 8001768:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176a:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <MX_TIM1_Init+0xac>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001770:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <MX_TIM1_Init+0xac>)
 8001772:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001776:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001778:	4b1c      	ldr	r3, [pc, #112]	@ (80017ec <MX_TIM1_Init+0xac>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800177e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <MX_TIM1_Init+0xac>)
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <MX_TIM1_Init+0xac>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800178a:	2303      	movs	r3, #3
 800178c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800178e:	2302      	movs	r3, #2
 8001790:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001792:	2301      	movs	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800179a:	230f      	movs	r3, #15
 800179c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800179e:	2302      	movs	r3, #2
 80017a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017a2:	2301      	movs	r3, #1
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80017aa:	230f      	movs	r3, #15
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	4619      	mov	r1, r3
 80017b4:	480d      	ldr	r0, [pc, #52]	@ (80017ec <MX_TIM1_Init+0xac>)
 80017b6:	f005 f833 	bl	8006820 <HAL_TIM_Encoder_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80017c0:	f000 faa8 	bl	8001d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017d0:	463b      	mov	r3, r7
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	@ (80017ec <MX_TIM1_Init+0xac>)
 80017d6:	f005 fb33 	bl	8006e40 <HAL_TIMEx_MasterConfigSynchronization>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80017e0:	f000 fa98 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	3730      	adds	r7, #48	@ 0x30
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2000030c 	.word	0x2000030c
 80017f0:	40012c00 	.word	0x40012c00

080017f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001804:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <MX_TIM6_Init+0x64>)
 8001806:	4a15      	ldr	r2, [pc, #84]	@ (800185c <MX_TIM6_Init+0x68>)
 8001808:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4000-1;
 800180a:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <MX_TIM6_Init+0x64>)
 800180c:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001810:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001812:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <MX_TIM6_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 8001818:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <MX_TIM6_Init+0x64>)
 800181a:	22c7      	movs	r2, #199	@ 0xc7
 800181c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800181e:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <MX_TIM6_Init+0x64>)
 8001820:	2280      	movs	r2, #128	@ 0x80
 8001822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001824:	480c      	ldr	r0, [pc, #48]	@ (8001858 <MX_TIM6_Init+0x64>)
 8001826:	f004 ff4f 	bl	80066c8 <HAL_TIM_Base_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001830:	f000 fa70 	bl	8001d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001834:	2320      	movs	r3, #32
 8001836:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_TIM6_Init+0x64>)
 8001842:	f005 fafd 	bl	8006e40 <HAL_TIMEx_MasterConfigSynchronization>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800184c:	f000 fa62 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000358 	.word	0x20000358
 800185c:	40001000 	.word	0x40001000

08001860 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001864:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <MX_USART2_UART_Init+0x58>)
 8001866:	4a15      	ldr	r2, [pc, #84]	@ (80018bc <MX_USART2_UART_Init+0x5c>)
 8001868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800186a:	4b13      	ldr	r3, [pc, #76]	@ (80018b8 <MX_USART2_UART_Init+0x58>)
 800186c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001872:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <MX_USART2_UART_Init+0x58>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001878:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <MX_USART2_UART_Init+0x58>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800187e:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <MX_USART2_UART_Init+0x58>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001884:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <MX_USART2_UART_Init+0x58>)
 8001886:	220c      	movs	r2, #12
 8001888:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188a:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <MX_USART2_UART_Init+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001890:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <MX_USART2_UART_Init+0x58>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001896:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <MX_USART2_UART_Init+0x58>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <MX_USART2_UART_Init+0x58>)
 800189e:	2200      	movs	r2, #0
 80018a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018a2:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <MX_USART2_UART_Init+0x58>)
 80018a4:	f005 fb50 	bl	8006f48 <HAL_UART_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018ae:	f000 fa31 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200003a4 	.word	0x200003a4
 80018bc:	40004400 	.word	0x40004400

080018c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018c6:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <MX_DMA_Init+0x38>)
 80018c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ca:	4a0b      	ldr	r2, [pc, #44]	@ (80018f8 <MX_DMA_Init+0x38>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <MX_DMA_Init+0x38>)
 80018d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	200b      	movs	r0, #11
 80018e4:	f002 fb15 	bl	8003f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018e8:	200b      	movs	r0, #11
 80018ea:	f002 fb2e 	bl	8003f4a <HAL_NVIC_EnableIRQ>

}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000

080018fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001912:	4b32      	ldr	r3, [pc, #200]	@ (80019dc <MX_GPIO_Init+0xe0>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001916:	4a31      	ldr	r2, [pc, #196]	@ (80019dc <MX_GPIO_Init+0xe0>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191e:	4b2f      	ldr	r3, [pc, #188]	@ (80019dc <MX_GPIO_Init+0xe0>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b2c      	ldr	r3, [pc, #176]	@ (80019dc <MX_GPIO_Init+0xe0>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	4a2b      	ldr	r2, [pc, #172]	@ (80019dc <MX_GPIO_Init+0xe0>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001936:	4b29      	ldr	r3, [pc, #164]	@ (80019dc <MX_GPIO_Init+0xe0>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b26      	ldr	r3, [pc, #152]	@ (80019dc <MX_GPIO_Init+0xe0>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001946:	4a25      	ldr	r2, [pc, #148]	@ (80019dc <MX_GPIO_Init+0xe0>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194e:	4b23      	ldr	r3, [pc, #140]	@ (80019dc <MX_GPIO_Init+0xe0>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S3_Pin|S2_Pin|S1_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	21e0      	movs	r1, #224	@ 0xe0
 800195e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001962:	f003 f897 	bl	8004a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	2108      	movs	r1, #8
 800196a:	481d      	ldr	r0, [pc, #116]	@ (80019e0 <MX_GPIO_Init+0xe4>)
 800196c:	f003 f892 	bl	8004a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : S3_Pin S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S3_Pin|S2_Pin|S1_Pin;
 8001970:	23e0      	movs	r3, #224	@ 0xe0
 8001972:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4619      	mov	r1, r3
 8001986:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800198a:	f002 ff19 	bl	80047c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 800198e:	2302      	movs	r3, #2
 8001990:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001992:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001998:	2301      	movs	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	4619      	mov	r1, r3
 80019a2:	480f      	ldr	r0, [pc, #60]	@ (80019e0 <MX_GPIO_Init+0xe4>)
 80019a4:	f002 ff0c 	bl	80047c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80019a8:	2308      	movs	r3, #8
 80019aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ac:	2301      	movs	r3, #1
 80019ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	4619      	mov	r1, r3
 80019be:	4808      	ldr	r0, [pc, #32]	@ (80019e0 <MX_GPIO_Init+0xe4>)
 80019c0:	f002 fefe 	bl	80047c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	2007      	movs	r0, #7
 80019ca:	f002 faa2 	bl	8003f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019ce:	2007      	movs	r0, #7
 80019d0:	f002 fabb 	bl	8003f4a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80019d4:	bf00      	nop
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000
 80019e0:	48000400 	.word	0x48000400
 80019e4:	00000000 	.word	0x00000000

080019e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]



	uint16_t ADCFilteredSum = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	82fb      	strh	r3, [r7, #22]
	ADC_Filtered = 0;
 80019f4:	4b90      	ldr	r3, [pc, #576]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < 10;i++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	e00a      	b.n	8001a16 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		ADCFilteredSum = ADCFilteredSum + ADC_Array[i];
 8001a00:	4a8e      	ldr	r2, [pc, #568]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	8afb      	ldrh	r3, [r7, #22]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < 10;i++)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	3301      	adds	r3, #1
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	2b09      	cmp	r3, #9
 8001a1a:	ddf1      	ble.n	8001a00 <HAL_TIM_PeriodElapsedCallback+0x18>
	}
	ADC_Filtered = ADCFilteredSum/10.0f;
 8001a1c:	8afb      	ldrh	r3, [r7, #22]
 8001a1e:	ee07 3a90 	vmov	s15, r3
 8001a22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a26:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001a2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a32:	ee17 3a90 	vmov	r3, s15
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	4b7f      	ldr	r3, [pc, #508]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a3a:	801a      	strh	r2, [r3, #0]

	if (selectBits == 0) //2
 8001a3c:	4b80      	ldr	r3, [pc, #512]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d122      	bne.n	8001a8a <HAL_TIM_PeriodElapsedCallback+0xa2>
	{
		current2 = VREF/ADC_RES * (float)ADC_Filtered * 10.0f;
 8001a44:	4b7c      	ldr	r3, [pc, #496]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	ee07 3a90 	vmov	s15, r3
 8001a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a52:	ee17 0a90 	vmov	r0, s15
 8001a56:	f7fe fd77 	bl	8000548 <__aeabi_f2d>
 8001a5a:	a375      	add	r3, pc, #468	@ (adr r3, 8001c30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	f7fe fdca 	bl	80005f8 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	4b74      	ldr	r3, [pc, #464]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001a72:	f7fe fdc1 	bl	80005f8 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f7ff f893 	bl	8000ba8 <__aeabi_d2f>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4a70      	ldr	r2, [pc, #448]	@ (8001c48 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	e09f      	b.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x1e2>
	}
	else if (selectBits == 1) //3
 8001a8a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	f000 809b 	beq.w	8001bca <HAL_TIM_PeriodElapsedCallback+0x1e2>
	{

	}
	else if (selectBits == 2) //4
 8001a94:	4b6a      	ldr	r3, [pc, #424]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d122      	bne.n	8001ae2 <HAL_TIM_PeriodElapsedCallback+0xfa>
	{
		current4 = VREF/ADC_RES * (float)ADC_Filtered * 10.0f;
 8001a9c:	4b66      	ldr	r3, [pc, #408]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aaa:	ee17 0a90 	vmov	r0, s15
 8001aae:	f7fe fd4b 	bl	8000548 <__aeabi_f2d>
 8001ab2:	a35f      	add	r3, pc, #380	@ (adr r3, 8001c30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	f7fe fd9e 	bl	80005f8 <__aeabi_dmul>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	4b5e      	ldr	r3, [pc, #376]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001aca:	f7fe fd95 	bl	80005f8 <__aeabi_dmul>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7ff f867 	bl	8000ba8 <__aeabi_d2f>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4a5b      	ldr	r2, [pc, #364]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	e073      	b.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x1e2>
	}
	else if (selectBits == 3) //1
 8001ae2:	4b57      	ldr	r3, [pc, #348]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d122      	bne.n	8001b30 <HAL_TIM_PeriodElapsedCallback+0x148>
	{
		current1 = VREF/ADC_RES * (float)ADC_Filtered * 10.0f;
 8001aea:	4b53      	ldr	r3, [pc, #332]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af8:	ee17 0a90 	vmov	r0, s15
 8001afc:	f7fe fd24 	bl	8000548 <__aeabi_f2d>
 8001b00:	a34b      	add	r3, pc, #300	@ (adr r3, 8001c30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	f7fe fd77 	bl	80005f8 <__aeabi_dmul>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	4b4b      	ldr	r3, [pc, #300]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001b18:	f7fe fd6e 	bl	80005f8 <__aeabi_dmul>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7ff f840 	bl	8000ba8 <__aeabi_d2f>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4a49      	ldr	r2, [pc, #292]	@ (8001c50 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e04c      	b.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x1e2>
	}
	else if (selectBits == 4) //Temp
 8001b30:	4b43      	ldr	r3, [pc, #268]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d122      	bne.n	8001b7e <HAL_TIM_PeriodElapsedCallback+0x196>
	{
		current3 = VREF/ADC_RES * (float)ADC_Filtered * 10.0f;
 8001b38:	4b3f      	ldr	r3, [pc, #252]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	ee07 3a90 	vmov	s15, r3
 8001b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b46:	ee17 0a90 	vmov	r0, s15
 8001b4a:	f7fe fcfd 	bl	8000548 <__aeabi_f2d>
 8001b4e:	a338      	add	r3, pc, #224	@ (adr r3, 8001c30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fd50 	bl	80005f8 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	4b37      	ldr	r3, [pc, #220]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001b66:	f7fe fd47 	bl	80005f8 <__aeabi_dmul>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	f7ff f819 	bl	8000ba8 <__aeabi_d2f>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4a36      	ldr	r2, [pc, #216]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	e025      	b.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x1e2>
	}
	else if (selectBits == 5) //Voltage
 8001b7e:	4b30      	ldr	r3, [pc, #192]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b05      	cmp	r3, #5
 8001b84:	d121      	bne.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x1e2>
	{
		voltage = (VREF/ADC_RES) * ((float)ADC_Filtered) * (101.0f); //101 is the (R1 + R2)/R1
 8001b86:	4b2c      	ldr	r3, [pc, #176]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	ee07 3a90 	vmov	s15, r3
 8001b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b94:	ee17 0a90 	vmov	r0, s15
 8001b98:	f7fe fcd6 	bl	8000548 <__aeabi_f2d>
 8001b9c:	a324      	add	r3, pc, #144	@ (adr r3, 8001c30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	f7fe fd29 	bl	80005f8 <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	4b29      	ldr	r3, [pc, #164]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001bb4:	f7fe fd20 	bl	80005f8 <__aeabi_dmul>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7fe fff2 	bl	8000ba8 <__aeabi_d2f>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4a25      	ldr	r2, [pc, #148]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001bc8:	6013      	str	r3, [r2, #0]
	}

    // advance 0..5 (wrap)
    selectBits = selectBits + 1u;
 8001bca:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001bd2:	6013      	str	r3, [r2, #0]
//	selectBits = 0;
    if (selectBits > 5u) selectBits = 0u;
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	d902      	bls.n	8001be2 <HAL_TIM_PeriodElapsedCallback+0x1fa>
 8001bdc:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]

    // build masks for PA5..PA7  (uses your SEL_SHIFT=5, SEL_MASK=(0x7u<<5))
    uint16_t setMask = (uint16_t)(((selectBits & 0x7u) << SEL_SHIFT) & SEL_MASK);
 8001be2:	4b17      	ldr	r3, [pc, #92]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	015b      	lsls	r3, r3, #5
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001bf0:	81fb      	strh	r3, [r7, #14]
    uint16_t rstMask = (uint16_t)(SEL_MASK & ~setMask);
 8001bf2:	89fb      	ldrh	r3, [r7, #14]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001bfc:	81bb      	strh	r3, [r7, #12]

    // update only PA5..PA7 via HAL (BSRR under the hood)
    if (rstMask) HAL_GPIO_WritePin(GPIOA, rstMask, GPIO_PIN_RESET);
 8001bfe:	89bb      	ldrh	r3, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <HAL_TIM_PeriodElapsedCallback+0x22a>
 8001c04:	89bb      	ldrh	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c0e:	f002 ff41 	bl	8004a94 <HAL_GPIO_WritePin>
    if (setMask) HAL_GPIO_WritePin(GPIOA, setMask, GPIO_PIN_SET);
 8001c12:	89fb      	ldrh	r3, [r7, #14]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <HAL_TIM_PeriodElapsedCallback+0x23e>
 8001c18:	89fb      	ldrh	r3, [r7, #14]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c22:	f002 ff37 	bl	8004a94 <HAL_GPIO_WritePin>
}
 8001c26:	bf00      	nop
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	66666666 	.word	0x66666666
 8001c34:	3f4a6666 	.word	0x3f4a6666
 8001c38:	20000440 	.word	0x20000440
 8001c3c:	2000042c 	.word	0x2000042c
 8001c40:	20000444 	.word	0x20000444
 8001c44:	40240000 	.word	0x40240000
 8001c48:	20000464 	.word	0x20000464
 8001c4c:	2000046c 	.word	0x2000046c
 8001c50:	20000460 	.word	0x20000460
 8001c54:	20000468 	.word	0x20000468
 8001c58:	40594000 	.word	0x40594000
 8001c5c:	20000000 	.word	0x20000000

08001c60 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	// Debounce using SysTick
	uint32_t now = HAL_GetTick();
 8001c68:	f000 fc96 	bl	8002598 <HAL_GetTick>
 8001c6c:	6178      	str	r0, [r7, #20]
	if ((uint32_t)(now - s_lastEncTick) < ENC_DEBOUNCE_MS) {
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca4 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b31      	cmp	r3, #49	@ 0x31
 8001c78:	d90f      	bls.n	8001c9a <HAL_TIM_IC_CaptureCallback+0x3a>
		// too soon since the last accepted edge — ignore as bounce
		return;
	}
	s_lastEncTick = now;
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	6013      	str	r3, [r2, #0]

	// Read encoder count and signal the main loop
	uint32_t counter = __HAL_TIM_GET_COUNTER(htim);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c86:	613b      	str	r3, [r7, #16]
	int16_t count = (int16_t)counter;   // assuming ARR fits in int16_t / encoder configured that way
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	81fb      	strh	r3, [r7, #14]
	position = count;
 8001c8c:	4a06      	ldr	r2, [pc, #24]	@ (8001ca8 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001c8e:	89fb      	ldrh	r3, [r7, #14]
 8001c90:	8013      	strh	r3, [r2, #0]
	knobTurned = 1;
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
 8001c98:	e000      	b.n	8001c9c <HAL_TIM_IC_CaptureCallback+0x3c>
		return;
 8001c9a:	bf00      	nop
}
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000458 	.word	0x20000458
 8001ca8:	2000044a 	.word	0x2000044a
 8001cac:	20000454 	.word	0x20000454

08001cb0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	80fb      	strh	r3, [r7, #6]
	static uint32_t last = 0;
	if(GPIO_Pin == SW_Pin){
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d117      	bne.n	8001cf0 <HAL_GPIO_EXTI_Callback+0x40>
	        uint32_t now = HAL_GetTick();
 8001cc0:	f000 fc6a 	bl	8002598 <HAL_GetTick>
 8001cc4:	60f8      	str	r0, [r7, #12]
	        if (now - last >= 400) {          // 50 ms example
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <HAL_GPIO_EXTI_Callback+0x48>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001cd2:	d30d      	bcc.n	8001cf0 <HAL_GPIO_EXTI_Callback+0x40>
	            last = now;
 8001cd4:	4a08      	ldr	r2, [pc, #32]	@ (8001cf8 <HAL_GPIO_EXTI_Callback+0x48>)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6013      	str	r3, [r2, #0]
	            buttonPressed = !buttonPressed;   // or: mode ^= 1u;
 8001cda:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <HAL_GPIO_EXTI_Callback+0x4c>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	4b03      	ldr	r3, [pc, #12]	@ (8001cfc <HAL_GPIO_EXTI_Callback+0x4c>)
 8001cee:	701a      	strb	r2, [r3, #0]
	        }
	    }
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000478 	.word	0x20000478
 8001cfc:	20000448 	.word	0x20000448

08001d00 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]


}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d18:	b672      	cpsid	i
}
 8001d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <Error_Handler+0x8>

08001d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	4b0f      	ldr	r3, [pc, #60]	@ (8001d64 <HAL_MspInit+0x44>)
 8001d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d64 <HAL_MspInit+0x44>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d32:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <HAL_MspInit+0x44>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	4b09      	ldr	r3, [pc, #36]	@ (8001d64 <HAL_MspInit+0x44>)
 8001d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d42:	4a08      	ldr	r2, [pc, #32]	@ (8001d64 <HAL_MspInit+0x44>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d4a:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <HAL_MspInit+0x44>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000

08001d68 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b09e      	sub	sp, #120	@ 0x78
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d80:	f107 0310 	add.w	r3, r7, #16
 8001d84:	2254      	movs	r2, #84	@ 0x54
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f006 fabf 	bl	800830c <memset>
  if(hadc->Instance==ADC1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a3f      	ldr	r2, [pc, #252]	@ (8001e90 <HAL_ADC_MspInit+0x128>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d176      	bne.n	8001e86 <HAL_ADC_MspInit+0x11e>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d9c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001d9e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001da2:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001da4:	2302      	movs	r3, #2
 8001da6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001da8:	2301      	movs	r3, #1
 8001daa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001dac:	2308      	movs	r3, #8
 8001dae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001db0:	2307      	movs	r3, #7
 8001db2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001db4:	2302      	movs	r3, #2
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001db8:	2302      	movs	r3, #2
 8001dba:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001dbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc2:	f107 0310 	add.w	r3, r7, #16
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f004 f996 	bl	80060f8 <HAL_RCCEx_PeriphCLKConfig>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001dd2:	f7ff ff9f 	bl	8001d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e94 <HAL_ADC_MspInit+0x12c>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dda:	4a2e      	ldr	r2, [pc, #184]	@ (8001e94 <HAL_ADC_MspInit+0x12c>)
 8001ddc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001de0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e94 <HAL_ADC_MspInit+0x12c>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dee:	4b29      	ldr	r3, [pc, #164]	@ (8001e94 <HAL_ADC_MspInit+0x12c>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df2:	4a28      	ldr	r2, [pc, #160]	@ (8001e94 <HAL_ADC_MspInit+0x12c>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dfa:	4b26      	ldr	r3, [pc, #152]	@ (8001e94 <HAL_ADC_MspInit+0x12c>)
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e06:	2308      	movs	r3, #8
 8001e08:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001e0a:	230b      	movs	r3, #11
 8001e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e16:	4619      	mov	r1, r3
 8001e18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e1c:	f002 fcd0 	bl	80047c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e20:	4b1d      	ldr	r3, [pc, #116]	@ (8001e98 <HAL_ADC_MspInit+0x130>)
 8001e22:	4a1e      	ldr	r2, [pc, #120]	@ (8001e9c <HAL_ADC_MspInit+0x134>)
 8001e24:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001e26:	4b1c      	ldr	r3, [pc, #112]	@ (8001e98 <HAL_ADC_MspInit+0x130>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <HAL_ADC_MspInit+0x130>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e32:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <HAL_ADC_MspInit+0x130>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e38:	4b17      	ldr	r3, [pc, #92]	@ (8001e98 <HAL_ADC_MspInit+0x130>)
 8001e3a:	2280      	movs	r2, #128	@ 0x80
 8001e3c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e3e:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <HAL_ADC_MspInit+0x130>)
 8001e40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e44:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e46:	4b14      	ldr	r3, [pc, #80]	@ (8001e98 <HAL_ADC_MspInit+0x130>)
 8001e48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e4e:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <HAL_ADC_MspInit+0x130>)
 8001e50:	2220      	movs	r2, #32
 8001e52:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e54:	4b10      	ldr	r3, [pc, #64]	@ (8001e98 <HAL_ADC_MspInit+0x130>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e5a:	480f      	ldr	r0, [pc, #60]	@ (8001e98 <HAL_ADC_MspInit+0x130>)
 8001e5c:	f002 fab8 	bl	80043d0 <HAL_DMA_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001e66:	f7ff ff55 	bl	8001d14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <HAL_ADC_MspInit+0x130>)
 8001e6e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001e70:	4a09      	ldr	r2, [pc, #36]	@ (8001e98 <HAL_ADC_MspInit+0x130>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	2012      	movs	r0, #18
 8001e7c:	f002 f849 	bl	8003f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001e80:	2012      	movs	r0, #18
 8001e82:	f002 f862 	bl	8003f4a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e86:	bf00      	nop
 8001e88:	3778      	adds	r7, #120	@ 0x78
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	50040000 	.word	0x50040000
 8001e94:	40021000 	.word	0x40021000
 8001e98:	2000025c 	.word	0x2000025c
 8001e9c:	40020008 	.word	0x40020008

08001ea0 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	@ 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a19      	ldr	r2, [pc, #100]	@ (8001f24 <HAL_DAC_MspInit+0x84>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d12c      	bne.n	8001f1c <HAL_DAC_MspInit+0x7c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001ec2:	4b19      	ldr	r3, [pc, #100]	@ (8001f28 <HAL_DAC_MspInit+0x88>)
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec6:	4a18      	ldr	r2, [pc, #96]	@ (8001f28 <HAL_DAC_MspInit+0x88>)
 8001ec8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ecc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ece:	4b16      	ldr	r3, [pc, #88]	@ (8001f28 <HAL_DAC_MspInit+0x88>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eda:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <HAL_DAC_MspInit+0x88>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ede:	4a12      	ldr	r2, [pc, #72]	@ (8001f28 <HAL_DAC_MspInit+0x88>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ee6:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <HAL_DAC_MspInit+0x88>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ef2:	2310      	movs	r3, #16
 8001ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f08:	f002 fc5a 	bl	80047c0 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2036      	movs	r0, #54	@ 0x36
 8001f12:	f001 fffe 	bl	8003f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f16:	2036      	movs	r0, #54	@ 0x36
 8001f18:	f002 f817 	bl	8003f4a <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001f1c:	bf00      	nop
 8001f1e:	3728      	adds	r7, #40	@ 0x28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40007400 	.word	0x40007400
 8001f28:	40021000 	.word	0x40021000

08001f2c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b09e      	sub	sp, #120	@ 0x78
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	2254      	movs	r2, #84	@ 0x54
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f006 f9dd 	bl	800830c <memset>
  if(hi2c->Instance==I2C1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd0 <HAL_I2C_MspInit+0xa4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d135      	bne.n	8001fc8 <HAL_I2C_MspInit+0x9c>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f5c:	2340      	movs	r3, #64	@ 0x40
 8001f5e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f60:	2300      	movs	r3, #0
 8001f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 f8c5 	bl	80060f8 <HAL_RCCEx_PeriphCLKConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f74:	f7ff fece 	bl	8001d14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f78:	4b16      	ldr	r3, [pc, #88]	@ (8001fd4 <HAL_I2C_MspInit+0xa8>)
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7c:	4a15      	ldr	r2, [pc, #84]	@ (8001fd4 <HAL_I2C_MspInit+0xa8>)
 8001f7e:	f043 0302 	orr.w	r3, r3, #2
 8001f82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <HAL_I2C_MspInit+0xa8>)
 8001f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f90:	23c0      	movs	r3, #192	@ 0xc0
 8001f92:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f94:	2312      	movs	r3, #18
 8001f96:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001fa8:	4619      	mov	r1, r3
 8001faa:	480b      	ldr	r0, [pc, #44]	@ (8001fd8 <HAL_I2C_MspInit+0xac>)
 8001fac:	f002 fc08 	bl	80047c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fb0:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <HAL_I2C_MspInit+0xa8>)
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb4:	4a07      	ldr	r2, [pc, #28]	@ (8001fd4 <HAL_I2C_MspInit+0xa8>)
 8001fb6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fba:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <HAL_I2C_MspInit+0xa8>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001fc8:	bf00      	nop
 8001fca:	3778      	adds	r7, #120	@ 0x78
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40005400 	.word	0x40005400
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	48000400 	.word	0x48000400

08001fdc <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	@ 0x28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a28      	ldr	r2, [pc, #160]	@ (800209c <HAL_TIM_Encoder_MspInit+0xc0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d149      	bne.n	8002092 <HAL_TIM_Encoder_MspInit+0xb6>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ffe:	4b28      	ldr	r3, [pc, #160]	@ (80020a0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002002:	4a27      	ldr	r2, [pc, #156]	@ (80020a0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002004:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002008:	6613      	str	r3, [r2, #96]	@ 0x60
 800200a:	4b25      	ldr	r3, [pc, #148]	@ (80020a0 <HAL_TIM_Encoder_MspInit+0xc4>)
 800200c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800200e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	4b22      	ldr	r3, [pc, #136]	@ (80020a0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	4a21      	ldr	r2, [pc, #132]	@ (80020a0 <HAL_TIM_Encoder_MspInit+0xc4>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002022:	4b1f      	ldr	r3, [pc, #124]	@ (80020a0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800202e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002040:	2301      	movs	r3, #1
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800204e:	f002 fbb7 	bl	80047c0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2100      	movs	r1, #0
 8002056:	2018      	movs	r0, #24
 8002058:	f001 ff5b 	bl	8003f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800205c:	2018      	movs	r0, #24
 800205e:	f001 ff74 	bl	8003f4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	2100      	movs	r1, #0
 8002066:	2019      	movs	r0, #25
 8002068:	f001 ff53 	bl	8003f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800206c:	2019      	movs	r0, #25
 800206e:	f001 ff6c 	bl	8003f4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	2100      	movs	r1, #0
 8002076:	201a      	movs	r0, #26
 8002078:	f001 ff4b 	bl	8003f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800207c:	201a      	movs	r0, #26
 800207e:	f001 ff64 	bl	8003f4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	201b      	movs	r0, #27
 8002088:	f001 ff43 	bl	8003f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800208c:	201b      	movs	r0, #27
 800208e:	f001 ff5c 	bl	8003f4a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002092:	bf00      	nop
 8002094:	3728      	adds	r7, #40	@ 0x28
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40012c00 	.word	0x40012c00
 80020a0:	40021000 	.word	0x40021000

080020a4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0d      	ldr	r2, [pc, #52]	@ (80020e8 <HAL_TIM_Base_MspInit+0x44>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d113      	bne.n	80020de <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020b6:	4b0d      	ldr	r3, [pc, #52]	@ (80020ec <HAL_TIM_Base_MspInit+0x48>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ba:	4a0c      	ldr	r2, [pc, #48]	@ (80020ec <HAL_TIM_Base_MspInit+0x48>)
 80020bc:	f043 0310 	orr.w	r3, r3, #16
 80020c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80020c2:	4b0a      	ldr	r3, [pc, #40]	@ (80020ec <HAL_TIM_Base_MspInit+0x48>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	2036      	movs	r0, #54	@ 0x36
 80020d4:	f001 ff1d 	bl	8003f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020d8:	2036      	movs	r0, #54	@ 0x36
 80020da:	f001 ff36 	bl	8003f4a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40001000 	.word	0x40001000
 80020ec:	40021000 	.word	0x40021000

080020f0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b09e      	sub	sp, #120	@ 0x78
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	2254      	movs	r2, #84	@ 0x54
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f006 f8fb 	bl	800830c <memset>
  if(huart->Instance==USART2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a28      	ldr	r2, [pc, #160]	@ (80021bc <HAL_UART_MspInit+0xcc>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d148      	bne.n	80021b2 <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002120:	2302      	movs	r3, #2
 8002122:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002124:	2300      	movs	r3, #0
 8002126:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	4618      	mov	r0, r3
 800212e:	f003 ffe3 	bl	80060f8 <HAL_RCCEx_PeriphCLKConfig>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002138:	f7ff fdec 	bl	8001d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800213c:	4b20      	ldr	r3, [pc, #128]	@ (80021c0 <HAL_UART_MspInit+0xd0>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002140:	4a1f      	ldr	r2, [pc, #124]	@ (80021c0 <HAL_UART_MspInit+0xd0>)
 8002142:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002146:	6593      	str	r3, [r2, #88]	@ 0x58
 8002148:	4b1d      	ldr	r3, [pc, #116]	@ (80021c0 <HAL_UART_MspInit+0xd0>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002154:	4b1a      	ldr	r3, [pc, #104]	@ (80021c0 <HAL_UART_MspInit+0xd0>)
 8002156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002158:	4a19      	ldr	r2, [pc, #100]	@ (80021c0 <HAL_UART_MspInit+0xd0>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002160:	4b17      	ldr	r3, [pc, #92]	@ (80021c0 <HAL_UART_MspInit+0xd0>)
 8002162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800216c:	2304      	movs	r3, #4
 800216e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	2302      	movs	r3, #2
 8002172:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002178:	2303      	movs	r3, #3
 800217a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800217c:	2307      	movs	r3, #7
 800217e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002180:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002184:	4619      	mov	r1, r3
 8002186:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800218a:	f002 fb19 	bl	80047c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800218e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002192:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80021a0:	2303      	movs	r3, #3
 80021a2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80021a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021a8:	4619      	mov	r1, r3
 80021aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021ae:	f002 fb07 	bl	80047c0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80021b2:	bf00      	nop
 80021b4:	3778      	adds	r7, #120	@ 0x78
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40004400 	.word	0x40004400
 80021c0:	40021000 	.word	0x40021000

080021c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <NMI_Handler+0x4>

080021cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <HardFault_Handler+0x4>

080021d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d8:	bf00      	nop
 80021da:	e7fd      	b.n	80021d8 <MemManage_Handler+0x4>

080021dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <BusFault_Handler+0x4>

080021e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <UsageFault_Handler+0x4>

080021ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800221a:	f000 f9a9 	bl	8002570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}

08002222 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_Pin);
 8002226:	2002      	movs	r0, #2
 8002228:	f002 fc4c 	bl	8004ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}

08002230 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002234:	4802      	ldr	r0, [pc, #8]	@ (8002240 <DMA1_Channel1_IRQHandler+0x10>)
 8002236:	f002 f9e3 	bl	8004600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	2000025c 	.word	0x2000025c

08002244 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002248:	4802      	ldr	r0, [pc, #8]	@ (8002254 <ADC1_IRQHandler+0x10>)
 800224a:	f000 fd9b 	bl	8002d84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200001f8 	.word	0x200001f8

08002258 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800225c:	4802      	ldr	r0, [pc, #8]	@ (8002268 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800225e:	f004 fc33 	bl	8006ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	2000030c 	.word	0x2000030c

0800226c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002270:	4802      	ldr	r0, [pc, #8]	@ (800227c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002272:	f004 fc29 	bl	8006ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	2000030c 	.word	0x2000030c

08002280 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002284:	4802      	ldr	r0, [pc, #8]	@ (8002290 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002286:	f004 fc1f 	bl	8006ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000030c 	.word	0x2000030c

08002294 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002298:	4802      	ldr	r0, [pc, #8]	@ (80022a4 <TIM1_CC_IRQHandler+0x10>)
 800229a:	f004 fc15 	bl	8006ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	2000030c 	.word	0x2000030c

080022a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022ac:	4803      	ldr	r0, [pc, #12]	@ (80022bc <TIM6_DAC_IRQHandler+0x14>)
 80022ae:	f004 fc0b 	bl	8006ac8 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80022b2:	4803      	ldr	r0, [pc, #12]	@ (80022c0 <TIM6_DAC_IRQHandler+0x18>)
 80022b4:	f001 fed2 	bl	800405c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000358 	.word	0x20000358
 80022c0:	200002a4 	.word	0x200002a4

080022c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return 1;
 80022c8:	2301      	movs	r3, #1
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_kill>:

int _kill(int pid, int sig)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022de:	f006 f81d 	bl	800831c <__errno>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2216      	movs	r2, #22
 80022e6:	601a      	str	r2, [r3, #0]
  return -1;
 80022e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <_exit>:

void _exit (int status)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ffe7 	bl	80022d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002306:	bf00      	nop
 8002308:	e7fd      	b.n	8002306 <_exit+0x12>

0800230a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	e00a      	b.n	8002332 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800231c:	f3af 8000 	nop.w
 8002320:	4601      	mov	r1, r0
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	60ba      	str	r2, [r7, #8]
 8002328:	b2ca      	uxtb	r2, r1
 800232a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	3301      	adds	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	429a      	cmp	r2, r3
 8002338:	dbf0      	blt.n	800231c <_read+0x12>
  }

  return len;
 800233a:	687b      	ldr	r3, [r7, #4]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	e009      	b.n	800236a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	60ba      	str	r2, [r7, #8]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3301      	adds	r3, #1
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	429a      	cmp	r2, r3
 8002370:	dbf1      	blt.n	8002356 <_write+0x12>
  }
  return len;
 8002372:	687b      	ldr	r3, [r7, #4]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <_close>:

int _close(int file)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002384:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023a4:	605a      	str	r2, [r3, #4]
  return 0;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <_isatty>:

int _isatty(int file)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023bc:	2301      	movs	r3, #1
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b085      	sub	sp, #20
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ec:	4a14      	ldr	r2, [pc, #80]	@ (8002440 <_sbrk+0x5c>)
 80023ee:	4b15      	ldr	r3, [pc, #84]	@ (8002444 <_sbrk+0x60>)
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f8:	4b13      	ldr	r3, [pc, #76]	@ (8002448 <_sbrk+0x64>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d102      	bne.n	8002406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002400:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <_sbrk+0x64>)
 8002402:	4a12      	ldr	r2, [pc, #72]	@ (800244c <_sbrk+0x68>)
 8002404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002406:	4b10      	ldr	r3, [pc, #64]	@ (8002448 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	429a      	cmp	r2, r3
 8002412:	d207      	bcs.n	8002424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002414:	f005 ff82 	bl	800831c <__errno>
 8002418:	4603      	mov	r3, r0
 800241a:	220c      	movs	r2, #12
 800241c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002422:	e009      	b.n	8002438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002424:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <_sbrk+0x64>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800242a:	4b07      	ldr	r3, [pc, #28]	@ (8002448 <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	4a05      	ldr	r2, [pc, #20]	@ (8002448 <_sbrk+0x64>)
 8002434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002436:	68fb      	ldr	r3, [r7, #12]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	2000c000 	.word	0x2000c000
 8002444:	00000400 	.word	0x00000400
 8002448:	2000047c 	.word	0x2000047c
 800244c:	200005d0 	.word	0x200005d0

08002450 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002454:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <SystemInit+0x20>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245a:	4a05      	ldr	r2, [pc, #20]	@ (8002470 <SystemInit+0x20>)
 800245c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002460:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002474:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002478:	f7ff ffea 	bl	8002450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800247c:	480c      	ldr	r0, [pc, #48]	@ (80024b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800247e:	490d      	ldr	r1, [pc, #52]	@ (80024b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002480:	4a0d      	ldr	r2, [pc, #52]	@ (80024b8 <LoopForever+0xe>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002484:	e002      	b.n	800248c <LoopCopyDataInit>

08002486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248a:	3304      	adds	r3, #4

0800248c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800248c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002490:	d3f9      	bcc.n	8002486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002492:	4a0a      	ldr	r2, [pc, #40]	@ (80024bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002494:	4c0a      	ldr	r4, [pc, #40]	@ (80024c0 <LoopForever+0x16>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002498:	e001      	b.n	800249e <LoopFillZerobss>

0800249a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800249c:	3204      	adds	r2, #4

0800249e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a0:	d3fb      	bcc.n	800249a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024a2:	f005 ff41 	bl	8008328 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024a6:	f7fe fe7b 	bl	80011a0 <main>

080024aa <LoopForever>:

LoopForever:
    b LoopForever
 80024aa:	e7fe      	b.n	80024aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024ac:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80024b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80024b8:	0800a934 	.word	0x0800a934
  ldr r2, =_sbss
 80024bc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80024c0:	200005d0 	.word	0x200005d0

080024c4 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024c4:	e7fe      	b.n	80024c4 <CAN1_RX0_IRQHandler>

080024c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d0:	2003      	movs	r0, #3
 80024d2:	f001 fd13 	bl	8003efc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024d6:	2000      	movs	r0, #0
 80024d8:	f000 f80e 	bl	80024f8 <HAL_InitTick>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	71fb      	strb	r3, [r7, #7]
 80024e6:	e001      	b.n	80024ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024e8:	f7ff fc1a 	bl	8001d20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024ec:	79fb      	ldrb	r3, [r7, #7]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002504:	4b17      	ldr	r3, [pc, #92]	@ (8002564 <HAL_InitTick+0x6c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d023      	beq.n	8002554 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800250c:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <HAL_InitTick+0x70>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b14      	ldr	r3, [pc, #80]	@ (8002564 <HAL_InitTick+0x6c>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800251a:	fbb3 f3f1 	udiv	r3, r3, r1
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	4618      	mov	r0, r3
 8002524:	f001 fd1f 	bl	8003f66 <HAL_SYSTICK_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10f      	bne.n	800254e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b0f      	cmp	r3, #15
 8002532:	d809      	bhi.n	8002548 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002534:	2200      	movs	r2, #0
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800253c:	f001 fce9 	bl	8003f12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002540:	4a0a      	ldr	r2, [pc, #40]	@ (800256c <HAL_InitTick+0x74>)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e007      	b.n	8002558 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	e004      	b.n	8002558 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
 8002552:	e001      	b.n	8002558 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000010 	.word	0x20000010
 8002568:	20000008 	.word	0x20000008
 800256c:	2000000c 	.word	0x2000000c

08002570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <HAL_IncTick+0x20>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_IncTick+0x24>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4413      	add	r3, r2
 8002580:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <HAL_IncTick+0x24>)
 8002582:	6013      	str	r3, [r2, #0]
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000010 	.word	0x20000010
 8002594:	20000480 	.word	0x20000480

08002598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return uwTick;
 800259c:	4b03      	ldr	r3, [pc, #12]	@ (80025ac <HAL_GetTick+0x14>)
 800259e:	681b      	ldr	r3, [r3, #0]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000480 	.word	0x20000480

080025b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025b8:	f7ff ffee 	bl	8002598 <HAL_GetTick>
 80025bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025c8:	d005      	beq.n	80025d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025ca:	4b0a      	ldr	r3, [pc, #40]	@ (80025f4 <HAL_Delay+0x44>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4413      	add	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025d6:	bf00      	nop
 80025d8:	f7ff ffde 	bl	8002598 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d8f7      	bhi.n	80025d8 <HAL_Delay+0x28>
  {
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000010 	.word	0x20000010

080025f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	609a      	str	r2, [r3, #8]
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	609a      	str	r2, [r3, #8]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002654:	4618      	mov	r0, r3
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	3360      	adds	r3, #96	@ 0x60
 8002672:	461a      	mov	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <LL_ADC_SetOffset+0x44>)
 8002682:	4013      	ands	r3, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	4313      	orrs	r3, r2
 8002690:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002698:	bf00      	nop
 800269a:	371c      	adds	r7, #28
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	03fff000 	.word	0x03fff000

080026a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3360      	adds	r3, #96	@ 0x60
 80026b6:	461a      	mov	r2, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3360      	adds	r3, #96	@ 0x60
 80026e4:	461a      	mov	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026fe:	bf00      	nop
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3330      	adds	r3, #48	@ 0x30
 8002740:	461a      	mov	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	4413      	add	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f003 031f 	and.w	r3, r3, #31
 800275a:	211f      	movs	r1, #31
 800275c:	fa01 f303 	lsl.w	r3, r1, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	401a      	ands	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	0e9b      	lsrs	r3, r3, #26
 8002768:	f003 011f 	and.w	r1, r3, #31
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	431a      	orrs	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800277c:	bf00      	nop
 800277e:	371c      	adds	r7, #28
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002794:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b087      	sub	sp, #28
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3314      	adds	r3, #20
 80027be:	461a      	mov	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	0e5b      	lsrs	r3, r3, #25
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	4413      	add	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	0d1b      	lsrs	r3, r3, #20
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	2107      	movs	r1, #7
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	401a      	ands	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	0d1b      	lsrs	r3, r3, #20
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	fa01 f303 	lsl.w	r3, r1, r3
 80027f2:	431a      	orrs	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027f8:	bf00      	nop
 80027fa:	371c      	adds	r7, #28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281c:	43db      	mvns	r3, r3
 800281e:	401a      	ands	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f003 0318 	and.w	r3, r3, #24
 8002826:	4908      	ldr	r1, [pc, #32]	@ (8002848 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002828:	40d9      	lsrs	r1, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	400b      	ands	r3, r1
 800282e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002832:	431a      	orrs	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	0007ffff 	.word	0x0007ffff

0800284c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800285c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6093      	str	r3, [r2, #8]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002880:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002884:	d101      	bne.n	800288a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80028a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028d4:	d101      	bne.n	80028da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002920:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002924:	f043 0202 	orr.w	r2, r3, #2
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <LL_ADC_IsEnabled+0x18>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <LL_ADC_IsEnabled+0x1a>
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b02      	cmp	r3, #2
 8002970:	d101      	bne.n	8002976 <LL_ADC_IsDisableOngoing+0x18>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <LL_ADC_IsDisableOngoing+0x1a>
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002994:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002998:	f043 0204 	orr.w	r2, r3, #4
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d101      	bne.n	80029c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d101      	bne.n	80029ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e126      	b.n	8002c60 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d109      	bne.n	8002a34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff f9a1 	bl	8001d68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff19 	bl	8002870 <LL_ADC_IsDeepPowerDownEnabled>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff feff 	bl	800284c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff ff34 	bl	80028c0 <LL_ADC_IsInternalRegulatorEnabled>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d115      	bne.n	8002a8a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ff18 	bl	8002898 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a68:	4b7f      	ldr	r3, [pc, #508]	@ (8002c68 <HAL_ADC_Init+0x270>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	099b      	lsrs	r3, r3, #6
 8002a6e:	4a7f      	ldr	r2, [pc, #508]	@ (8002c6c <HAL_ADC_Init+0x274>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	099b      	lsrs	r3, r3, #6
 8002a76:	3301      	adds	r3, #1
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a7c:	e002      	b.n	8002a84 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f9      	bne.n	8002a7e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff ff16 	bl	80028c0 <LL_ADC_IsInternalRegulatorEnabled>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10d      	bne.n	8002ab6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9e:	f043 0210 	orr.w	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ff76 	bl	80029ac <LL_ADC_REG_IsConversionOngoing>
 8002ac0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f040 80bf 	bne.w	8002c4e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f040 80bb 	bne.w	8002c4e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002ae0:	f043 0202 	orr.w	r2, r3, #2
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff23 	bl	8002938 <LL_ADC_IsEnabled>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10b      	bne.n	8002b10 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002af8:	485d      	ldr	r0, [pc, #372]	@ (8002c70 <HAL_ADC_Init+0x278>)
 8002afa:	f7ff ff1d 	bl	8002938 <LL_ADC_IsEnabled>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	485a      	ldr	r0, [pc, #360]	@ (8002c74 <HAL_ADC_Init+0x27c>)
 8002b0c:	f7ff fd74 	bl	80025f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	7e5b      	ldrb	r3, [r3, #25]
 8002b14:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b1a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002b20:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002b26:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b2e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d106      	bne.n	8002b4c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	3b01      	subs	r3, #1
 8002b44:	045b      	lsls	r3, r3, #17
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d009      	beq.n	8002b68 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b58:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b60:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	4b42      	ldr	r3, [pc, #264]	@ (8002c78 <HAL_ADC_Init+0x280>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	69b9      	ldr	r1, [r7, #24]
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ff26 	bl	80029d2 <LL_ADC_INJ_IsConversionOngoing>
 8002b86:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d13d      	bne.n	8002c0a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d13a      	bne.n	8002c0a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b98:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ba0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bb0:	f023 0302 	bic.w	r3, r3, #2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	69b9      	ldr	r1, [r7, #24]
 8002bba:	430b      	orrs	r3, r1
 8002bbc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d118      	bne.n	8002bfa <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002bd2:	f023 0304 	bic.w	r3, r3, #4
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002bde:	4311      	orrs	r1, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002be4:	4311      	orrs	r1, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bea:	430a      	orrs	r2, r1
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	611a      	str	r2, [r3, #16]
 8002bf8:	e007      	b.n	8002c0a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10c      	bne.n	8002c2c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c18:	f023 010f 	bic.w	r1, r3, #15
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	1e5a      	subs	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c2a:	e007      	b.n	8002c3c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 020f 	bic.w	r2, r2, #15
 8002c3a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c40:	f023 0303 	bic.w	r3, r3, #3
 8002c44:	f043 0201 	orr.w	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c4c:	e007      	b.n	8002c5e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c52:	f043 0210 	orr.w	r2, r3, #16
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3720      	adds	r7, #32
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20000008 	.word	0x20000008
 8002c6c:	053e2d63 	.word	0x053e2d63
 8002c70:	50040000 	.word	0x50040000
 8002c74:	50040300 	.word	0x50040300
 8002c78:	fff0c007 	.word	0xfff0c007

08002c7c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fe8d 	bl	80029ac <LL_ADC_REG_IsConversionOngoing>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d167      	bne.n	8002d68 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_Start_DMA+0x2a>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e063      	b.n	8002d6e <HAL_ADC_Start_DMA+0xf2>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 fe1c 	bl	80038ec <ADC_Enable>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d14f      	bne.n	8002d5e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002cc6:	f023 0301 	bic.w	r3, r3, #1
 8002cca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d006      	beq.n	8002cec <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce2:	f023 0206 	bic.w	r2, r3, #6
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cea:	e002      	b.n	8002cf2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf6:	4a20      	ldr	r2, [pc, #128]	@ (8002d78 <HAL_ADC_Start_DMA+0xfc>)
 8002cf8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8002d7c <HAL_ADC_Start_DMA+0x100>)
 8002d00:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d06:	4a1e      	ldr	r2, [pc, #120]	@ (8002d80 <HAL_ADC_Start_DMA+0x104>)
 8002d08:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	221c      	movs	r2, #28
 8002d10:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0210 	orr.w	r2, r2, #16
 8002d28:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	3340      	adds	r3, #64	@ 0x40
 8002d44:	4619      	mov	r1, r3
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f001 fbf9 	bl	8004540 <HAL_DMA_Start_IT>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fe14 	bl	8002984 <LL_ADC_REG_StartConversion>
 8002d5c:	e006      	b.n	8002d6c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002d66:	e001      	b.n	8002d6c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	08003ab7 	.word	0x08003ab7
 8002d7c:	08003b8f 	.word	0x08003b8f
 8002d80:	08003bab 	.word	0x08003bab

08002d84 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d017      	beq.n	8002dda <HAL_ADC_IRQHandler+0x56>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d012      	beq.n	8002dda <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 ffbb 	bl	8003d48 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d004      	beq.n	8002dee <HAL_ADC_IRQHandler+0x6a>
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d05e      	beq.n	8002eb6 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d059      	beq.n	8002eb6 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d105      	bne.n	8002e1a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e12:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fc73 	bl	800270a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d03e      	beq.n	8002ea8 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d135      	bne.n	8002ea8 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d12e      	bne.n	8002ea8 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fdac 	bl	80029ac <LL_ADC_REG_IsConversionOngoing>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d11a      	bne.n	8002e90 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 020c 	bic.w	r2, r2, #12
 8002e68:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d112      	bne.n	8002ea8 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e86:	f043 0201 	orr.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e8e:	e00b      	b.n	8002ea8 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e94:	f043 0210 	orr.w	r2, r3, #16
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea0:	f043 0201 	orr.w	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7fe ff29 	bl	8001d00 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	220c      	movs	r2, #12
 8002eb4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d004      	beq.n	8002eca <HAL_ADC_IRQHandler+0x146>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d072      	beq.n	8002fba <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d06d      	beq.n	8002fba <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d105      	bne.n	8002ef6 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eee:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fc44 	bl	8002788 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002f00:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fbff 	bl	800270a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f0c:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d047      	beq.n	8002fac <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <HAL_ADC_IRQHandler+0x1b2>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d03f      	beq.n	8002fac <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d13a      	bne.n	8002fac <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f40:	2b40      	cmp	r3, #64	@ 0x40
 8002f42:	d133      	bne.n	8002fac <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d12e      	bne.n	8002fac <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fd3d 	bl	80029d2 <LL_ADC_INJ_IsConversionOngoing>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d11a      	bne.n	8002f94 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f6c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d112      	bne.n	8002fac <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8a:	f043 0201 	orr.w	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f92:	e00b      	b.n	8002fac <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f98:	f043 0210 	orr.w	r2, r3, #16
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa4:	f043 0201 	orr.w	r2, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fea3 	bl	8003cf8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2260      	movs	r2, #96	@ 0x60
 8002fb8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d011      	beq.n	8002fe8 <HAL_ADC_IRQHandler+0x264>
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00c      	beq.n	8002fe8 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f890 	bl	8003100 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2280      	movs	r2, #128	@ 0x80
 8002fe6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d012      	beq.n	8003018 <HAL_ADC_IRQHandler+0x294>
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00d      	beq.n	8003018 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003000:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fe89 	bl	8003d20 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003016:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800301e:	2b00      	cmp	r3, #0
 8003020:	d012      	beq.n	8003048 <HAL_ADC_IRQHandler+0x2c4>
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00d      	beq.n	8003048 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003030:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fe7b 	bl	8003d34 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003046:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	2b00      	cmp	r3, #0
 8003050:	d02a      	beq.n	80030a8 <HAL_ADC_IRQHandler+0x324>
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b00      	cmp	r3, #0
 800305a:	d025      	beq.n	80030a8 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003060:	2b00      	cmp	r3, #0
 8003062:	d102      	bne.n	800306a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8003064:	2301      	movs	r3, #1
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	e008      	b.n	800307c <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8003078:	2301      	movs	r3, #1
 800307a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d10e      	bne.n	80030a0 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003086:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	f043 0202 	orr.w	r2, r3, #2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f83a 	bl	8003114 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2210      	movs	r2, #16
 80030a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d018      	beq.n	80030e4 <HAL_ADC_IRQHandler+0x360>
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d013      	beq.n	80030e4 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030cc:	f043 0208 	orr.w	r2, r3, #8
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030dc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fe14 	bl	8003d0c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80030e4:	bf00      	nop
 80030e6:	3720      	adds	r7, #32
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b0b6      	sub	sp, #216	@ 0xd8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003138:	2300      	movs	r3, #0
 800313a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_ADC_ConfigChannel+0x22>
 8003146:	2302      	movs	r3, #2
 8003148:	e3bb      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x79a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff fc28 	bl	80029ac <LL_ADC_REG_IsConversionOngoing>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 83a0 	bne.w	80038a4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b05      	cmp	r3, #5
 8003172:	d824      	bhi.n	80031be <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	3b02      	subs	r3, #2
 800317a:	2b03      	cmp	r3, #3
 800317c:	d81b      	bhi.n	80031b6 <HAL_ADC_ConfigChannel+0x8e>
 800317e:	a201      	add	r2, pc, #4	@ (adr r2, 8003184 <HAL_ADC_ConfigChannel+0x5c>)
 8003180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003184:	08003195 	.word	0x08003195
 8003188:	0800319d 	.word	0x0800319d
 800318c:	080031a5 	.word	0x080031a5
 8003190:	080031ad 	.word	0x080031ad
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003194:	230c      	movs	r3, #12
 8003196:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800319a:	e010      	b.n	80031be <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800319c:	2312      	movs	r3, #18
 800319e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80031a2:	e00c      	b.n	80031be <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80031a4:	2318      	movs	r3, #24
 80031a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80031aa:	e008      	b.n	80031be <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80031ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80031b4:	e003      	b.n	80031be <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80031b6:	2306      	movs	r3, #6
 80031b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80031bc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80031cc:	f7ff fab0 	bl	8002730 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fbe9 	bl	80029ac <LL_ADC_REG_IsConversionOngoing>
 80031da:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fbf5 	bl	80029d2 <LL_ADC_INJ_IsConversionOngoing>
 80031e8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f040 81a4 	bne.w	800353e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 819f 	bne.w	800353e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	6819      	ldr	r1, [r3, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	461a      	mov	r2, r3
 800320e:	f7ff face 	bl	80027ae <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	08db      	lsrs	r3, r3, #3
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b04      	cmp	r3, #4
 8003232:	d00a      	beq.n	800324a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	6919      	ldr	r1, [r3, #16]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003244:	f7ff fa0c 	bl	8002660 <LL_ADC_SetOffset>
 8003248:	e179      	b.n	800353e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fa29 	bl	80026a8 <LL_ADC_GetOffsetChannel>
 8003256:	4603      	mov	r3, r0
 8003258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x14e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fa1e 	bl	80026a8 <LL_ADC_GetOffsetChannel>
 800326c:	4603      	mov	r3, r0
 800326e:	0e9b      	lsrs	r3, r3, #26
 8003270:	f003 021f 	and.w	r2, r3, #31
 8003274:	e01e      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x18c>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2100      	movs	r1, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fa13 	bl	80026a8 <LL_ADC_GetOffsetChannel>
 8003282:	4603      	mov	r3, r0
 8003284:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003294:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003298:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800329c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80032a4:	2320      	movs	r3, #32
 80032a6:	e004      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80032a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80032ac:	fab3 f383 	clz	r3, r3
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x1a4>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	0e9b      	lsrs	r3, r3, #26
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	e018      	b.n	80032fe <HAL_ADC_ConfigChannel+0x1d6>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80032e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80032e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80032f0:	2320      	movs	r3, #32
 80032f2:	e004      	b.n	80032fe <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80032f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80032f8:	fab3 f383 	clz	r3, r3
 80032fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032fe:	429a      	cmp	r2, r3
 8003300:	d106      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2200      	movs	r2, #0
 8003308:	2100      	movs	r1, #0
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff f9e2 	bl	80026d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2101      	movs	r1, #1
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff f9c6 	bl	80026a8 <LL_ADC_GetOffsetChannel>
 800331c:	4603      	mov	r3, r0
 800331e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10a      	bne.n	800333c <HAL_ADC_ConfigChannel+0x214>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2101      	movs	r1, #1
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff f9bb 	bl	80026a8 <LL_ADC_GetOffsetChannel>
 8003332:	4603      	mov	r3, r0
 8003334:	0e9b      	lsrs	r3, r3, #26
 8003336:	f003 021f 	and.w	r2, r3, #31
 800333a:	e01e      	b.n	800337a <HAL_ADC_ConfigChannel+0x252>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2101      	movs	r1, #1
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff f9b0 	bl	80026a8 <LL_ADC_GetOffsetChannel>
 8003348:	4603      	mov	r3, r0
 800334a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003352:	fa93 f3a3 	rbit	r3, r3
 8003356:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800335a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800335e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003362:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800336a:	2320      	movs	r3, #32
 800336c:	e004      	b.n	8003378 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800336e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x26a>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	0e9b      	lsrs	r3, r3, #26
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	e018      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x29c>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80033a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80033ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80033b6:	2320      	movs	r3, #32
 80033b8:	e004      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80033ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d106      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2200      	movs	r2, #0
 80033ce:	2101      	movs	r1, #1
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff f97f 	bl	80026d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2102      	movs	r1, #2
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff f963 	bl	80026a8 <LL_ADC_GetOffsetChannel>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x2da>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2102      	movs	r1, #2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff f958 	bl	80026a8 <LL_ADC_GetOffsetChannel>
 80033f8:	4603      	mov	r3, r0
 80033fa:	0e9b      	lsrs	r3, r3, #26
 80033fc:	f003 021f 	and.w	r2, r3, #31
 8003400:	e01e      	b.n	8003440 <HAL_ADC_ConfigChannel+0x318>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2102      	movs	r1, #2
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff f94d 	bl	80026a8 <LL_ADC_GetOffsetChannel>
 800340e:	4603      	mov	r3, r0
 8003410:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003418:	fa93 f3a3 	rbit	r3, r3
 800341c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003420:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003424:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003428:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003430:	2320      	movs	r3, #32
 8003432:	e004      	b.n	800343e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003434:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003438:	fab3 f383 	clz	r3, r3
 800343c:	b2db      	uxtb	r3, r3
 800343e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003448:	2b00      	cmp	r3, #0
 800344a:	d105      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x330>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	0e9b      	lsrs	r3, r3, #26
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	e014      	b.n	8003482 <HAL_ADC_ConfigChannel+0x35a>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003466:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003468:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800346c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003474:	2320      	movs	r3, #32
 8003476:	e004      	b.n	8003482 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003478:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003482:	429a      	cmp	r2, r3
 8003484:	d106      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2200      	movs	r2, #0
 800348c:	2102      	movs	r1, #2
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff f920 	bl	80026d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2103      	movs	r1, #3
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff f904 	bl	80026a8 <LL_ADC_GetOffsetChannel>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10a      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x398>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2103      	movs	r1, #3
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff f8f9 	bl	80026a8 <LL_ADC_GetOffsetChannel>
 80034b6:	4603      	mov	r3, r0
 80034b8:	0e9b      	lsrs	r3, r3, #26
 80034ba:	f003 021f 	and.w	r2, r3, #31
 80034be:	e017      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x3c8>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2103      	movs	r1, #3
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff f8ee 	bl	80026a8 <LL_ADC_GetOffsetChannel>
 80034cc:	4603      	mov	r3, r0
 80034ce:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80034d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034da:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80034dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80034e2:	2320      	movs	r3, #32
 80034e4:	e003      	b.n	80034ee <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80034e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034e8:	fab3 f383 	clz	r3, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d105      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x3e0>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	0e9b      	lsrs	r3, r3, #26
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	e011      	b.n	800352c <HAL_ADC_ConfigChannel+0x404>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003516:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003518:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800351a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003520:	2320      	movs	r3, #32
 8003522:	e003      	b.n	800352c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003524:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800352c:	429a      	cmp	r2, r3
 800352e:	d106      	bne.n	800353e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2200      	movs	r2, #0
 8003536:	2103      	movs	r1, #3
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff f8cb 	bl	80026d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff f9f8 	bl	8002938 <LL_ADC_IsEnabled>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	f040 8140 	bne.w	80037d0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	6819      	ldr	r1, [r3, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	461a      	mov	r2, r3
 800355e:	f7ff f951 	bl	8002804 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	4a8f      	ldr	r2, [pc, #572]	@ (80037a4 <HAL_ADC_ConfigChannel+0x67c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	f040 8131 	bne.w	80037d0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x46e>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	0e9b      	lsrs	r3, r3, #26
 8003584:	3301      	adds	r3, #1
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	2b09      	cmp	r3, #9
 800358c:	bf94      	ite	ls
 800358e:	2301      	movls	r3, #1
 8003590:	2300      	movhi	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	e019      	b.n	80035ca <HAL_ADC_ConfigChannel+0x4a2>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800359e:	fa93 f3a3 	rbit	r3, r3
 80035a2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80035a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80035a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80035ae:	2320      	movs	r3, #32
 80035b0:	e003      	b.n	80035ba <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80035b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035b4:	fab3 f383 	clz	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	3301      	adds	r3, #1
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	2b09      	cmp	r3, #9
 80035c2:	bf94      	ite	ls
 80035c4:	2301      	movls	r3, #1
 80035c6:	2300      	movhi	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d079      	beq.n	80036c2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d107      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x4c2>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	0e9b      	lsrs	r3, r3, #26
 80035e0:	3301      	adds	r3, #1
 80035e2:	069b      	lsls	r3, r3, #26
 80035e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035e8:	e015      	b.n	8003616 <HAL_ADC_ConfigChannel+0x4ee>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80035f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035fa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80035fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003602:	2320      	movs	r3, #32
 8003604:	e003      	b.n	800360e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003606:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003608:	fab3 f383 	clz	r3, r3
 800360c:	b2db      	uxtb	r3, r3
 800360e:	3301      	adds	r3, #1
 8003610:	069b      	lsls	r3, r3, #26
 8003612:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x50e>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	0e9b      	lsrs	r3, r3, #26
 8003628:	3301      	adds	r3, #1
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	2101      	movs	r1, #1
 8003630:	fa01 f303 	lsl.w	r3, r1, r3
 8003634:	e017      	b.n	8003666 <HAL_ADC_ConfigChannel+0x53e>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800363e:	fa93 f3a3 	rbit	r3, r3
 8003642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003646:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800364e:	2320      	movs	r3, #32
 8003650:	e003      	b.n	800365a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003654:	fab3 f383 	clz	r3, r3
 8003658:	b2db      	uxtb	r3, r3
 800365a:	3301      	adds	r3, #1
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	2101      	movs	r1, #1
 8003662:	fa01 f303 	lsl.w	r3, r1, r3
 8003666:	ea42 0103 	orr.w	r1, r2, r3
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10a      	bne.n	800368c <HAL_ADC_ConfigChannel+0x564>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	0e9b      	lsrs	r3, r3, #26
 800367c:	3301      	adds	r3, #1
 800367e:	f003 021f 	and.w	r2, r3, #31
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	051b      	lsls	r3, r3, #20
 800368a:	e018      	b.n	80036be <HAL_ADC_ConfigChannel+0x596>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003694:	fa93 f3a3 	rbit	r3, r3
 8003698:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800369a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800369e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80036a4:	2320      	movs	r3, #32
 80036a6:	e003      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80036a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	3301      	adds	r3, #1
 80036b2:	f003 021f 	and.w	r2, r3, #31
 80036b6:	4613      	mov	r3, r2
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4413      	add	r3, r2
 80036bc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036be:	430b      	orrs	r3, r1
 80036c0:	e081      	b.n	80037c6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d107      	bne.n	80036de <HAL_ADC_ConfigChannel+0x5b6>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	0e9b      	lsrs	r3, r3, #26
 80036d4:	3301      	adds	r3, #1
 80036d6:	069b      	lsls	r3, r3, #26
 80036d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036dc:	e015      	b.n	800370a <HAL_ADC_ConfigChannel+0x5e2>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e6:	fa93 f3a3 	rbit	r3, r3
 80036ea:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80036ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80036f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80036f6:	2320      	movs	r3, #32
 80036f8:	e003      	b.n	8003702 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80036fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036fc:	fab3 f383 	clz	r3, r3
 8003700:	b2db      	uxtb	r3, r3
 8003702:	3301      	adds	r3, #1
 8003704:	069b      	lsls	r3, r3, #26
 8003706:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <HAL_ADC_ConfigChannel+0x602>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	0e9b      	lsrs	r3, r3, #26
 800371c:	3301      	adds	r3, #1
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	2101      	movs	r1, #1
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	e017      	b.n	800375a <HAL_ADC_ConfigChannel+0x632>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	fa93 f3a3 	rbit	r3, r3
 8003736:	61bb      	str	r3, [r7, #24]
  return result;
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003742:	2320      	movs	r3, #32
 8003744:	e003      	b.n	800374e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	fab3 f383 	clz	r3, r3
 800374c:	b2db      	uxtb	r3, r3
 800374e:	3301      	adds	r3, #1
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	2101      	movs	r1, #1
 8003756:	fa01 f303 	lsl.w	r3, r1, r3
 800375a:	ea42 0103 	orr.w	r1, r2, r3
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10d      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x65e>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	0e9b      	lsrs	r3, r3, #26
 8003770:	3301      	adds	r3, #1
 8003772:	f003 021f 	and.w	r2, r3, #31
 8003776:	4613      	mov	r3, r2
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4413      	add	r3, r2
 800377c:	3b1e      	subs	r3, #30
 800377e:	051b      	lsls	r3, r3, #20
 8003780:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003784:	e01e      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x69c>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	60fb      	str	r3, [r7, #12]
  return result;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d104      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800379e:	2320      	movs	r3, #32
 80037a0:	e006      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x688>
 80037a2:	bf00      	nop
 80037a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	3301      	adds	r3, #1
 80037b2:	f003 021f 	and.w	r2, r3, #31
 80037b6:	4613      	mov	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	3b1e      	subs	r3, #30
 80037be:	051b      	lsls	r3, r3, #20
 80037c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ca:	4619      	mov	r1, r3
 80037cc:	f7fe ffef 	bl	80027ae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4b3d      	ldr	r3, [pc, #244]	@ (80038cc <HAL_ADC_ConfigChannel+0x7a4>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d06c      	beq.n	80038b6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037dc:	483c      	ldr	r0, [pc, #240]	@ (80038d0 <HAL_ADC_ConfigChannel+0x7a8>)
 80037de:	f7fe ff31 	bl	8002644 <LL_ADC_GetCommonPathInternalCh>
 80037e2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a3a      	ldr	r2, [pc, #232]	@ (80038d4 <HAL_ADC_ConfigChannel+0x7ac>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d127      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d121      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a35      	ldr	r2, [pc, #212]	@ (80038d8 <HAL_ADC_ConfigChannel+0x7b0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d157      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003806:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800380a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800380e:	4619      	mov	r1, r3
 8003810:	482f      	ldr	r0, [pc, #188]	@ (80038d0 <HAL_ADC_ConfigChannel+0x7a8>)
 8003812:	f7fe ff04 	bl	800261e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003816:	4b31      	ldr	r3, [pc, #196]	@ (80038dc <HAL_ADC_ConfigChannel+0x7b4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	099b      	lsrs	r3, r3, #6
 800381c:	4a30      	ldr	r2, [pc, #192]	@ (80038e0 <HAL_ADC_ConfigChannel+0x7b8>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	099b      	lsrs	r3, r3, #6
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003830:	e002      	b.n	8003838 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	3b01      	subs	r3, #1
 8003836:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f9      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800383e:	e03a      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a27      	ldr	r2, [pc, #156]	@ (80038e4 <HAL_ADC_ConfigChannel+0x7bc>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d113      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800384a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800384e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10d      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1f      	ldr	r2, [pc, #124]	@ (80038d8 <HAL_ADC_ConfigChannel+0x7b0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d12a      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003860:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003864:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003868:	4619      	mov	r1, r3
 800386a:	4819      	ldr	r0, [pc, #100]	@ (80038d0 <HAL_ADC_ConfigChannel+0x7a8>)
 800386c:	f7fe fed7 	bl	800261e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003870:	e021      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1c      	ldr	r2, [pc, #112]	@ (80038e8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d11c      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800387c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003880:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d116      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a12      	ldr	r2, [pc, #72]	@ (80038d8 <HAL_ADC_ConfigChannel+0x7b0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d111      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003892:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003896:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800389a:	4619      	mov	r1, r3
 800389c:	480c      	ldr	r0, [pc, #48]	@ (80038d0 <HAL_ADC_ConfigChannel+0x7a8>)
 800389e:	f7fe febe 	bl	800261e <LL_ADC_SetCommonPathInternalCh>
 80038a2:	e008      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a8:	f043 0220 	orr.w	r2, r3, #32
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80038be:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	37d8      	adds	r7, #216	@ 0xd8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	80080000 	.word	0x80080000
 80038d0:	50040300 	.word	0x50040300
 80038d4:	c7520000 	.word	0xc7520000
 80038d8:	50040000 	.word	0x50040000
 80038dc:	20000008 	.word	0x20000008
 80038e0:	053e2d63 	.word	0x053e2d63
 80038e4:	cb840000 	.word	0xcb840000
 80038e8:	80000001 	.word	0x80000001

080038ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff f81b 	bl	8002938 <LL_ADC_IsEnabled>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d169      	bne.n	80039dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	4b36      	ldr	r3, [pc, #216]	@ (80039e8 <ADC_Enable+0xfc>)
 8003910:	4013      	ands	r3, r2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00d      	beq.n	8003932 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391a:	f043 0210 	orr.w	r2, r3, #16
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003926:	f043 0201 	orr.w	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e055      	b.n	80039de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe ffd6 	bl	80028e8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800393c:	482b      	ldr	r0, [pc, #172]	@ (80039ec <ADC_Enable+0x100>)
 800393e:	f7fe fe81 	bl	8002644 <LL_ADC_GetCommonPathInternalCh>
 8003942:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003944:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003948:	2b00      	cmp	r3, #0
 800394a:	d013      	beq.n	8003974 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800394c:	4b28      	ldr	r3, [pc, #160]	@ (80039f0 <ADC_Enable+0x104>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	099b      	lsrs	r3, r3, #6
 8003952:	4a28      	ldr	r2, [pc, #160]	@ (80039f4 <ADC_Enable+0x108>)
 8003954:	fba2 2303 	umull	r2, r3, r2, r3
 8003958:	099b      	lsrs	r3, r3, #6
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	4613      	mov	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003966:	e002      	b.n	800396e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	3b01      	subs	r3, #1
 800396c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f9      	bne.n	8003968 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003974:	f7fe fe10 	bl	8002598 <HAL_GetTick>
 8003978:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800397a:	e028      	b.n	80039ce <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe ffd9 	bl	8002938 <LL_ADC_IsEnabled>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d104      	bne.n	8003996 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe ffa9 	bl	80028e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003996:	f7fe fdff 	bl	8002598 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d914      	bls.n	80039ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d00d      	beq.n	80039ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b6:	f043 0210 	orr.w	r2, r3, #16
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c2:	f043 0201 	orr.w	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e007      	b.n	80039de <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d1cf      	bne.n	800397c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	8000003f 	.word	0x8000003f
 80039ec:	50040300 	.word	0x50040300
 80039f0:	20000008 	.word	0x20000008
 80039f4:	053e2d63 	.word	0x053e2d63

080039f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe ffaa 	bl	800295e <LL_ADC_IsDisableOngoing>
 8003a0a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe ff91 	bl	8002938 <LL_ADC_IsEnabled>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d047      	beq.n	8003aac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d144      	bne.n	8003aac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 030d 	and.w	r3, r3, #13
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d10c      	bne.n	8003a4a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fe ff6b 	bl	8002910 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2203      	movs	r2, #3
 8003a40:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a42:	f7fe fda9 	bl	8002598 <HAL_GetTick>
 8003a46:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a48:	e029      	b.n	8003a9e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4e:	f043 0210 	orr.w	r2, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5a:	f043 0201 	orr.w	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e023      	b.n	8003aae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a66:	f7fe fd97 	bl	8002598 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d914      	bls.n	8003a9e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00d      	beq.n	8003a9e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a86:	f043 0210 	orr.w	r2, r3, #16
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a92:	f043 0201 	orr.w	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e007      	b.n	8003aae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1dc      	bne.n	8003a66 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d14b      	bne.n	8003b68 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d021      	beq.n	8003b2e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fe fe0b 	bl	800270a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d032      	beq.n	8003b60 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d12b      	bne.n	8003b60 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d11f      	bne.n	8003b60 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b24:	f043 0201 	orr.w	r2, r3, #1
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	655a      	str	r2, [r3, #84]	@ 0x54
 8003b2c:	e018      	b.n	8003b60 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d111      	bne.n	8003b60 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d105      	bne.n	8003b60 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b58:	f043 0201 	orr.w	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f7fe f8cd 	bl	8001d00 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b66:	e00e      	b.n	8003b86 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f7ff facd 	bl	8003114 <HAL_ADC_ErrorCallback>
}
 8003b7a:	e004      	b.n	8003b86 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	4798      	blx	r3
}
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7ff faa5 	bl	80030ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bbc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc8:	f043 0204 	orr.w	r2, r3, #4
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f7ff fa9f 	bl	8003114 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <LL_ADC_StartCalibration>:
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003bf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	609a      	str	r2, [r3, #8]
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <LL_ADC_IsCalibrationOnGoing>:
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c24:	d101      	bne.n	8003c2a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_ADCEx_Calibration_Start+0x1c>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e04d      	b.n	8003cf0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff fecb 	bl	80039f8 <ADC_Disable>
 8003c62:	4603      	mov	r3, r0
 8003c64:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d136      	bne.n	8003cda <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c70:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c74:	f023 0302 	bic.w	r3, r3, #2
 8003c78:	f043 0202 	orr.w	r2, r3, #2
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6839      	ldr	r1, [r7, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff ffa9 	bl	8003bde <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c8c:	e014      	b.n	8003cb8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	3301      	adds	r3, #1
 8003c92:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003c9a:	d30d      	bcc.n	8003cb8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca0:	f023 0312 	bic.w	r3, r3, #18
 8003ca4:	f043 0210 	orr.w	r2, r3, #16
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e01b      	b.n	8003cf0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff ffa7 	bl	8003c10 <LL_ADC_IsCalibrationOnGoing>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e2      	bne.n	8003c8e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ccc:	f023 0303 	bic.w	r3, r3, #3
 8003cd0:	f043 0201 	orr.w	r2, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	655a      	str	r2, [r3, #84]	@ 0x54
 8003cd8:	e005      	b.n	8003ce6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cde:	f043 0210 	orr.w	r2, r3, #16
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003da0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d78:	4013      	ands	r3, r2
 8003d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d8e:	4a04      	ldr	r2, [pc, #16]	@ (8003da0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	60d3      	str	r3, [r2, #12]
}
 8003d94:	bf00      	nop
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	e000ed00 	.word	0xe000ed00

08003da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003da8:	4b04      	ldr	r3, [pc, #16]	@ (8003dbc <__NVIC_GetPriorityGrouping+0x18>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	0a1b      	lsrs	r3, r3, #8
 8003dae:	f003 0307 	and.w	r3, r3, #7
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	e000ed00 	.word	0xe000ed00

08003dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	db0b      	blt.n	8003dea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dd2:	79fb      	ldrb	r3, [r7, #7]
 8003dd4:	f003 021f 	and.w	r2, r3, #31
 8003dd8:	4907      	ldr	r1, [pc, #28]	@ (8003df8 <__NVIC_EnableIRQ+0x38>)
 8003dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	2001      	movs	r0, #1
 8003de2:	fa00 f202 	lsl.w	r2, r0, r2
 8003de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	e000e100 	.word	0xe000e100

08003dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	6039      	str	r1, [r7, #0]
 8003e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	db0a      	blt.n	8003e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	490c      	ldr	r1, [pc, #48]	@ (8003e48 <__NVIC_SetPriority+0x4c>)
 8003e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1a:	0112      	lsls	r2, r2, #4
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	440b      	add	r3, r1
 8003e20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e24:	e00a      	b.n	8003e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	4908      	ldr	r1, [pc, #32]	@ (8003e4c <__NVIC_SetPriority+0x50>)
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	3b04      	subs	r3, #4
 8003e34:	0112      	lsls	r2, r2, #4
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	440b      	add	r3, r1
 8003e3a:	761a      	strb	r2, [r3, #24]
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	e000e100 	.word	0xe000e100
 8003e4c:	e000ed00 	.word	0xe000ed00

08003e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b089      	sub	sp, #36	@ 0x24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f1c3 0307 	rsb	r3, r3, #7
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	bf28      	it	cs
 8003e6e:	2304      	movcs	r3, #4
 8003e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	3304      	adds	r3, #4
 8003e76:	2b06      	cmp	r3, #6
 8003e78:	d902      	bls.n	8003e80 <NVIC_EncodePriority+0x30>
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	3b03      	subs	r3, #3
 8003e7e:	e000      	b.n	8003e82 <NVIC_EncodePriority+0x32>
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	401a      	ands	r2, r3
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea2:	43d9      	mvns	r1, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea8:	4313      	orrs	r3, r2
         );
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3724      	adds	r7, #36	@ 0x24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ec8:	d301      	bcc.n	8003ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e00f      	b.n	8003eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ece:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef8 <SysTick_Config+0x40>)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ed6:	210f      	movs	r1, #15
 8003ed8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003edc:	f7ff ff8e 	bl	8003dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ee0:	4b05      	ldr	r3, [pc, #20]	@ (8003ef8 <SysTick_Config+0x40>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ee6:	4b04      	ldr	r3, [pc, #16]	@ (8003ef8 <SysTick_Config+0x40>)
 8003ee8:	2207      	movs	r2, #7
 8003eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	e000e010 	.word	0xe000e010

08003efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff ff29 	bl	8003d5c <__NVIC_SetPriorityGrouping>
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b086      	sub	sp, #24
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	4603      	mov	r3, r0
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
 8003f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f24:	f7ff ff3e 	bl	8003da4 <__NVIC_GetPriorityGrouping>
 8003f28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	6978      	ldr	r0, [r7, #20]
 8003f30:	f7ff ff8e 	bl	8003e50 <NVIC_EncodePriority>
 8003f34:	4602      	mov	r2, r0
 8003f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff ff5d 	bl	8003dfc <__NVIC_SetPriority>
}
 8003f42:	bf00      	nop
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	4603      	mov	r3, r0
 8003f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ff31 	bl	8003dc0 <__NVIC_EnableIRQ>
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff ffa2 	bl	8003eb8 <SysTick_Config>
 8003f74:	4603      	mov	r3, r0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e014      	b.n	8003fba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	791b      	ldrb	r3, [r3, #4]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d105      	bne.n	8003fa6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7fd ff7d 	bl	8001ea0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	795b      	ldrb	r3, [r3, #5]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_DAC_Start+0x16>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e03b      	b.n	8004050 <HAL_DAC_Start+0x8e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6819      	ldr	r1, [r3, #0]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10f      	bne.n	8004022 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800400c:	2b04      	cmp	r3, #4
 800400e:	d118      	bne.n	8004042 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	605a      	str	r2, [r3, #4]
 8004020:	e00f      	b.n	8004042 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800402c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004030:	d107      	bne.n	8004042 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0202 	orr.w	r2, r2, #2
 8004040:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800406e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004072:	d120      	bne.n	80040b6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800407a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800407e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004082:	d118      	bne.n	80040b6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2204      	movs	r2, #4
 8004088:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f043 0201 	orr.w	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800409e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040ae:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f852 	bl	800415a <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040c4:	d120      	bne.n	8004108 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040d4:	d118      	bne.n	8004108 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2204      	movs	r2, #4
 80040da:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f043 0202 	orr.w	r2, r3, #2
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80040f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004100:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f95a 	bl	80043bc <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8004108:	bf00      	nop
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d105      	bne.n	800413a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4413      	add	r3, r2
 8004134:	3308      	adds	r3, #8
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	e004      	b.n	8004144 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4413      	add	r3, r2
 8004140:	3314      	adds	r3, #20
 8004142:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	461a      	mov	r2, r3
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b088      	sub	sp, #32
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	795b      	ldrb	r3, [r3, #5]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_DAC_ConfigChannel+0x1c>
 8004186:	2302      	movs	r3, #2
 8004188:	e114      	b.n	80043b4 <HAL_DAC_ConfigChannel+0x246>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2202      	movs	r2, #2
 8004194:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b04      	cmp	r3, #4
 800419c:	f040 8081 	bne.w	80042a2 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80041a0:	f7fe f9fa 	bl	8002598 <HAL_GetTick>
 80041a4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d140      	bne.n	800422e <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80041ac:	e018      	b.n	80041e0 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80041ae:	f7fe f9f3 	bl	8002598 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d911      	bls.n	80041e0 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f043 0208 	orr.w	r2, r3, #8
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2203      	movs	r2, #3
 80041da:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e0e9      	b.n	80043b4 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1df      	bne.n	80041ae <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80041ee:	2001      	movs	r0, #1
 80041f0:	f7fe f9de 	bl	80025b0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	6992      	ldr	r2, [r2, #24]
 80041fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80041fe:	e023      	b.n	8004248 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004200:	f7fe f9ca 	bl	8002598 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	d90f      	bls.n	800422e <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004214:	2b00      	cmp	r3, #0
 8004216:	da0a      	bge.n	800422e <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f043 0208 	orr.w	r2, r3, #8
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2203      	movs	r2, #3
 8004228:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e0c2      	b.n	80043b4 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004234:	2b00      	cmp	r3, #0
 8004236:	dbe3      	blt.n	8004200 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8004238:	2001      	movs	r0, #1
 800423a:	f7fe f9b9 	bl	80025b0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	6992      	ldr	r2, [r2, #24]
 8004246:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f003 0310 	and.w	r3, r3, #16
 8004254:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004258:	fa01 f303 	lsl.w	r3, r1, r3
 800425c:	43db      	mvns	r3, r3
 800425e:	ea02 0103 	and.w	r1, r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	69da      	ldr	r2, [r3, #28]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	409a      	lsls	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	21ff      	movs	r1, #255	@ 0xff
 8004284:	fa01 f303 	lsl.w	r3, r1, r3
 8004288:	43db      	mvns	r3, r3
 800428a:	ea02 0103 	and.w	r1, r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6a1a      	ldr	r2, [r3, #32]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	409a      	lsls	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d11d      	bne.n	80042e6 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b0:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	221f      	movs	r2, #31
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	43db      	mvns	r3, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4013      	ands	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f003 0310 	and.w	r3, r3, #16
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4313      	orrs	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ec:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2207      	movs	r2, #7
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43db      	mvns	r3, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4013      	ands	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	431a      	orrs	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f003 0310 	and.w	r3, r3, #16
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4313      	orrs	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6819      	ldr	r1, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	43da      	mvns	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	400a      	ands	r2, r1
 800434a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f003 0310 	and.w	r3, r3, #16
 800435a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43db      	mvns	r3, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4013      	ands	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4313      	orrs	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6819      	ldr	r1, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	22c0      	movs	r2, #192	@ 0xc0
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43da      	mvns	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	400a      	ands	r2, r1
 80043a4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3720      	adds	r7, #32
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e098      	b.n	8004514 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	4b4d      	ldr	r3, [pc, #308]	@ (8004520 <HAL_DMA_Init+0x150>)
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d80f      	bhi.n	800440e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004524 <HAL_DMA_Init+0x154>)
 80043f6:	4413      	add	r3, r2
 80043f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004528 <HAL_DMA_Init+0x158>)
 80043fa:	fba2 2303 	umull	r2, r3, r2, r3
 80043fe:	091b      	lsrs	r3, r3, #4
 8004400:	009a      	lsls	r2, r3, #2
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a48      	ldr	r2, [pc, #288]	@ (800452c <HAL_DMA_Init+0x15c>)
 800440a:	641a      	str	r2, [r3, #64]	@ 0x40
 800440c:	e00e      	b.n	800442c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	4b46      	ldr	r3, [pc, #280]	@ (8004530 <HAL_DMA_Init+0x160>)
 8004416:	4413      	add	r3, r2
 8004418:	4a43      	ldr	r2, [pc, #268]	@ (8004528 <HAL_DMA_Init+0x158>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	091b      	lsrs	r3, r3, #4
 8004420:	009a      	lsls	r2, r3, #2
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a42      	ldr	r2, [pc, #264]	@ (8004534 <HAL_DMA_Init+0x164>)
 800442a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004446:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800445c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004486:	d039      	beq.n	80044fc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	4a27      	ldr	r2, [pc, #156]	@ (800452c <HAL_DMA_Init+0x15c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d11a      	bne.n	80044c8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004492:	4b29      	ldr	r3, [pc, #164]	@ (8004538 <HAL_DMA_Init+0x168>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449a:	f003 031c 	and.w	r3, r3, #28
 800449e:	210f      	movs	r1, #15
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	43db      	mvns	r3, r3
 80044a6:	4924      	ldr	r1, [pc, #144]	@ (8004538 <HAL_DMA_Init+0x168>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80044ac:	4b22      	ldr	r3, [pc, #136]	@ (8004538 <HAL_DMA_Init+0x168>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6859      	ldr	r1, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b8:	f003 031c 	and.w	r3, r3, #28
 80044bc:	fa01 f303 	lsl.w	r3, r1, r3
 80044c0:	491d      	ldr	r1, [pc, #116]	@ (8004538 <HAL_DMA_Init+0x168>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]
 80044c6:	e019      	b.n	80044fc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80044c8:	4b1c      	ldr	r3, [pc, #112]	@ (800453c <HAL_DMA_Init+0x16c>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d0:	f003 031c 	and.w	r3, r3, #28
 80044d4:	210f      	movs	r1, #15
 80044d6:	fa01 f303 	lsl.w	r3, r1, r3
 80044da:	43db      	mvns	r3, r3
 80044dc:	4917      	ldr	r1, [pc, #92]	@ (800453c <HAL_DMA_Init+0x16c>)
 80044de:	4013      	ands	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80044e2:	4b16      	ldr	r3, [pc, #88]	@ (800453c <HAL_DMA_Init+0x16c>)
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6859      	ldr	r1, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ee:	f003 031c 	and.w	r3, r3, #28
 80044f2:	fa01 f303 	lsl.w	r3, r1, r3
 80044f6:	4911      	ldr	r1, [pc, #68]	@ (800453c <HAL_DMA_Init+0x16c>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	40020407 	.word	0x40020407
 8004524:	bffdfff8 	.word	0xbffdfff8
 8004528:	cccccccd 	.word	0xcccccccd
 800452c:	40020000 	.word	0x40020000
 8004530:	bffdfbf8 	.word	0xbffdfbf8
 8004534:	40020400 	.word	0x40020400
 8004538:	400200a8 	.word	0x400200a8
 800453c:	400204a8 	.word	0x400204a8

08004540 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_DMA_Start_IT+0x20>
 800455c:	2302      	movs	r3, #2
 800455e:	e04b      	b.n	80045f8 <HAL_DMA_Start_IT+0xb8>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b01      	cmp	r3, #1
 8004572:	d13a      	bne.n	80045ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0201 	bic.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f8e0 	bl	800475e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 020e 	orr.w	r2, r2, #14
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	e00f      	b.n	80045d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0204 	bic.w	r2, r2, #4
 80045c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 020a 	orr.w	r2, r2, #10
 80045d6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	e005      	b.n	80045f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80045f2:	2302      	movs	r3, #2
 80045f4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461c:	f003 031c 	and.w	r3, r3, #28
 8004620:	2204      	movs	r2, #4
 8004622:	409a      	lsls	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4013      	ands	r3, r2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d026      	beq.n	800467a <HAL_DMA_IRQHandler+0x7a>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b00      	cmp	r3, #0
 8004634:	d021      	beq.n	800467a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0320 	and.w	r3, r3, #32
 8004640:	2b00      	cmp	r3, #0
 8004642:	d107      	bne.n	8004654 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0204 	bic.w	r2, r2, #4
 8004652:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004658:	f003 021c 	and.w	r2, r3, #28
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	2104      	movs	r1, #4
 8004662:	fa01 f202 	lsl.w	r2, r1, r2
 8004666:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466c:	2b00      	cmp	r3, #0
 800466e:	d071      	beq.n	8004754 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004678:	e06c      	b.n	8004754 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467e:	f003 031c 	and.w	r3, r3, #28
 8004682:	2202      	movs	r2, #2
 8004684:	409a      	lsls	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4013      	ands	r3, r2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d02e      	beq.n	80046ec <HAL_DMA_IRQHandler+0xec>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d029      	beq.n	80046ec <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10b      	bne.n	80046be <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 020a 	bic.w	r2, r2, #10
 80046b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c2:	f003 021c 	and.w	r2, r3, #28
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	2102      	movs	r1, #2
 80046cc:	fa01 f202 	lsl.w	r2, r1, r2
 80046d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d038      	beq.n	8004754 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80046ea:	e033      	b.n	8004754 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f0:	f003 031c 	and.w	r3, r3, #28
 80046f4:	2208      	movs	r2, #8
 80046f6:	409a      	lsls	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d02a      	beq.n	8004756 <HAL_DMA_IRQHandler+0x156>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d025      	beq.n	8004756 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 020e 	bic.w	r2, r2, #14
 8004718:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471e:	f003 021c 	and.w	r2, r3, #28
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	2101      	movs	r1, #1
 8004728:	fa01 f202 	lsl.w	r2, r1, r2
 800472c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004748:	2b00      	cmp	r3, #0
 800474a:	d004      	beq.n	8004756 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004754:	bf00      	nop
 8004756:	bf00      	nop
}
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800475e:	b480      	push	{r7}
 8004760:	b085      	sub	sp, #20
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	607a      	str	r2, [r7, #4]
 800476a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004770:	f003 021c 	and.w	r2, r3, #28
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004778:	2101      	movs	r1, #1
 800477a:	fa01 f202 	lsl.w	r2, r1, r2
 800477e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b10      	cmp	r3, #16
 800478e:	d108      	bne.n	80047a2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80047a0:	e007      	b.n	80047b2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	60da      	str	r2, [r3, #12]
}
 80047b2:	bf00      	nop
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
	...

080047c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047ce:	e148      	b.n	8004a62 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	2101      	movs	r1, #1
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	fa01 f303 	lsl.w	r3, r1, r3
 80047dc:	4013      	ands	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 813a 	beq.w	8004a5c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d005      	beq.n	8004800 <HAL_GPIO_Init+0x40>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d130      	bne.n	8004862 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	2203      	movs	r2, #3
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4013      	ands	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004836:	2201      	movs	r2, #1
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43db      	mvns	r3, r3
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4013      	ands	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	f003 0201 	and.w	r2, r3, #1
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b03      	cmp	r3, #3
 800486c:	d017      	beq.n	800489e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	2203      	movs	r2, #3
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4013      	ands	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d123      	bne.n	80048f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	08da      	lsrs	r2, r3, #3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3208      	adds	r2, #8
 80048b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	220f      	movs	r2, #15
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	43db      	mvns	r3, r3
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4013      	ands	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	08da      	lsrs	r2, r3, #3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3208      	adds	r2, #8
 80048ec:	6939      	ldr	r1, [r7, #16]
 80048ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	2203      	movs	r2, #3
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4013      	ands	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f003 0203 	and.w	r2, r3, #3
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 8094 	beq.w	8004a5c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004934:	4b52      	ldr	r3, [pc, #328]	@ (8004a80 <HAL_GPIO_Init+0x2c0>)
 8004936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004938:	4a51      	ldr	r2, [pc, #324]	@ (8004a80 <HAL_GPIO_Init+0x2c0>)
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004940:	4b4f      	ldr	r3, [pc, #316]	@ (8004a80 <HAL_GPIO_Init+0x2c0>)
 8004942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800494c:	4a4d      	ldr	r2, [pc, #308]	@ (8004a84 <HAL_GPIO_Init+0x2c4>)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	089b      	lsrs	r3, r3, #2
 8004952:	3302      	adds	r3, #2
 8004954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	220f      	movs	r2, #15
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	43db      	mvns	r3, r3
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4013      	ands	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004976:	d00d      	beq.n	8004994 <HAL_GPIO_Init+0x1d4>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a43      	ldr	r2, [pc, #268]	@ (8004a88 <HAL_GPIO_Init+0x2c8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d007      	beq.n	8004990 <HAL_GPIO_Init+0x1d0>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a42      	ldr	r2, [pc, #264]	@ (8004a8c <HAL_GPIO_Init+0x2cc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d101      	bne.n	800498c <HAL_GPIO_Init+0x1cc>
 8004988:	2302      	movs	r3, #2
 800498a:	e004      	b.n	8004996 <HAL_GPIO_Init+0x1d6>
 800498c:	2307      	movs	r3, #7
 800498e:	e002      	b.n	8004996 <HAL_GPIO_Init+0x1d6>
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <HAL_GPIO_Init+0x1d6>
 8004994:	2300      	movs	r3, #0
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	f002 0203 	and.w	r2, r2, #3
 800499c:	0092      	lsls	r2, r2, #2
 800499e:	4093      	lsls	r3, r2
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049a6:	4937      	ldr	r1, [pc, #220]	@ (8004a84 <HAL_GPIO_Init+0x2c4>)
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	089b      	lsrs	r3, r3, #2
 80049ac:	3302      	adds	r3, #2
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049b4:	4b36      	ldr	r3, [pc, #216]	@ (8004a90 <HAL_GPIO_Init+0x2d0>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	43db      	mvns	r3, r3
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4013      	ands	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049d8:	4a2d      	ldr	r2, [pc, #180]	@ (8004a90 <HAL_GPIO_Init+0x2d0>)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049de:	4b2c      	ldr	r3, [pc, #176]	@ (8004a90 <HAL_GPIO_Init+0x2d0>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	43db      	mvns	r3, r3
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4013      	ands	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a02:	4a23      	ldr	r2, [pc, #140]	@ (8004a90 <HAL_GPIO_Init+0x2d0>)
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a08:	4b21      	ldr	r3, [pc, #132]	@ (8004a90 <HAL_GPIO_Init+0x2d0>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	43db      	mvns	r3, r3
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4013      	ands	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a2c:	4a18      	ldr	r2, [pc, #96]	@ (8004a90 <HAL_GPIO_Init+0x2d0>)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004a32:	4b17      	ldr	r3, [pc, #92]	@ (8004a90 <HAL_GPIO_Init+0x2d0>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a56:	4a0e      	ldr	r2, [pc, #56]	@ (8004a90 <HAL_GPIO_Init+0x2d0>)
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f47f aeaf 	bne.w	80047d0 <HAL_GPIO_Init+0x10>
  }
}
 8004a72:	bf00      	nop
 8004a74:	bf00      	nop
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	40021000 	.word	0x40021000
 8004a84:	40010000 	.word	0x40010000
 8004a88:	48000400 	.word	0x48000400
 8004a8c:	48000800 	.word	0x48000800
 8004a90:	40010400 	.word	0x40010400

08004a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	807b      	strh	r3, [r7, #2]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004aa4:	787b      	ldrb	r3, [r7, #1]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004aaa:	887a      	ldrh	r2, [r7, #2]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ab0:	e002      	b.n	8004ab8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ab2:	887a      	ldrh	r2, [r7, #2]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ace:	4b08      	ldr	r3, [pc, #32]	@ (8004af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ad0:	695a      	ldr	r2, [r3, #20]
 8004ad2:	88fb      	ldrh	r3, [r7, #6]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d006      	beq.n	8004ae8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ada:	4a05      	ldr	r2, [pc, #20]	@ (8004af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004adc:	88fb      	ldrh	r3, [r7, #6]
 8004ade:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ae0:	88fb      	ldrh	r3, [r7, #6]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fd f8e4 	bl	8001cb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40010400 	.word	0x40010400

08004af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e08d      	b.n	8004c22 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d106      	bne.n	8004b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fd fa06 	bl	8001f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2224      	movs	r2, #36	@ 0x24
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0201 	bic.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d107      	bne.n	8004b6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b6a:	609a      	str	r2, [r3, #8]
 8004b6c:	e006      	b.n	8004b7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004b7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d108      	bne.n	8004b96 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b92:	605a      	str	r2, [r3, #4]
 8004b94:	e007      	b.n	8004ba6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ba4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004bb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69d9      	ldr	r1, [r3, #28]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a1a      	ldr	r2, [r3, #32]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0201 	orr.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	607a      	str	r2, [r7, #4]
 8004c36:	461a      	mov	r2, r3
 8004c38:	460b      	mov	r3, r1
 8004c3a:	817b      	strh	r3, [r7, #10]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	f040 80fd 	bne.w	8004e48 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_I2C_Master_Transmit+0x30>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e0f6      	b.n	8004e4a <HAL_I2C_Master_Transmit+0x21e>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c64:	f7fd fc98 	bl	8002598 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	2319      	movs	r3, #25
 8004c70:	2201      	movs	r2, #1
 8004c72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f914 	bl	8004ea4 <I2C_WaitOnFlagUntilTimeout>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e0e1      	b.n	8004e4a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2221      	movs	r2, #33	@ 0x21
 8004c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2210      	movs	r2, #16
 8004c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	893a      	ldrh	r2, [r7, #8]
 8004ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2bff      	cmp	r3, #255	@ 0xff
 8004cb6:	d906      	bls.n	8004cc6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	22ff      	movs	r2, #255	@ 0xff
 8004cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004cbe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	e007      	b.n	8004cd6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004cd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cd4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d024      	beq.n	8004d28 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce2:	781a      	ldrb	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	3301      	adds	r3, #1
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	8979      	ldrh	r1, [r7, #10]
 8004d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8004e54 <HAL_I2C_Master_Transmit+0x228>)
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 fa83 	bl	800522c <I2C_TransferConfig>
 8004d26:	e066      	b.n	8004df6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	8979      	ldrh	r1, [r7, #10]
 8004d30:	4b48      	ldr	r3, [pc, #288]	@ (8004e54 <HAL_I2C_Master_Transmit+0x228>)
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fa78 	bl	800522c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004d3c:	e05b      	b.n	8004df6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	6a39      	ldr	r1, [r7, #32]
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 f907 	bl	8004f56 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e07b      	b.n	8004e4a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d56:	781a      	ldrb	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d034      	beq.n	8004df6 <HAL_I2C_Master_Transmit+0x1ca>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d130      	bne.n	8004df6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2180      	movs	r1, #128	@ 0x80
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f880 	bl	8004ea4 <I2C_WaitOnFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e04d      	b.n	8004e4a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2bff      	cmp	r3, #255	@ 0xff
 8004db6:	d90e      	bls.n	8004dd6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	22ff      	movs	r2, #255	@ 0xff
 8004dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	8979      	ldrh	r1, [r7, #10]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 fa2c 	bl	800522c <I2C_TransferConfig>
 8004dd4:	e00f      	b.n	8004df6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	8979      	ldrh	r1, [r7, #10]
 8004de8:	2300      	movs	r3, #0
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fa1b 	bl	800522c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d19e      	bne.n	8004d3e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	6a39      	ldr	r1, [r7, #32]
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f8ed 	bl	8004fe4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e01a      	b.n	8004e4a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6859      	ldr	r1, [r3, #4]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4b0c      	ldr	r3, [pc, #48]	@ (8004e58 <HAL_I2C_Master_Transmit+0x22c>)
 8004e28:	400b      	ands	r3, r1
 8004e2a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	e000      	b.n	8004e4a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004e48:	2302      	movs	r3, #2
  }
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	80002000 	.word	0x80002000
 8004e58:	fe00e800 	.word	0xfe00e800

08004e5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d103      	bne.n	8004e7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2200      	movs	r2, #0
 8004e78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d007      	beq.n	8004e98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0201 	orr.w	r2, r2, #1
 8004e96:	619a      	str	r2, [r3, #24]
  }
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eb4:	e03b      	b.n	8004f2e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	6839      	ldr	r1, [r7, #0]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f8d6 	bl	800506c <I2C_IsErrorOccurred>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e041      	b.n	8004f4e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ed0:	d02d      	beq.n	8004f2e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed2:	f7fd fb61 	bl	8002598 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d302      	bcc.n	8004ee8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d122      	bne.n	8004f2e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d113      	bne.n	8004f2e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0a:	f043 0220 	orr.w	r2, r3, #32
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e00f      	b.n	8004f4e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699a      	ldr	r2, [r3, #24]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4013      	ands	r3, r2
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	bf0c      	ite	eq
 8004f3e:	2301      	moveq	r3, #1
 8004f40:	2300      	movne	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	461a      	mov	r2, r3
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d0b4      	beq.n	8004eb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f62:	e033      	b.n	8004fcc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f87f 	bl	800506c <I2C_IsErrorOccurred>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e031      	b.n	8004fdc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f7e:	d025      	beq.n	8004fcc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f80:	f7fd fb0a 	bl	8002598 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d302      	bcc.n	8004f96 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d11a      	bne.n	8004fcc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d013      	beq.n	8004fcc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa8:	f043 0220 	orr.w	r2, r3, #32
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e007      	b.n	8004fdc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d1c4      	bne.n	8004f64 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ff0:	e02f      	b.n	8005052 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	68b9      	ldr	r1, [r7, #8]
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 f838 	bl	800506c <I2C_IsErrorOccurred>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e02d      	b.n	8005062 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005006:	f7fd fac7 	bl	8002598 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	429a      	cmp	r2, r3
 8005014:	d302      	bcc.n	800501c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d11a      	bne.n	8005052 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b20      	cmp	r3, #32
 8005028:	d013      	beq.n	8005052 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502e:	f043 0220 	orr.w	r2, r3, #32
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2220      	movs	r2, #32
 800503a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e007      	b.n	8005062 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b20      	cmp	r3, #32
 800505e:	d1c8      	bne.n	8004ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08a      	sub	sp, #40	@ 0x28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b00      	cmp	r3, #0
 8005096:	d068      	beq.n	800516a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2210      	movs	r2, #16
 800509e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050a0:	e049      	b.n	8005136 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050a8:	d045      	beq.n	8005136 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80050aa:	f7fd fa75 	bl	8002598 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d302      	bcc.n	80050c0 <I2C_IsErrorOccurred+0x54>
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d13a      	bne.n	8005136 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050e2:	d121      	bne.n	8005128 <I2C_IsErrorOccurred+0xbc>
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050ea:	d01d      	beq.n	8005128 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80050ec:	7cfb      	ldrb	r3, [r7, #19]
 80050ee:	2b20      	cmp	r3, #32
 80050f0:	d01a      	beq.n	8005128 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005100:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005102:	f7fd fa49 	bl	8002598 <HAL_GetTick>
 8005106:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005108:	e00e      	b.n	8005128 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800510a:	f7fd fa45 	bl	8002598 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b19      	cmp	r3, #25
 8005116:	d907      	bls.n	8005128 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	f043 0320 	orr.w	r3, r3, #32
 800511e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005126:	e006      	b.n	8005136 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b20      	cmp	r3, #32
 8005134:	d1e9      	bne.n	800510a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b20      	cmp	r3, #32
 8005142:	d003      	beq.n	800514c <I2C_IsErrorOccurred+0xe0>
 8005144:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0aa      	beq.n	80050a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800514c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005150:	2b00      	cmp	r3, #0
 8005152:	d103      	bne.n	800515c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2220      	movs	r2, #32
 800515a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	f043 0304 	orr.w	r3, r3, #4
 8005162:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00b      	beq.n	8005194 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	f043 0301 	orr.w	r3, r3, #1
 8005182:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800518c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00b      	beq.n	80051b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	f043 0308 	orr.w	r3, r3, #8
 80051a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80051ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00b      	beq.n	80051d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	f043 0302 	orr.w	r3, r3, #2
 80051c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80051d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01c      	beq.n	800521a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f7ff fe3b 	bl	8004e5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6859      	ldr	r1, [r3, #4]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005228 <I2C_IsErrorOccurred+0x1bc>)
 80051f2:	400b      	ands	r3, r1
 80051f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	431a      	orrs	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2220      	movs	r2, #32
 8005206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800521a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800521e:	4618      	mov	r0, r3
 8005220:	3728      	adds	r7, #40	@ 0x28
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	fe00e800 	.word	0xfe00e800

0800522c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	607b      	str	r3, [r7, #4]
 8005236:	460b      	mov	r3, r1
 8005238:	817b      	strh	r3, [r7, #10]
 800523a:	4613      	mov	r3, r2
 800523c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800523e:	897b      	ldrh	r3, [r7, #10]
 8005240:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005244:	7a7b      	ldrb	r3, [r7, #9]
 8005246:	041b      	lsls	r3, r3, #16
 8005248:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800524c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	4313      	orrs	r3, r2
 8005256:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800525a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	0d5b      	lsrs	r3, r3, #21
 8005266:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800526a:	4b08      	ldr	r3, [pc, #32]	@ (800528c <I2C_TransferConfig+0x60>)
 800526c:	430b      	orrs	r3, r1
 800526e:	43db      	mvns	r3, r3
 8005270:	ea02 0103 	and.w	r1, r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800527e:	bf00      	nop
 8005280:	371c      	adds	r7, #28
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	03ff63ff 	.word	0x03ff63ff

08005290 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	d138      	bne.n	8005318 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e032      	b.n	800531a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2224      	movs	r2, #36	@ 0x24
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0201 	bic.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80052e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6819      	ldr	r1, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	e000      	b.n	800531a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005318:	2302      	movs	r3, #2
  }
}
 800531a:	4618      	mov	r0, r3
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005326:	b480      	push	{r7}
 8005328:	b085      	sub	sp, #20
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b20      	cmp	r3, #32
 800533a:	d139      	bne.n	80053b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005346:	2302      	movs	r3, #2
 8005348:	e033      	b.n	80053b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2224      	movs	r2, #36	@ 0x24
 8005356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005378:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	021b      	lsls	r3, r3, #8
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4313      	orrs	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	e000      	b.n	80053b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053b0:	2302      	movs	r3, #2
  }
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80053c4:	4b04      	ldr	r3, [pc, #16]	@ (80053d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40007000 	.word	0x40007000

080053dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ea:	d130      	bne.n	800544e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80053ec:	4b23      	ldr	r3, [pc, #140]	@ (800547c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80053f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053f8:	d038      	beq.n	800546c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053fa:	4b20      	ldr	r3, [pc, #128]	@ (800547c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005402:	4a1e      	ldr	r2, [pc, #120]	@ (800547c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005404:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005408:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800540a:	4b1d      	ldr	r3, [pc, #116]	@ (8005480 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2232      	movs	r2, #50	@ 0x32
 8005410:	fb02 f303 	mul.w	r3, r2, r3
 8005414:	4a1b      	ldr	r2, [pc, #108]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005416:	fba2 2303 	umull	r2, r3, r2, r3
 800541a:	0c9b      	lsrs	r3, r3, #18
 800541c:	3301      	adds	r3, #1
 800541e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005420:	e002      	b.n	8005428 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3b01      	subs	r3, #1
 8005426:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005428:	4b14      	ldr	r3, [pc, #80]	@ (800547c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005434:	d102      	bne.n	800543c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1f2      	bne.n	8005422 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800543c:	4b0f      	ldr	r3, [pc, #60]	@ (800547c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005448:	d110      	bne.n	800546c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e00f      	b.n	800546e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800544e:	4b0b      	ldr	r3, [pc, #44]	@ (800547c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800545a:	d007      	beq.n	800546c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800545c:	4b07      	ldr	r3, [pc, #28]	@ (800547c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005464:	4a05      	ldr	r2, [pc, #20]	@ (800547c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005466:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800546a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40007000 	.word	0x40007000
 8005480:	20000008 	.word	0x20000008
 8005484:	431bde83 	.word	0x431bde83

08005488 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d102      	bne.n	800549c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	f000 bc02 	b.w	8005ca0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800549c:	4b96      	ldr	r3, [pc, #600]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 030c 	and.w	r3, r3, #12
 80054a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054a6:	4b94      	ldr	r3, [pc, #592]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0310 	and.w	r3, r3, #16
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 80e4 	beq.w	8005686 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <HAL_RCC_OscConfig+0x4c>
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	2b0c      	cmp	r3, #12
 80054c8:	f040 808b 	bne.w	80055e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	f040 8087 	bne.w	80055e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054d4:	4b88      	ldr	r3, [pc, #544]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <HAL_RCC_OscConfig+0x64>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e3d9      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1a      	ldr	r2, [r3, #32]
 80054f0:	4b81      	ldr	r3, [pc, #516]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d004      	beq.n	8005506 <HAL_RCC_OscConfig+0x7e>
 80054fc:	4b7e      	ldr	r3, [pc, #504]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005504:	e005      	b.n	8005512 <HAL_RCC_OscConfig+0x8a>
 8005506:	4b7c      	ldr	r3, [pc, #496]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 8005508:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800550c:	091b      	lsrs	r3, r3, #4
 800550e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005512:	4293      	cmp	r3, r2
 8005514:	d223      	bcs.n	800555e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fd8c 	bl	8006038 <RCC_SetFlashLatencyFromMSIRange>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e3ba      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800552a:	4b73      	ldr	r3, [pc, #460]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a72      	ldr	r2, [pc, #456]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 8005530:	f043 0308 	orr.w	r3, r3, #8
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	4b70      	ldr	r3, [pc, #448]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	496d      	ldr	r1, [pc, #436]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 8005544:	4313      	orrs	r3, r2
 8005546:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005548:	4b6b      	ldr	r3, [pc, #428]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	4968      	ldr	r1, [pc, #416]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 8005558:	4313      	orrs	r3, r2
 800555a:	604b      	str	r3, [r1, #4]
 800555c:	e025      	b.n	80055aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800555e:	4b66      	ldr	r3, [pc, #408]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a65      	ldr	r2, [pc, #404]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 8005564:	f043 0308 	orr.w	r3, r3, #8
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	4b63      	ldr	r3, [pc, #396]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	4960      	ldr	r1, [pc, #384]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 8005578:	4313      	orrs	r3, r2
 800557a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800557c:	4b5e      	ldr	r3, [pc, #376]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	021b      	lsls	r3, r3, #8
 800558a:	495b      	ldr	r1, [pc, #364]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 800558c:	4313      	orrs	r3, r2
 800558e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d109      	bne.n	80055aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fd4c 	bl	8006038 <RCC_SetFlashLatencyFromMSIRange>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e37a      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055aa:	f000 fc81 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 80055ae:	4602      	mov	r2, r0
 80055b0:	4b51      	ldr	r3, [pc, #324]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	091b      	lsrs	r3, r3, #4
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	4950      	ldr	r1, [pc, #320]	@ (80056fc <HAL_RCC_OscConfig+0x274>)
 80055bc:	5ccb      	ldrb	r3, [r1, r3]
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	fa22 f303 	lsr.w	r3, r2, r3
 80055c6:	4a4e      	ldr	r2, [pc, #312]	@ (8005700 <HAL_RCC_OscConfig+0x278>)
 80055c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80055ca:	4b4e      	ldr	r3, [pc, #312]	@ (8005704 <HAL_RCC_OscConfig+0x27c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fc ff92 	bl	80024f8 <HAL_InitTick>
 80055d4:	4603      	mov	r3, r0
 80055d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d052      	beq.n	8005684 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80055de:	7bfb      	ldrb	r3, [r7, #15]
 80055e0:	e35e      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d032      	beq.n	8005650 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80055ea:	4b43      	ldr	r3, [pc, #268]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a42      	ldr	r2, [pc, #264]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 80055f0:	f043 0301 	orr.w	r3, r3, #1
 80055f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055f6:	f7fc ffcf 	bl	8002598 <HAL_GetTick>
 80055fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055fe:	f7fc ffcb 	bl	8002598 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e347      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005610:	4b39      	ldr	r3, [pc, #228]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f0      	beq.n	80055fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800561c:	4b36      	ldr	r3, [pc, #216]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a35      	ldr	r2, [pc, #212]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 8005622:	f043 0308 	orr.w	r3, r3, #8
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	4b33      	ldr	r3, [pc, #204]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	4930      	ldr	r1, [pc, #192]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 8005636:	4313      	orrs	r3, r2
 8005638:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800563a:	4b2f      	ldr	r3, [pc, #188]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	492b      	ldr	r1, [pc, #172]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 800564a:	4313      	orrs	r3, r2
 800564c:	604b      	str	r3, [r1, #4]
 800564e:	e01a      	b.n	8005686 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005650:	4b29      	ldr	r3, [pc, #164]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a28      	ldr	r2, [pc, #160]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 8005656:	f023 0301 	bic.w	r3, r3, #1
 800565a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800565c:	f7fc ff9c 	bl	8002598 <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005664:	f7fc ff98 	bl	8002598 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e314      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005676:	4b20      	ldr	r3, [pc, #128]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1f0      	bne.n	8005664 <HAL_RCC_OscConfig+0x1dc>
 8005682:	e000      	b.n	8005686 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005684:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d073      	beq.n	800577a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2b08      	cmp	r3, #8
 8005696:	d005      	beq.n	80056a4 <HAL_RCC_OscConfig+0x21c>
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b0c      	cmp	r3, #12
 800569c:	d10e      	bne.n	80056bc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d10b      	bne.n	80056bc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a4:	4b14      	ldr	r3, [pc, #80]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d063      	beq.n	8005778 <HAL_RCC_OscConfig+0x2f0>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d15f      	bne.n	8005778 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e2f1      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056c4:	d106      	bne.n	80056d4 <HAL_RCC_OscConfig+0x24c>
 80056c6:	4b0c      	ldr	r3, [pc, #48]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a0b      	ldr	r2, [pc, #44]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 80056cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e025      	b.n	8005720 <HAL_RCC_OscConfig+0x298>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056dc:	d114      	bne.n	8005708 <HAL_RCC_OscConfig+0x280>
 80056de:	4b06      	ldr	r3, [pc, #24]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a05      	ldr	r2, [pc, #20]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 80056e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	4b03      	ldr	r3, [pc, #12]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a02      	ldr	r2, [pc, #8]	@ (80056f8 <HAL_RCC_OscConfig+0x270>)
 80056f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	e013      	b.n	8005720 <HAL_RCC_OscConfig+0x298>
 80056f8:	40021000 	.word	0x40021000
 80056fc:	0800a568 	.word	0x0800a568
 8005700:	20000008 	.word	0x20000008
 8005704:	2000000c 	.word	0x2000000c
 8005708:	4ba0      	ldr	r3, [pc, #640]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a9f      	ldr	r2, [pc, #636]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 800570e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	4b9d      	ldr	r3, [pc, #628]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a9c      	ldr	r2, [pc, #624]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 800571a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800571e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d013      	beq.n	8005750 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005728:	f7fc ff36 	bl	8002598 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005730:	f7fc ff32 	bl	8002598 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b64      	cmp	r3, #100	@ 0x64
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e2ae      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005742:	4b92      	ldr	r3, [pc, #584]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f0      	beq.n	8005730 <HAL_RCC_OscConfig+0x2a8>
 800574e:	e014      	b.n	800577a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005750:	f7fc ff22 	bl	8002598 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005758:	f7fc ff1e 	bl	8002598 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b64      	cmp	r3, #100	@ 0x64
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e29a      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800576a:	4b88      	ldr	r3, [pc, #544]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f0      	bne.n	8005758 <HAL_RCC_OscConfig+0x2d0>
 8005776:	e000      	b.n	800577a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d060      	beq.n	8005848 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	2b04      	cmp	r3, #4
 800578a:	d005      	beq.n	8005798 <HAL_RCC_OscConfig+0x310>
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	2b0c      	cmp	r3, #12
 8005790:	d119      	bne.n	80057c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d116      	bne.n	80057c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005798:	4b7c      	ldr	r3, [pc, #496]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d005      	beq.n	80057b0 <HAL_RCC_OscConfig+0x328>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e277      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b0:	4b76      	ldr	r3, [pc, #472]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	061b      	lsls	r3, r3, #24
 80057be:	4973      	ldr	r1, [pc, #460]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057c4:	e040      	b.n	8005848 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d023      	beq.n	8005816 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057ce:	4b6f      	ldr	r3, [pc, #444]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a6e      	ldr	r2, [pc, #440]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 80057d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057da:	f7fc fedd 	bl	8002598 <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057e2:	f7fc fed9 	bl	8002598 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e255      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057f4:	4b65      	ldr	r3, [pc, #404]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f0      	beq.n	80057e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005800:	4b62      	ldr	r3, [pc, #392]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	061b      	lsls	r3, r3, #24
 800580e:	495f      	ldr	r1, [pc, #380]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 8005810:	4313      	orrs	r3, r2
 8005812:	604b      	str	r3, [r1, #4]
 8005814:	e018      	b.n	8005848 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005816:	4b5d      	ldr	r3, [pc, #372]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a5c      	ldr	r2, [pc, #368]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 800581c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005822:	f7fc feb9 	bl	8002598 <HAL_GetTick>
 8005826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005828:	e008      	b.n	800583c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800582a:	f7fc feb5 	bl	8002598 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e231      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800583c:	4b53      	ldr	r3, [pc, #332]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f0      	bne.n	800582a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b00      	cmp	r3, #0
 8005852:	d03c      	beq.n	80058ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01c      	beq.n	8005896 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800585c:	4b4b      	ldr	r3, [pc, #300]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 800585e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005862:	4a4a      	ldr	r2, [pc, #296]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 8005864:	f043 0301 	orr.w	r3, r3, #1
 8005868:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586c:	f7fc fe94 	bl	8002598 <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005874:	f7fc fe90 	bl	8002598 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e20c      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005886:	4b41      	ldr	r3, [pc, #260]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 8005888:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0ef      	beq.n	8005874 <HAL_RCC_OscConfig+0x3ec>
 8005894:	e01b      	b.n	80058ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005896:	4b3d      	ldr	r3, [pc, #244]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 8005898:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800589c:	4a3b      	ldr	r2, [pc, #236]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 800589e:	f023 0301 	bic.w	r3, r3, #1
 80058a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a6:	f7fc fe77 	bl	8002598 <HAL_GetTick>
 80058aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058ac:	e008      	b.n	80058c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058ae:	f7fc fe73 	bl	8002598 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e1ef      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058c0:	4b32      	ldr	r3, [pc, #200]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 80058c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1ef      	bne.n	80058ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 80a6 	beq.w	8005a28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058dc:	2300      	movs	r3, #0
 80058de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80058e0:	4b2a      	ldr	r3, [pc, #168]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 80058e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10d      	bne.n	8005908 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ec:	4b27      	ldr	r3, [pc, #156]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 80058ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f0:	4a26      	ldr	r2, [pc, #152]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 80058f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80058f8:	4b24      	ldr	r3, [pc, #144]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 80058fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005900:	60bb      	str	r3, [r7, #8]
 8005902:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005904:	2301      	movs	r3, #1
 8005906:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005908:	4b21      	ldr	r3, [pc, #132]	@ (8005990 <HAL_RCC_OscConfig+0x508>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d118      	bne.n	8005946 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005914:	4b1e      	ldr	r3, [pc, #120]	@ (8005990 <HAL_RCC_OscConfig+0x508>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a1d      	ldr	r2, [pc, #116]	@ (8005990 <HAL_RCC_OscConfig+0x508>)
 800591a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800591e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005920:	f7fc fe3a 	bl	8002598 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005928:	f7fc fe36 	bl	8002598 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e1b2      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800593a:	4b15      	ldr	r3, [pc, #84]	@ (8005990 <HAL_RCC_OscConfig+0x508>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0f0      	beq.n	8005928 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d108      	bne.n	8005960 <HAL_RCC_OscConfig+0x4d8>
 800594e:	4b0f      	ldr	r3, [pc, #60]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 8005950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005954:	4a0d      	ldr	r2, [pc, #52]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 8005956:	f043 0301 	orr.w	r3, r3, #1
 800595a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800595e:	e029      	b.n	80059b4 <HAL_RCC_OscConfig+0x52c>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b05      	cmp	r3, #5
 8005966:	d115      	bne.n	8005994 <HAL_RCC_OscConfig+0x50c>
 8005968:	4b08      	ldr	r3, [pc, #32]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 800596a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800596e:	4a07      	ldr	r2, [pc, #28]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 8005970:	f043 0304 	orr.w	r3, r3, #4
 8005974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005978:	4b04      	ldr	r3, [pc, #16]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 800597a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800597e:	4a03      	ldr	r2, [pc, #12]	@ (800598c <HAL_RCC_OscConfig+0x504>)
 8005980:	f043 0301 	orr.w	r3, r3, #1
 8005984:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005988:	e014      	b.n	80059b4 <HAL_RCC_OscConfig+0x52c>
 800598a:	bf00      	nop
 800598c:	40021000 	.word	0x40021000
 8005990:	40007000 	.word	0x40007000
 8005994:	4b9a      	ldr	r3, [pc, #616]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800599a:	4a99      	ldr	r2, [pc, #612]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 800599c:	f023 0301 	bic.w	r3, r3, #1
 80059a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059a4:	4b96      	ldr	r3, [pc, #600]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 80059a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059aa:	4a95      	ldr	r2, [pc, #596]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 80059ac:	f023 0304 	bic.w	r3, r3, #4
 80059b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d016      	beq.n	80059ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059bc:	f7fc fdec 	bl	8002598 <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059c2:	e00a      	b.n	80059da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059c4:	f7fc fde8 	bl	8002598 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e162      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059da:	4b89      	ldr	r3, [pc, #548]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 80059dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0ed      	beq.n	80059c4 <HAL_RCC_OscConfig+0x53c>
 80059e8:	e015      	b.n	8005a16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ea:	f7fc fdd5 	bl	8002598 <HAL_GetTick>
 80059ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059f0:	e00a      	b.n	8005a08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f2:	f7fc fdd1 	bl	8002598 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e14b      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a08:	4b7d      	ldr	r3, [pc, #500]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1ed      	bne.n	80059f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a16:	7ffb      	ldrb	r3, [r7, #31]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d105      	bne.n	8005a28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a1c:	4b78      	ldr	r3, [pc, #480]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a20:	4a77      	ldr	r2, [pc, #476]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005a22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a26:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0320 	and.w	r3, r3, #32
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d03c      	beq.n	8005aae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01c      	beq.n	8005a76 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a3c:	4b70      	ldr	r3, [pc, #448]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a42:	4a6f      	ldr	r2, [pc, #444]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005a44:	f043 0301 	orr.w	r3, r3, #1
 8005a48:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a4c:	f7fc fda4 	bl	8002598 <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a54:	f7fc fda0 	bl	8002598 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e11c      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a66:	4b66      	ldr	r3, [pc, #408]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005a68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0ef      	beq.n	8005a54 <HAL_RCC_OscConfig+0x5cc>
 8005a74:	e01b      	b.n	8005aae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a76:	4b62      	ldr	r3, [pc, #392]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005a78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a7c:	4a60      	ldr	r2, [pc, #384]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005a7e:	f023 0301 	bic.w	r3, r3, #1
 8005a82:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a86:	f7fc fd87 	bl	8002598 <HAL_GetTick>
 8005a8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a8e:	f7fc fd83 	bl	8002598 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e0ff      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005aa0:	4b57      	ldr	r3, [pc, #348]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005aa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1ef      	bne.n	8005a8e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 80f3 	beq.w	8005c9e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	f040 80c9 	bne.w	8005c54 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005ac2:	4b4f      	ldr	r3, [pc, #316]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f003 0203 	and.w	r2, r3, #3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d12c      	bne.n	8005b30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d123      	bne.n	8005b30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d11b      	bne.n	8005b30 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b02:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d113      	bne.n	8005b30 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b12:	085b      	lsrs	r3, r3, #1
 8005b14:	3b01      	subs	r3, #1
 8005b16:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d109      	bne.n	8005b30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d06b      	beq.n	8005c08 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	2b0c      	cmp	r3, #12
 8005b34:	d062      	beq.n	8005bfc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005b36:	4b32      	ldr	r3, [pc, #200]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e0ac      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b46:	4b2e      	ldr	r3, [pc, #184]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a2d      	ldr	r2, [pc, #180]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005b4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b50:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b52:	f7fc fd21 	bl	8002598 <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b5a:	f7fc fd1d 	bl	8002598 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e099      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b6c:	4b24      	ldr	r3, [pc, #144]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1f0      	bne.n	8005b5a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b78:	4b21      	ldr	r3, [pc, #132]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	4b21      	ldr	r3, [pc, #132]	@ (8005c04 <HAL_RCC_OscConfig+0x77c>)
 8005b7e:	4013      	ands	r3, r2
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005b88:	3a01      	subs	r2, #1
 8005b8a:	0112      	lsls	r2, r2, #4
 8005b8c:	4311      	orrs	r1, r2
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005b92:	0212      	lsls	r2, r2, #8
 8005b94:	4311      	orrs	r1, r2
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b9a:	0852      	lsrs	r2, r2, #1
 8005b9c:	3a01      	subs	r2, #1
 8005b9e:	0552      	lsls	r2, r2, #21
 8005ba0:	4311      	orrs	r1, r2
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005ba6:	0852      	lsrs	r2, r2, #1
 8005ba8:	3a01      	subs	r2, #1
 8005baa:	0652      	lsls	r2, r2, #25
 8005bac:	4311      	orrs	r1, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005bb2:	06d2      	lsls	r2, r2, #27
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	4912      	ldr	r1, [pc, #72]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005bbc:	4b10      	ldr	r3, [pc, #64]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a0f      	ldr	r2, [pc, #60]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005bc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bd4:	f7fc fce0 	bl	8002598 <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bdc:	f7fc fcdc 	bl	8002598 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e058      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bee:	4b04      	ldr	r3, [pc, #16]	@ (8005c00 <HAL_RCC_OscConfig+0x778>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0f0      	beq.n	8005bdc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bfa:	e050      	b.n	8005c9e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e04f      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
 8005c00:	40021000 	.word	0x40021000
 8005c04:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c08:	4b27      	ldr	r3, [pc, #156]	@ (8005ca8 <HAL_RCC_OscConfig+0x820>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d144      	bne.n	8005c9e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c14:	4b24      	ldr	r3, [pc, #144]	@ (8005ca8 <HAL_RCC_OscConfig+0x820>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a23      	ldr	r2, [pc, #140]	@ (8005ca8 <HAL_RCC_OscConfig+0x820>)
 8005c1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c20:	4b21      	ldr	r3, [pc, #132]	@ (8005ca8 <HAL_RCC_OscConfig+0x820>)
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	4a20      	ldr	r2, [pc, #128]	@ (8005ca8 <HAL_RCC_OscConfig+0x820>)
 8005c26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c2c:	f7fc fcb4 	bl	8002598 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c34:	f7fc fcb0 	bl	8002598 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e02c      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c46:	4b18      	ldr	r3, [pc, #96]	@ (8005ca8 <HAL_RCC_OscConfig+0x820>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f0      	beq.n	8005c34 <HAL_RCC_OscConfig+0x7ac>
 8005c52:	e024      	b.n	8005c9e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	2b0c      	cmp	r3, #12
 8005c58:	d01f      	beq.n	8005c9a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c5a:	4b13      	ldr	r3, [pc, #76]	@ (8005ca8 <HAL_RCC_OscConfig+0x820>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a12      	ldr	r2, [pc, #72]	@ (8005ca8 <HAL_RCC_OscConfig+0x820>)
 8005c60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c66:	f7fc fc97 	bl	8002598 <HAL_GetTick>
 8005c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c6c:	e008      	b.n	8005c80 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c6e:	f7fc fc93 	bl	8002598 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d901      	bls.n	8005c80 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e00f      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c80:	4b09      	ldr	r3, [pc, #36]	@ (8005ca8 <HAL_RCC_OscConfig+0x820>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1f0      	bne.n	8005c6e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005c8c:	4b06      	ldr	r3, [pc, #24]	@ (8005ca8 <HAL_RCC_OscConfig+0x820>)
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	4905      	ldr	r1, [pc, #20]	@ (8005ca8 <HAL_RCC_OscConfig+0x820>)
 8005c92:	4b06      	ldr	r3, [pc, #24]	@ (8005cac <HAL_RCC_OscConfig+0x824>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	60cb      	str	r3, [r1, #12]
 8005c98:	e001      	b.n	8005c9e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3720      	adds	r7, #32
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	feeefffc 	.word	0xfeeefffc

08005cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0e7      	b.n	8005e94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cc4:	4b75      	ldr	r3, [pc, #468]	@ (8005e9c <HAL_RCC_ClockConfig+0x1ec>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d910      	bls.n	8005cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd2:	4b72      	ldr	r3, [pc, #456]	@ (8005e9c <HAL_RCC_ClockConfig+0x1ec>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f023 0207 	bic.w	r2, r3, #7
 8005cda:	4970      	ldr	r1, [pc, #448]	@ (8005e9c <HAL_RCC_ClockConfig+0x1ec>)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce2:	4b6e      	ldr	r3, [pc, #440]	@ (8005e9c <HAL_RCC_ClockConfig+0x1ec>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d001      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e0cf      	b.n	8005e94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d010      	beq.n	8005d22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	4b66      	ldr	r3, [pc, #408]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d908      	bls.n	8005d22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d10:	4b63      	ldr	r3, [pc, #396]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	4960      	ldr	r1, [pc, #384]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d04c      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d107      	bne.n	8005d46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d36:	4b5a      	ldr	r3, [pc, #360]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d121      	bne.n	8005d86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e0a6      	b.n	8005e94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d107      	bne.n	8005d5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d4e:	4b54      	ldr	r3, [pc, #336]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d115      	bne.n	8005d86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e09a      	b.n	8005e94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d107      	bne.n	8005d76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d66:	4b4e      	ldr	r3, [pc, #312]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d109      	bne.n	8005d86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e08e      	b.n	8005e94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d76:	4b4a      	ldr	r3, [pc, #296]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e086      	b.n	8005e94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d86:	4b46      	ldr	r3, [pc, #280]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f023 0203 	bic.w	r2, r3, #3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	4943      	ldr	r1, [pc, #268]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d98:	f7fc fbfe 	bl	8002598 <HAL_GetTick>
 8005d9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d9e:	e00a      	b.n	8005db6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005da0:	f7fc fbfa 	bl	8002598 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e06e      	b.n	8005e94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db6:	4b3a      	ldr	r3, [pc, #232]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 020c 	and.w	r2, r3, #12
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d1eb      	bne.n	8005da0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d010      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	4b31      	ldr	r3, [pc, #196]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d208      	bcs.n	8005df6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005de4:	4b2e      	ldr	r3, [pc, #184]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	492b      	ldr	r1, [pc, #172]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005df6:	4b29      	ldr	r3, [pc, #164]	@ (8005e9c <HAL_RCC_ClockConfig+0x1ec>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d210      	bcs.n	8005e26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e04:	4b25      	ldr	r3, [pc, #148]	@ (8005e9c <HAL_RCC_ClockConfig+0x1ec>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f023 0207 	bic.w	r2, r3, #7
 8005e0c:	4923      	ldr	r1, [pc, #140]	@ (8005e9c <HAL_RCC_ClockConfig+0x1ec>)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e14:	4b21      	ldr	r3, [pc, #132]	@ (8005e9c <HAL_RCC_ClockConfig+0x1ec>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0307 	and.w	r3, r3, #7
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d001      	beq.n	8005e26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e036      	b.n	8005e94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d008      	beq.n	8005e44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e32:	4b1b      	ldr	r3, [pc, #108]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	4918      	ldr	r1, [pc, #96]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d009      	beq.n	8005e64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e50:	4b13      	ldr	r3, [pc, #76]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	4910      	ldr	r1, [pc, #64]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e64:	f000 f824 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	091b      	lsrs	r3, r3, #4
 8005e70:	f003 030f 	and.w	r3, r3, #15
 8005e74:	490b      	ldr	r1, [pc, #44]	@ (8005ea4 <HAL_RCC_ClockConfig+0x1f4>)
 8005e76:	5ccb      	ldrb	r3, [r1, r3]
 8005e78:	f003 031f 	and.w	r3, r3, #31
 8005e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e80:	4a09      	ldr	r2, [pc, #36]	@ (8005ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8005e82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e84:	4b09      	ldr	r3, [pc, #36]	@ (8005eac <HAL_RCC_ClockConfig+0x1fc>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fc fb35 	bl	80024f8 <HAL_InitTick>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	72fb      	strb	r3, [r7, #11]

  return status;
 8005e92:	7afb      	ldrb	r3, [r7, #11]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	40022000 	.word	0x40022000
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	0800a568 	.word	0x0800a568
 8005ea8:	20000008 	.word	0x20000008
 8005eac:	2000000c 	.word	0x2000000c

08005eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b089      	sub	sp, #36	@ 0x24
 8005eb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61fb      	str	r3, [r7, #28]
 8005eba:	2300      	movs	r3, #0
 8005ebc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 030c 	and.w	r3, r3, #12
 8005ec6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f003 0303 	and.w	r3, r3, #3
 8005ed0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x34>
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	2b0c      	cmp	r3, #12
 8005edc:	d121      	bne.n	8005f22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d11e      	bne.n	8005f22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ee4:	4b34      	ldr	r3, [pc, #208]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0308 	and.w	r3, r3, #8
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d107      	bne.n	8005f00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ef0:	4b31      	ldr	r3, [pc, #196]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ef6:	0a1b      	lsrs	r3, r3, #8
 8005ef8:	f003 030f 	and.w	r3, r3, #15
 8005efc:	61fb      	str	r3, [r7, #28]
 8005efe:	e005      	b.n	8005f0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f00:	4b2d      	ldr	r3, [pc, #180]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	091b      	lsrs	r3, r3, #4
 8005f06:	f003 030f 	and.w	r3, r3, #15
 8005f0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10d      	bne.n	8005f38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f20:	e00a      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d102      	bne.n	8005f2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f28:	4b25      	ldr	r3, [pc, #148]	@ (8005fc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f2a:	61bb      	str	r3, [r7, #24]
 8005f2c:	e004      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d101      	bne.n	8005f38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f34:	4b23      	ldr	r3, [pc, #140]	@ (8005fc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	2b0c      	cmp	r3, #12
 8005f3c:	d134      	bne.n	8005fa8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d003      	beq.n	8005f56 <HAL_RCC_GetSysClockFreq+0xa6>
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d003      	beq.n	8005f5c <HAL_RCC_GetSysClockFreq+0xac>
 8005f54:	e005      	b.n	8005f62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f56:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f58:	617b      	str	r3, [r7, #20]
      break;
 8005f5a:	e005      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f5c:	4b19      	ldr	r3, [pc, #100]	@ (8005fc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f5e:	617b      	str	r3, [r7, #20]
      break;
 8005f60:	e002      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	617b      	str	r3, [r7, #20]
      break;
 8005f66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f68:	4b13      	ldr	r3, [pc, #76]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	091b      	lsrs	r3, r3, #4
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	3301      	adds	r3, #1
 8005f74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f76:	4b10      	ldr	r3, [pc, #64]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	0a1b      	lsrs	r3, r3, #8
 8005f7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	fb03 f202 	mul.w	r2, r3, r2
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	0e5b      	lsrs	r3, r3, #25
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	3301      	adds	r3, #1
 8005f9a:	005b      	lsls	r3, r3, #1
 8005f9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005fa8:	69bb      	ldr	r3, [r7, #24]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3724      	adds	r7, #36	@ 0x24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	40021000 	.word	0x40021000
 8005fbc:	0800a580 	.word	0x0800a580
 8005fc0:	00f42400 	.word	0x00f42400
 8005fc4:	007a1200 	.word	0x007a1200

08005fc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fcc:	4b03      	ldr	r3, [pc, #12]	@ (8005fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8005fce:	681b      	ldr	r3, [r3, #0]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	20000008 	.word	0x20000008

08005fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005fe4:	f7ff fff0 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	4b06      	ldr	r3, [pc, #24]	@ (8006004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	0a1b      	lsrs	r3, r3, #8
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	4904      	ldr	r1, [pc, #16]	@ (8006008 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ff6:	5ccb      	ldrb	r3, [r1, r3]
 8005ff8:	f003 031f 	and.w	r3, r3, #31
 8005ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006000:	4618      	mov	r0, r3
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40021000 	.word	0x40021000
 8006008:	0800a578 	.word	0x0800a578

0800600c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006010:	f7ff ffda 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8006014:	4602      	mov	r2, r0
 8006016:	4b06      	ldr	r3, [pc, #24]	@ (8006030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	0adb      	lsrs	r3, r3, #11
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	4904      	ldr	r1, [pc, #16]	@ (8006034 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006022:	5ccb      	ldrb	r3, [r1, r3]
 8006024:	f003 031f 	and.w	r3, r3, #31
 8006028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800602c:	4618      	mov	r0, r3
 800602e:	bd80      	pop	{r7, pc}
 8006030:	40021000 	.word	0x40021000
 8006034:	0800a578 	.word	0x0800a578

08006038 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006040:	2300      	movs	r3, #0
 8006042:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006044:	4b2a      	ldr	r3, [pc, #168]	@ (80060f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006050:	f7ff f9b6 	bl	80053c0 <HAL_PWREx_GetVoltageRange>
 8006054:	6178      	str	r0, [r7, #20]
 8006056:	e014      	b.n	8006082 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006058:	4b25      	ldr	r3, [pc, #148]	@ (80060f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800605a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800605c:	4a24      	ldr	r2, [pc, #144]	@ (80060f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800605e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006062:	6593      	str	r3, [r2, #88]	@ 0x58
 8006064:	4b22      	ldr	r3, [pc, #136]	@ (80060f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006070:	f7ff f9a6 	bl	80053c0 <HAL_PWREx_GetVoltageRange>
 8006074:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006076:	4b1e      	ldr	r3, [pc, #120]	@ (80060f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800607a:	4a1d      	ldr	r2, [pc, #116]	@ (80060f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800607c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006080:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006088:	d10b      	bne.n	80060a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b80      	cmp	r3, #128	@ 0x80
 800608e:	d919      	bls.n	80060c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2ba0      	cmp	r3, #160	@ 0xa0
 8006094:	d902      	bls.n	800609c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006096:	2302      	movs	r3, #2
 8006098:	613b      	str	r3, [r7, #16]
 800609a:	e013      	b.n	80060c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800609c:	2301      	movs	r3, #1
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	e010      	b.n	80060c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b80      	cmp	r3, #128	@ 0x80
 80060a6:	d902      	bls.n	80060ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80060a8:	2303      	movs	r3, #3
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	e00a      	b.n	80060c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b80      	cmp	r3, #128	@ 0x80
 80060b2:	d102      	bne.n	80060ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060b4:	2302      	movs	r3, #2
 80060b6:	613b      	str	r3, [r7, #16]
 80060b8:	e004      	b.n	80060c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b70      	cmp	r3, #112	@ 0x70
 80060be:	d101      	bne.n	80060c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060c0:	2301      	movs	r3, #1
 80060c2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80060c4:	4b0b      	ldr	r3, [pc, #44]	@ (80060f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f023 0207 	bic.w	r2, r3, #7
 80060cc:	4909      	ldr	r1, [pc, #36]	@ (80060f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80060d4:	4b07      	ldr	r3, [pc, #28]	@ (80060f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d001      	beq.n	80060e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e000      	b.n	80060e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	40021000 	.word	0x40021000
 80060f4:	40022000 	.word	0x40022000

080060f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006100:	2300      	movs	r3, #0
 8006102:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006104:	2300      	movs	r3, #0
 8006106:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006110:	2b00      	cmp	r3, #0
 8006112:	d031      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006118:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800611c:	d01a      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800611e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006122:	d814      	bhi.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d009      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006128:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800612c:	d10f      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800612e:	4b5d      	ldr	r3, [pc, #372]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	4a5c      	ldr	r2, [pc, #368]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006138:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800613a:	e00c      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3304      	adds	r3, #4
 8006140:	2100      	movs	r1, #0
 8006142:	4618      	mov	r0, r3
 8006144:	f000 f9ce 	bl	80064e4 <RCCEx_PLLSAI1_Config>
 8006148:	4603      	mov	r3, r0
 800614a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800614c:	e003      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	74fb      	strb	r3, [r7, #19]
      break;
 8006152:	e000      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006156:	7cfb      	ldrb	r3, [r7, #19]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10b      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800615c:	4b51      	ldr	r3, [pc, #324]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800615e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006162:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800616a:	494e      	ldr	r1, [pc, #312]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800616c:	4313      	orrs	r3, r2
 800616e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006172:	e001      	b.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006174:	7cfb      	ldrb	r3, [r7, #19]
 8006176:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 809e 	beq.w	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006186:	2300      	movs	r3, #0
 8006188:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800618a:	4b46      	ldr	r3, [pc, #280]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800618c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800618e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800619a:	2300      	movs	r3, #0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00d      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061a0:	4b40      	ldr	r3, [pc, #256]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a4:	4a3f      	ldr	r2, [pc, #252]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80061ac:	4b3d      	ldr	r3, [pc, #244]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061b4:	60bb      	str	r3, [r7, #8]
 80061b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061b8:	2301      	movs	r3, #1
 80061ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061bc:	4b3a      	ldr	r3, [pc, #232]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a39      	ldr	r2, [pc, #228]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80061c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061c8:	f7fc f9e6 	bl	8002598 <HAL_GetTick>
 80061cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061ce:	e009      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061d0:	f7fc f9e2 	bl	8002598 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d902      	bls.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	74fb      	strb	r3, [r7, #19]
        break;
 80061e2:	e005      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061e4:	4b30      	ldr	r3, [pc, #192]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0ef      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80061f0:	7cfb      	ldrb	r3, [r7, #19]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d15a      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061f6:	4b2b      	ldr	r3, [pc, #172]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006200:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01e      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	429a      	cmp	r2, r3
 8006210:	d019      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006212:	4b24      	ldr	r3, [pc, #144]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006218:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800621c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800621e:	4b21      	ldr	r3, [pc, #132]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006224:	4a1f      	ldr	r2, [pc, #124]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006226:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800622a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800622e:	4b1d      	ldr	r3, [pc, #116]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006234:	4a1b      	ldr	r2, [pc, #108]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006236:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800623a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800623e:	4a19      	ldr	r2, [pc, #100]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d016      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006250:	f7fc f9a2 	bl	8002598 <HAL_GetTick>
 8006254:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006256:	e00b      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006258:	f7fc f99e 	bl	8002598 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006266:	4293      	cmp	r3, r2
 8006268:	d902      	bls.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	74fb      	strb	r3, [r7, #19]
            break;
 800626e:	e006      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006270:	4b0c      	ldr	r3, [pc, #48]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0ec      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800627e:	7cfb      	ldrb	r3, [r7, #19]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10b      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006284:	4b07      	ldr	r3, [pc, #28]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800628a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006292:	4904      	ldr	r1, [pc, #16]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006294:	4313      	orrs	r3, r2
 8006296:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800629a:	e009      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800629c:	7cfb      	ldrb	r3, [r7, #19]
 800629e:	74bb      	strb	r3, [r7, #18]
 80062a0:	e006      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80062a2:	bf00      	nop
 80062a4:	40021000 	.word	0x40021000
 80062a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ac:	7cfb      	ldrb	r3, [r7, #19]
 80062ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062b0:	7c7b      	ldrb	r3, [r7, #17]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d105      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062b6:	4b8a      	ldr	r3, [pc, #552]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ba:	4a89      	ldr	r2, [pc, #548]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062ce:	4b84      	ldr	r3, [pc, #528]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d4:	f023 0203 	bic.w	r2, r3, #3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	4980      	ldr	r1, [pc, #512]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00a      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062f0:	4b7b      	ldr	r3, [pc, #492]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f6:	f023 020c 	bic.w	r2, r3, #12
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fe:	4978      	ldr	r1, [pc, #480]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006300:	4313      	orrs	r3, r2
 8006302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006312:	4b73      	ldr	r3, [pc, #460]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006318:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006320:	496f      	ldr	r1, [pc, #444]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006334:	4b6a      	ldr	r3, [pc, #424]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800633a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006342:	4967      	ldr	r1, [pc, #412]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006344:	4313      	orrs	r3, r2
 8006346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006356:	4b62      	ldr	r3, [pc, #392]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800635c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006364:	495e      	ldr	r1, [pc, #376]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00a      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006378:	4b59      	ldr	r3, [pc, #356]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800637a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800637e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006386:	4956      	ldr	r1, [pc, #344]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006388:	4313      	orrs	r3, r2
 800638a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800639a:	4b51      	ldr	r3, [pc, #324]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a8:	494d      	ldr	r1, [pc, #308]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d028      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063bc:	4b48      	ldr	r3, [pc, #288]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ca:	4945      	ldr	r1, [pc, #276]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063da:	d106      	bne.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063dc:	4b40      	ldr	r3, [pc, #256]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	4a3f      	ldr	r2, [pc, #252]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063e6:	60d3      	str	r3, [r2, #12]
 80063e8:	e011      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063f2:	d10c      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3304      	adds	r3, #4
 80063f8:	2101      	movs	r1, #1
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 f872 	bl	80064e4 <RCCEx_PLLSAI1_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006404:	7cfb      	ldrb	r3, [r7, #19]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800640a:	7cfb      	ldrb	r3, [r7, #19]
 800640c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d028      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800641a:	4b31      	ldr	r3, [pc, #196]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800641c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006420:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006428:	492d      	ldr	r1, [pc, #180]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006434:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006438:	d106      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800643a:	4b29      	ldr	r3, [pc, #164]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	4a28      	ldr	r2, [pc, #160]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006440:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006444:	60d3      	str	r3, [r2, #12]
 8006446:	e011      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006450:	d10c      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3304      	adds	r3, #4
 8006456:	2101      	movs	r1, #1
 8006458:	4618      	mov	r0, r3
 800645a:	f000 f843 	bl	80064e4 <RCCEx_PLLSAI1_Config>
 800645e:	4603      	mov	r3, r0
 8006460:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006462:	7cfb      	ldrb	r3, [r7, #19]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006468:	7cfb      	ldrb	r3, [r7, #19]
 800646a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d01c      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006478:	4b19      	ldr	r3, [pc, #100]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800647a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800647e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006486:	4916      	ldr	r1, [pc, #88]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006488:	4313      	orrs	r3, r2
 800648a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006496:	d10c      	bne.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3304      	adds	r3, #4
 800649c:	2102      	movs	r1, #2
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 f820 	bl	80064e4 <RCCEx_PLLSAI1_Config>
 80064a4:	4603      	mov	r3, r0
 80064a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064a8:	7cfb      	ldrb	r3, [r7, #19]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80064ae:	7cfb      	ldrb	r3, [r7, #19]
 80064b0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064be:	4b08      	ldr	r3, [pc, #32]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064cc:	4904      	ldr	r1, [pc, #16]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80064d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	40021000 	.word	0x40021000

080064e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064f2:	4b74      	ldr	r3, [pc, #464]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d018      	beq.n	8006530 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80064fe:	4b71      	ldr	r3, [pc, #452]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f003 0203 	and.w	r2, r3, #3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d10d      	bne.n	800652a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
       ||
 8006512:	2b00      	cmp	r3, #0
 8006514:	d009      	beq.n	800652a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006516:	4b6b      	ldr	r3, [pc, #428]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	091b      	lsrs	r3, r3, #4
 800651c:	f003 0307 	and.w	r3, r3, #7
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
       ||
 8006526:	429a      	cmp	r2, r3
 8006528:	d047      	beq.n	80065ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	73fb      	strb	r3, [r7, #15]
 800652e:	e044      	b.n	80065ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b03      	cmp	r3, #3
 8006536:	d018      	beq.n	800656a <RCCEx_PLLSAI1_Config+0x86>
 8006538:	2b03      	cmp	r3, #3
 800653a:	d825      	bhi.n	8006588 <RCCEx_PLLSAI1_Config+0xa4>
 800653c:	2b01      	cmp	r3, #1
 800653e:	d002      	beq.n	8006546 <RCCEx_PLLSAI1_Config+0x62>
 8006540:	2b02      	cmp	r3, #2
 8006542:	d009      	beq.n	8006558 <RCCEx_PLLSAI1_Config+0x74>
 8006544:	e020      	b.n	8006588 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006546:	4b5f      	ldr	r3, [pc, #380]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d11d      	bne.n	800658e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006556:	e01a      	b.n	800658e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006558:	4b5a      	ldr	r3, [pc, #360]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006560:	2b00      	cmp	r3, #0
 8006562:	d116      	bne.n	8006592 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006568:	e013      	b.n	8006592 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800656a:	4b56      	ldr	r3, [pc, #344]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10f      	bne.n	8006596 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006576:	4b53      	ldr	r3, [pc, #332]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d109      	bne.n	8006596 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006586:	e006      	b.n	8006596 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	73fb      	strb	r3, [r7, #15]
      break;
 800658c:	e004      	b.n	8006598 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800658e:	bf00      	nop
 8006590:	e002      	b.n	8006598 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006592:	bf00      	nop
 8006594:	e000      	b.n	8006598 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006596:	bf00      	nop
    }

    if(status == HAL_OK)
 8006598:	7bfb      	ldrb	r3, [r7, #15]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10d      	bne.n	80065ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800659e:	4b49      	ldr	r3, [pc, #292]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6819      	ldr	r1, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	430b      	orrs	r3, r1
 80065b4:	4943      	ldr	r1, [pc, #268]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d17c      	bne.n	80066ba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80065c0:	4b40      	ldr	r3, [pc, #256]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a3f      	ldr	r2, [pc, #252]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80065ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065cc:	f7fb ffe4 	bl	8002598 <HAL_GetTick>
 80065d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065d2:	e009      	b.n	80065e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065d4:	f7fb ffe0 	bl	8002598 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d902      	bls.n	80065e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	73fb      	strb	r3, [r7, #15]
        break;
 80065e6:	e005      	b.n	80065f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065e8:	4b36      	ldr	r3, [pc, #216]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1ef      	bne.n	80065d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d15f      	bne.n	80066ba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d110      	bne.n	8006622 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006600:	4b30      	ldr	r3, [pc, #192]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006608:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6892      	ldr	r2, [r2, #8]
 8006610:	0211      	lsls	r1, r2, #8
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	68d2      	ldr	r2, [r2, #12]
 8006616:	06d2      	lsls	r2, r2, #27
 8006618:	430a      	orrs	r2, r1
 800661a:	492a      	ldr	r1, [pc, #168]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800661c:	4313      	orrs	r3, r2
 800661e:	610b      	str	r3, [r1, #16]
 8006620:	e027      	b.n	8006672 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d112      	bne.n	800664e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006628:	4b26      	ldr	r3, [pc, #152]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006630:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6892      	ldr	r2, [r2, #8]
 8006638:	0211      	lsls	r1, r2, #8
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	6912      	ldr	r2, [r2, #16]
 800663e:	0852      	lsrs	r2, r2, #1
 8006640:	3a01      	subs	r2, #1
 8006642:	0552      	lsls	r2, r2, #21
 8006644:	430a      	orrs	r2, r1
 8006646:	491f      	ldr	r1, [pc, #124]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006648:	4313      	orrs	r3, r2
 800664a:	610b      	str	r3, [r1, #16]
 800664c:	e011      	b.n	8006672 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800664e:	4b1d      	ldr	r3, [pc, #116]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006656:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6892      	ldr	r2, [r2, #8]
 800665e:	0211      	lsls	r1, r2, #8
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6952      	ldr	r2, [r2, #20]
 8006664:	0852      	lsrs	r2, r2, #1
 8006666:	3a01      	subs	r2, #1
 8006668:	0652      	lsls	r2, r2, #25
 800666a:	430a      	orrs	r2, r1
 800666c:	4915      	ldr	r1, [pc, #84]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800666e:	4313      	orrs	r3, r2
 8006670:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006672:	4b14      	ldr	r3, [pc, #80]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a13      	ldr	r2, [pc, #76]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006678:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800667c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800667e:	f7fb ff8b 	bl	8002598 <HAL_GetTick>
 8006682:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006684:	e009      	b.n	800669a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006686:	f7fb ff87 	bl	8002598 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d902      	bls.n	800669a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	73fb      	strb	r3, [r7, #15]
          break;
 8006698:	e005      	b.n	80066a6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800669a:	4b0a      	ldr	r3, [pc, #40]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d0ef      	beq.n	8006686 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d106      	bne.n	80066ba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80066ac:	4b05      	ldr	r3, [pc, #20]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	4903      	ldr	r1, [pc, #12]	@ (80066c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	40021000 	.word	0x40021000

080066c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e049      	b.n	800676e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d106      	bne.n	80066f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7fb fcd8 	bl	80020a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2202      	movs	r2, #2
 80066f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3304      	adds	r3, #4
 8006704:	4619      	mov	r1, r3
 8006706:	4610      	mov	r0, r2
 8006708:	f000 fb04 	bl	8006d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b01      	cmp	r3, #1
 800678a:	d001      	beq.n	8006790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e03b      	b.n	8006808 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0201 	orr.w	r2, r2, #1
 80067a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a19      	ldr	r2, [pc, #100]	@ (8006814 <HAL_TIM_Base_Start_IT+0x9c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d009      	beq.n	80067c6 <HAL_TIM_Base_Start_IT+0x4e>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ba:	d004      	beq.n	80067c6 <HAL_TIM_Base_Start_IT+0x4e>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a15      	ldr	r2, [pc, #84]	@ (8006818 <HAL_TIM_Base_Start_IT+0xa0>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d115      	bne.n	80067f2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	4b13      	ldr	r3, [pc, #76]	@ (800681c <HAL_TIM_Base_Start_IT+0xa4>)
 80067ce:	4013      	ands	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2b06      	cmp	r3, #6
 80067d6:	d015      	beq.n	8006804 <HAL_TIM_Base_Start_IT+0x8c>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067de:	d011      	beq.n	8006804 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0201 	orr.w	r2, r2, #1
 80067ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f0:	e008      	b.n	8006804 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f042 0201 	orr.w	r2, r2, #1
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	e000      	b.n	8006806 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006804:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	40012c00 	.word	0x40012c00
 8006818:	40014000 	.word	0x40014000
 800681c:	00010007 	.word	0x00010007

08006820 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e097      	b.n	8006964 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d106      	bne.n	800684e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7fb fbc7 	bl	8001fdc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2202      	movs	r2, #2
 8006852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	6812      	ldr	r2, [r2, #0]
 8006860:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006864:	f023 0307 	bic.w	r3, r3, #7
 8006868:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	3304      	adds	r3, #4
 8006872:	4619      	mov	r1, r3
 8006874:	4610      	mov	r0, r2
 8006876:	f000 fa4d 	bl	8006d14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4313      	orrs	r3, r2
 800689a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068a2:	f023 0303 	bic.w	r3, r3, #3
 80068a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	021b      	lsls	r3, r3, #8
 80068b2:	4313      	orrs	r3, r2
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80068c0:	f023 030c 	bic.w	r3, r3, #12
 80068c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	021b      	lsls	r3, r3, #8
 80068dc:	4313      	orrs	r3, r2
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	011a      	lsls	r2, r3, #4
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	031b      	lsls	r3, r3, #12
 80068f0:	4313      	orrs	r3, r2
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80068fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006906:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	4313      	orrs	r3, r2
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800697c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006984:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800698c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006994:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d110      	bne.n	80069be <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800699c:	7bfb      	ldrb	r3, [r7, #15]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d102      	bne.n	80069a8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80069a2:	7b7b      	ldrb	r3, [r7, #13]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d001      	beq.n	80069ac <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e089      	b.n	8006ac0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069bc:	e031      	b.n	8006a22 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d110      	bne.n	80069e6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80069c4:	7bbb      	ldrb	r3, [r7, #14]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d102      	bne.n	80069d0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80069ca:	7b3b      	ldrb	r3, [r7, #12]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d001      	beq.n	80069d4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e075      	b.n	8006ac0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069e4:	e01d      	b.n	8006a22 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d108      	bne.n	80069fe <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80069ec:	7bbb      	ldrb	r3, [r7, #14]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d105      	bne.n	80069fe <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069f2:	7b7b      	ldrb	r3, [r7, #13]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d102      	bne.n	80069fe <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80069f8:	7b3b      	ldrb	r3, [r7, #12]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d001      	beq.n	8006a02 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e05e      	b.n	8006ac0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2202      	movs	r2, #2
 8006a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2202      	movs	r2, #2
 8006a16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	d010      	beq.n	8006a50 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006a2e:	e01f      	b.n	8006a70 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2201      	movs	r2, #1
 8006a36:	2100      	movs	r1, #0
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 f9db 	bl	8006df4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0202 	orr.w	r2, r2, #2
 8006a4c:	60da      	str	r2, [r3, #12]
      break;
 8006a4e:	e02e      	b.n	8006aae <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2201      	movs	r2, #1
 8006a56:	2104      	movs	r1, #4
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 f9cb 	bl	8006df4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f042 0204 	orr.w	r2, r2, #4
 8006a6c:	60da      	str	r2, [r3, #12]
      break;
 8006a6e:	e01e      	b.n	8006aae <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2201      	movs	r2, #1
 8006a76:	2100      	movs	r1, #0
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 f9bb 	bl	8006df4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2201      	movs	r2, #1
 8006a84:	2104      	movs	r1, #4
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 f9b4 	bl	8006df4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68da      	ldr	r2, [r3, #12]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f042 0202 	orr.w	r2, r2, #2
 8006a9a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0204 	orr.w	r2, r2, #4
 8006aaa:	60da      	str	r2, [r3, #12]
      break;
 8006aac:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f042 0201 	orr.w	r2, r2, #1
 8006abc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d020      	beq.n	8006b2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d01b      	beq.n	8006b2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f06f 0202 	mvn.w	r2, #2
 8006afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fb f8a4 	bl	8001c60 <HAL_TIM_IC_CaptureCallback>
 8006b18:	e005      	b.n	8006b26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f8db 	bl	8006cd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f8e2 	bl	8006cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f003 0304 	and.w	r3, r3, #4
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d020      	beq.n	8006b78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01b      	beq.n	8006b78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f06f 0204 	mvn.w	r2, #4
 8006b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fb f87e 	bl	8001c60 <HAL_TIM_IC_CaptureCallback>
 8006b64:	e005      	b.n	8006b72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f8b5 	bl	8006cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f8bc 	bl	8006cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f003 0308 	and.w	r3, r3, #8
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d020      	beq.n	8006bc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f003 0308 	and.w	r3, r3, #8
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01b      	beq.n	8006bc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f06f 0208 	mvn.w	r2, #8
 8006b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2204      	movs	r2, #4
 8006b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7fb f858 	bl	8001c60 <HAL_TIM_IC_CaptureCallback>
 8006bb0:	e005      	b.n	8006bbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f88f 	bl	8006cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f896 	bl	8006cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f003 0310 	and.w	r3, r3, #16
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d020      	beq.n	8006c10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d01b      	beq.n	8006c10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0210 	mvn.w	r2, #16
 8006be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2208      	movs	r2, #8
 8006be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fb f832 	bl	8001c60 <HAL_TIM_IC_CaptureCallback>
 8006bfc:	e005      	b.n	8006c0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f869 	bl	8006cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f870 	bl	8006cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00c      	beq.n	8006c34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d007      	beq.n	8006c34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f06f 0201 	mvn.w	r2, #1
 8006c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7fa feda 	bl	80019e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d104      	bne.n	8006c48 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00c      	beq.n	8006c62 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d007      	beq.n	8006c62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f95f 	bl	8006f20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00c      	beq.n	8006c86 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d007      	beq.n	8006c86 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f957 	bl	8006f34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00c      	beq.n	8006caa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d007      	beq.n	8006caa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f82a 	bl	8006cfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f003 0320 	and.w	r3, r3, #32
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00c      	beq.n	8006cce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f003 0320 	and.w	r3, r3, #32
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d007      	beq.n	8006cce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f06f 0220 	mvn.w	r2, #32
 8006cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f91f 	bl	8006f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cce:	bf00      	nop
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cde:	bf00      	nop
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
	...

08006d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a30      	ldr	r2, [pc, #192]	@ (8006de8 <TIM_Base_SetConfig+0xd4>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d003      	beq.n	8006d34 <TIM_Base_SetConfig+0x20>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d32:	d108      	bne.n	8006d46 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a27      	ldr	r2, [pc, #156]	@ (8006de8 <TIM_Base_SetConfig+0xd4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00b      	beq.n	8006d66 <TIM_Base_SetConfig+0x52>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d54:	d007      	beq.n	8006d66 <TIM_Base_SetConfig+0x52>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a24      	ldr	r2, [pc, #144]	@ (8006dec <TIM_Base_SetConfig+0xd8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d003      	beq.n	8006d66 <TIM_Base_SetConfig+0x52>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a23      	ldr	r2, [pc, #140]	@ (8006df0 <TIM_Base_SetConfig+0xdc>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d108      	bne.n	8006d78 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a12      	ldr	r2, [pc, #72]	@ (8006de8 <TIM_Base_SetConfig+0xd4>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d007      	beq.n	8006db4 <TIM_Base_SetConfig+0xa0>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a11      	ldr	r2, [pc, #68]	@ (8006dec <TIM_Base_SetConfig+0xd8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d003      	beq.n	8006db4 <TIM_Base_SetConfig+0xa0>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a10      	ldr	r2, [pc, #64]	@ (8006df0 <TIM_Base_SetConfig+0xdc>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d103      	bne.n	8006dbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	691a      	ldr	r2, [r3, #16]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d105      	bne.n	8006dda <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f023 0201 	bic.w	r2, r3, #1
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	611a      	str	r2, [r3, #16]
  }
}
 8006dda:	bf00      	nop
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40012c00 	.word	0x40012c00
 8006dec:	40014000 	.word	0x40014000
 8006df0:	40014400 	.word	0x40014400

08006df4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f003 031f 	and.w	r3, r3, #31
 8006e06:	2201      	movs	r2, #1
 8006e08:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6a1a      	ldr	r2, [r3, #32]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	43db      	mvns	r3, r3
 8006e16:	401a      	ands	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a1a      	ldr	r2, [r3, #32]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f003 031f 	and.w	r3, r3, #31
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	fa01 f303 	lsl.w	r3, r1, r3
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	621a      	str	r2, [r3, #32]
}
 8006e32:	bf00      	nop
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
	...

08006e40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e54:	2302      	movs	r3, #2
 8006e56:	e04f      	b.n	8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2202      	movs	r2, #2
 8006e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a21      	ldr	r2, [pc, #132]	@ (8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d108      	bne.n	8006e94 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006e88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a14      	ldr	r2, [pc, #80]	@ (8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d009      	beq.n	8006ecc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ec0:	d004      	beq.n	8006ecc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a10      	ldr	r2, [pc, #64]	@ (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d10c      	bne.n	8006ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ed2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	40012c00 	.word	0x40012c00
 8006f08:	40014000 	.word	0x40014000

08006f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e040      	b.n	8006fdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d106      	bne.n	8006f70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7fb f8c0 	bl	80020f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2224      	movs	r2, #36	@ 0x24
 8006f74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 0201 	bic.w	r2, r2, #1
 8006f84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fa54 	bl	800743c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f825 	bl	8006fe4 <UART_SetConfig>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d101      	bne.n	8006fa4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e01b      	b.n	8006fdc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689a      	ldr	r2, [r3, #8]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f042 0201 	orr.w	r2, r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fad3 	bl	8007580 <UART_CheckIdleState>
 8006fda:	4603      	mov	r3, r0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fe8:	b08a      	sub	sp, #40	@ 0x28
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	689a      	ldr	r2, [r3, #8]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	431a      	orrs	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	4313      	orrs	r3, r2
 800700a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	4bb4      	ldr	r3, [pc, #720]	@ (80072e4 <UART_SetConfig+0x300>)
 8007014:	4013      	ands	r3, r2
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	6812      	ldr	r2, [r2, #0]
 800701a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800701c:	430b      	orrs	r3, r1
 800701e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4aa9      	ldr	r2, [pc, #676]	@ (80072e8 <UART_SetConfig+0x304>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d004      	beq.n	8007050 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800704c:	4313      	orrs	r3, r2
 800704e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007060:	430a      	orrs	r2, r1
 8007062:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4aa0      	ldr	r2, [pc, #640]	@ (80072ec <UART_SetConfig+0x308>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d126      	bne.n	80070bc <UART_SetConfig+0xd8>
 800706e:	4ba0      	ldr	r3, [pc, #640]	@ (80072f0 <UART_SetConfig+0x30c>)
 8007070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007074:	f003 0303 	and.w	r3, r3, #3
 8007078:	2b03      	cmp	r3, #3
 800707a:	d81b      	bhi.n	80070b4 <UART_SetConfig+0xd0>
 800707c:	a201      	add	r2, pc, #4	@ (adr r2, 8007084 <UART_SetConfig+0xa0>)
 800707e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007082:	bf00      	nop
 8007084:	08007095 	.word	0x08007095
 8007088:	080070a5 	.word	0x080070a5
 800708c:	0800709d 	.word	0x0800709d
 8007090:	080070ad 	.word	0x080070ad
 8007094:	2301      	movs	r3, #1
 8007096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800709a:	e080      	b.n	800719e <UART_SetConfig+0x1ba>
 800709c:	2302      	movs	r3, #2
 800709e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070a2:	e07c      	b.n	800719e <UART_SetConfig+0x1ba>
 80070a4:	2304      	movs	r3, #4
 80070a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070aa:	e078      	b.n	800719e <UART_SetConfig+0x1ba>
 80070ac:	2308      	movs	r3, #8
 80070ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070b2:	e074      	b.n	800719e <UART_SetConfig+0x1ba>
 80070b4:	2310      	movs	r3, #16
 80070b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ba:	e070      	b.n	800719e <UART_SetConfig+0x1ba>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a8c      	ldr	r2, [pc, #560]	@ (80072f4 <UART_SetConfig+0x310>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d138      	bne.n	8007138 <UART_SetConfig+0x154>
 80070c6:	4b8a      	ldr	r3, [pc, #552]	@ (80072f0 <UART_SetConfig+0x30c>)
 80070c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070cc:	f003 030c 	and.w	r3, r3, #12
 80070d0:	2b0c      	cmp	r3, #12
 80070d2:	d82d      	bhi.n	8007130 <UART_SetConfig+0x14c>
 80070d4:	a201      	add	r2, pc, #4	@ (adr r2, 80070dc <UART_SetConfig+0xf8>)
 80070d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070da:	bf00      	nop
 80070dc:	08007111 	.word	0x08007111
 80070e0:	08007131 	.word	0x08007131
 80070e4:	08007131 	.word	0x08007131
 80070e8:	08007131 	.word	0x08007131
 80070ec:	08007121 	.word	0x08007121
 80070f0:	08007131 	.word	0x08007131
 80070f4:	08007131 	.word	0x08007131
 80070f8:	08007131 	.word	0x08007131
 80070fc:	08007119 	.word	0x08007119
 8007100:	08007131 	.word	0x08007131
 8007104:	08007131 	.word	0x08007131
 8007108:	08007131 	.word	0x08007131
 800710c:	08007129 	.word	0x08007129
 8007110:	2300      	movs	r3, #0
 8007112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007116:	e042      	b.n	800719e <UART_SetConfig+0x1ba>
 8007118:	2302      	movs	r3, #2
 800711a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800711e:	e03e      	b.n	800719e <UART_SetConfig+0x1ba>
 8007120:	2304      	movs	r3, #4
 8007122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007126:	e03a      	b.n	800719e <UART_SetConfig+0x1ba>
 8007128:	2308      	movs	r3, #8
 800712a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800712e:	e036      	b.n	800719e <UART_SetConfig+0x1ba>
 8007130:	2310      	movs	r3, #16
 8007132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007136:	e032      	b.n	800719e <UART_SetConfig+0x1ba>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a6a      	ldr	r2, [pc, #424]	@ (80072e8 <UART_SetConfig+0x304>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d12a      	bne.n	8007198 <UART_SetConfig+0x1b4>
 8007142:	4b6b      	ldr	r3, [pc, #428]	@ (80072f0 <UART_SetConfig+0x30c>)
 8007144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007148:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800714c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007150:	d01a      	beq.n	8007188 <UART_SetConfig+0x1a4>
 8007152:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007156:	d81b      	bhi.n	8007190 <UART_SetConfig+0x1ac>
 8007158:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800715c:	d00c      	beq.n	8007178 <UART_SetConfig+0x194>
 800715e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007162:	d815      	bhi.n	8007190 <UART_SetConfig+0x1ac>
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <UART_SetConfig+0x18c>
 8007168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800716c:	d008      	beq.n	8007180 <UART_SetConfig+0x19c>
 800716e:	e00f      	b.n	8007190 <UART_SetConfig+0x1ac>
 8007170:	2300      	movs	r3, #0
 8007172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007176:	e012      	b.n	800719e <UART_SetConfig+0x1ba>
 8007178:	2302      	movs	r3, #2
 800717a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800717e:	e00e      	b.n	800719e <UART_SetConfig+0x1ba>
 8007180:	2304      	movs	r3, #4
 8007182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007186:	e00a      	b.n	800719e <UART_SetConfig+0x1ba>
 8007188:	2308      	movs	r3, #8
 800718a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800718e:	e006      	b.n	800719e <UART_SetConfig+0x1ba>
 8007190:	2310      	movs	r3, #16
 8007192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007196:	e002      	b.n	800719e <UART_SetConfig+0x1ba>
 8007198:	2310      	movs	r3, #16
 800719a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a51      	ldr	r2, [pc, #324]	@ (80072e8 <UART_SetConfig+0x304>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d17a      	bne.n	800729e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d824      	bhi.n	80071fa <UART_SetConfig+0x216>
 80071b0:	a201      	add	r2, pc, #4	@ (adr r2, 80071b8 <UART_SetConfig+0x1d4>)
 80071b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b6:	bf00      	nop
 80071b8:	080071dd 	.word	0x080071dd
 80071bc:	080071fb 	.word	0x080071fb
 80071c0:	080071e5 	.word	0x080071e5
 80071c4:	080071fb 	.word	0x080071fb
 80071c8:	080071eb 	.word	0x080071eb
 80071cc:	080071fb 	.word	0x080071fb
 80071d0:	080071fb 	.word	0x080071fb
 80071d4:	080071fb 	.word	0x080071fb
 80071d8:	080071f3 	.word	0x080071f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071dc:	f7fe ff00 	bl	8005fe0 <HAL_RCC_GetPCLK1Freq>
 80071e0:	61f8      	str	r0, [r7, #28]
        break;
 80071e2:	e010      	b.n	8007206 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071e4:	4b44      	ldr	r3, [pc, #272]	@ (80072f8 <UART_SetConfig+0x314>)
 80071e6:	61fb      	str	r3, [r7, #28]
        break;
 80071e8:	e00d      	b.n	8007206 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ea:	f7fe fe61 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 80071ee:	61f8      	str	r0, [r7, #28]
        break;
 80071f0:	e009      	b.n	8007206 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071f6:	61fb      	str	r3, [r7, #28]
        break;
 80071f8:	e005      	b.n	8007206 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80071fa:	2300      	movs	r3, #0
 80071fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007204:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 8107 	beq.w	800741c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	4613      	mov	r3, r2
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	4413      	add	r3, r2
 8007218:	69fa      	ldr	r2, [r7, #28]
 800721a:	429a      	cmp	r2, r3
 800721c:	d305      	bcc.n	800722a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007224:	69fa      	ldr	r2, [r7, #28]
 8007226:	429a      	cmp	r2, r3
 8007228:	d903      	bls.n	8007232 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007230:	e0f4      	b.n	800741c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	2200      	movs	r2, #0
 8007236:	461c      	mov	r4, r3
 8007238:	4615      	mov	r5, r2
 800723a:	f04f 0200 	mov.w	r2, #0
 800723e:	f04f 0300 	mov.w	r3, #0
 8007242:	022b      	lsls	r3, r5, #8
 8007244:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007248:	0222      	lsls	r2, r4, #8
 800724a:	68f9      	ldr	r1, [r7, #12]
 800724c:	6849      	ldr	r1, [r1, #4]
 800724e:	0849      	lsrs	r1, r1, #1
 8007250:	2000      	movs	r0, #0
 8007252:	4688      	mov	r8, r1
 8007254:	4681      	mov	r9, r0
 8007256:	eb12 0a08 	adds.w	sl, r2, r8
 800725a:	eb43 0b09 	adc.w	fp, r3, r9
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	603b      	str	r3, [r7, #0]
 8007266:	607a      	str	r2, [r7, #4]
 8007268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800726c:	4650      	mov	r0, sl
 800726e:	4659      	mov	r1, fp
 8007270:	f7f9 fcea 	bl	8000c48 <__aeabi_uldivmod>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	4613      	mov	r3, r2
 800727a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007282:	d308      	bcc.n	8007296 <UART_SetConfig+0x2b2>
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800728a:	d204      	bcs.n	8007296 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	60da      	str	r2, [r3, #12]
 8007294:	e0c2      	b.n	800741c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800729c:	e0be      	b.n	800741c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072a6:	d16a      	bne.n	800737e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80072a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80072ac:	2b08      	cmp	r3, #8
 80072ae:	d834      	bhi.n	800731a <UART_SetConfig+0x336>
 80072b0:	a201      	add	r2, pc, #4	@ (adr r2, 80072b8 <UART_SetConfig+0x2d4>)
 80072b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b6:	bf00      	nop
 80072b8:	080072dd 	.word	0x080072dd
 80072bc:	080072fd 	.word	0x080072fd
 80072c0:	08007305 	.word	0x08007305
 80072c4:	0800731b 	.word	0x0800731b
 80072c8:	0800730b 	.word	0x0800730b
 80072cc:	0800731b 	.word	0x0800731b
 80072d0:	0800731b 	.word	0x0800731b
 80072d4:	0800731b 	.word	0x0800731b
 80072d8:	08007313 	.word	0x08007313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072dc:	f7fe fe80 	bl	8005fe0 <HAL_RCC_GetPCLK1Freq>
 80072e0:	61f8      	str	r0, [r7, #28]
        break;
 80072e2:	e020      	b.n	8007326 <UART_SetConfig+0x342>
 80072e4:	efff69f3 	.word	0xefff69f3
 80072e8:	40008000 	.word	0x40008000
 80072ec:	40013800 	.word	0x40013800
 80072f0:	40021000 	.word	0x40021000
 80072f4:	40004400 	.word	0x40004400
 80072f8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072fc:	f7fe fe86 	bl	800600c <HAL_RCC_GetPCLK2Freq>
 8007300:	61f8      	str	r0, [r7, #28]
        break;
 8007302:	e010      	b.n	8007326 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007304:	4b4c      	ldr	r3, [pc, #304]	@ (8007438 <UART_SetConfig+0x454>)
 8007306:	61fb      	str	r3, [r7, #28]
        break;
 8007308:	e00d      	b.n	8007326 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800730a:	f7fe fdd1 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 800730e:	61f8      	str	r0, [r7, #28]
        break;
 8007310:	e009      	b.n	8007326 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007316:	61fb      	str	r3, [r7, #28]
        break;
 8007318:	e005      	b.n	8007326 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800731a:	2300      	movs	r3, #0
 800731c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007324:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d077      	beq.n	800741c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	005a      	lsls	r2, r3, #1
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	085b      	lsrs	r3, r3, #1
 8007336:	441a      	add	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007340:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	2b0f      	cmp	r3, #15
 8007346:	d916      	bls.n	8007376 <UART_SetConfig+0x392>
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800734e:	d212      	bcs.n	8007376 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	b29b      	uxth	r3, r3
 8007354:	f023 030f 	bic.w	r3, r3, #15
 8007358:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	085b      	lsrs	r3, r3, #1
 800735e:	b29b      	uxth	r3, r3
 8007360:	f003 0307 	and.w	r3, r3, #7
 8007364:	b29a      	uxth	r2, r3
 8007366:	8afb      	ldrh	r3, [r7, #22]
 8007368:	4313      	orrs	r3, r2
 800736a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	8afa      	ldrh	r2, [r7, #22]
 8007372:	60da      	str	r2, [r3, #12]
 8007374:	e052      	b.n	800741c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800737c:	e04e      	b.n	800741c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800737e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007382:	2b08      	cmp	r3, #8
 8007384:	d827      	bhi.n	80073d6 <UART_SetConfig+0x3f2>
 8007386:	a201      	add	r2, pc, #4	@ (adr r2, 800738c <UART_SetConfig+0x3a8>)
 8007388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738c:	080073b1 	.word	0x080073b1
 8007390:	080073b9 	.word	0x080073b9
 8007394:	080073c1 	.word	0x080073c1
 8007398:	080073d7 	.word	0x080073d7
 800739c:	080073c7 	.word	0x080073c7
 80073a0:	080073d7 	.word	0x080073d7
 80073a4:	080073d7 	.word	0x080073d7
 80073a8:	080073d7 	.word	0x080073d7
 80073ac:	080073cf 	.word	0x080073cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073b0:	f7fe fe16 	bl	8005fe0 <HAL_RCC_GetPCLK1Freq>
 80073b4:	61f8      	str	r0, [r7, #28]
        break;
 80073b6:	e014      	b.n	80073e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073b8:	f7fe fe28 	bl	800600c <HAL_RCC_GetPCLK2Freq>
 80073bc:	61f8      	str	r0, [r7, #28]
        break;
 80073be:	e010      	b.n	80073e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007438 <UART_SetConfig+0x454>)
 80073c2:	61fb      	str	r3, [r7, #28]
        break;
 80073c4:	e00d      	b.n	80073e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073c6:	f7fe fd73 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 80073ca:	61f8      	str	r0, [r7, #28]
        break;
 80073cc:	e009      	b.n	80073e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073d2:	61fb      	str	r3, [r7, #28]
        break;
 80073d4:	e005      	b.n	80073e2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80073e0:	bf00      	nop
    }

    if (pclk != 0U)
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d019      	beq.n	800741c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	085a      	lsrs	r2, r3, #1
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	441a      	add	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	2b0f      	cmp	r3, #15
 8007400:	d909      	bls.n	8007416 <UART_SetConfig+0x432>
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007408:	d205      	bcs.n	8007416 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	b29a      	uxth	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	60da      	str	r2, [r3, #12]
 8007414:	e002      	b.n	800741c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007428:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800742c:	4618      	mov	r0, r3
 800742e:	3728      	adds	r7, #40	@ 0x28
 8007430:	46bd      	mov	sp, r7
 8007432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007436:	bf00      	nop
 8007438:	00f42400 	.word	0x00f42400

0800743c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007448:	f003 0308 	and.w	r3, r3, #8
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00a      	beq.n	80074aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ae:	f003 0304 	and.w	r3, r3, #4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d0:	f003 0310 	and.w	r3, r3, #16
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f2:	f003 0320 	and.w	r3, r3, #32
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01a      	beq.n	8007552 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007536:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800753a:	d10a      	bne.n	8007552 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	605a      	str	r2, [r3, #4]
  }
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b098      	sub	sp, #96	@ 0x60
 8007584:	af02      	add	r7, sp, #8
 8007586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007590:	f7fb f802 	bl	8002598 <HAL_GetTick>
 8007594:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0308 	and.w	r3, r3, #8
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d12e      	bne.n	8007602 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075ac:	2200      	movs	r2, #0
 80075ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f88c 	bl	80076d0 <UART_WaitOnFlagUntilTimeout>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d021      	beq.n	8007602 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	461a      	mov	r2, r3
 80075da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80075de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075e4:	e841 2300 	strex	r3, r2, [r1]
 80075e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1e6      	bne.n	80075be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2220      	movs	r2, #32
 80075f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e062      	b.n	80076c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	2b04      	cmp	r3, #4
 800760e:	d149      	bne.n	80076a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007610:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007618:	2200      	movs	r2, #0
 800761a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f856 	bl	80076d0 <UART_WaitOnFlagUntilTimeout>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d03c      	beq.n	80076a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007632:	e853 3f00 	ldrex	r3, [r3]
 8007636:	623b      	str	r3, [r7, #32]
   return(result);
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800763e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	461a      	mov	r2, r3
 8007646:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007648:	633b      	str	r3, [r7, #48]	@ 0x30
 800764a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800764e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007650:	e841 2300 	strex	r3, r2, [r1]
 8007654:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e6      	bne.n	800762a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3308      	adds	r3, #8
 8007662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	e853 3f00 	ldrex	r3, [r3]
 800766a:	60fb      	str	r3, [r7, #12]
   return(result);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 0301 	bic.w	r3, r3, #1
 8007672:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3308      	adds	r3, #8
 800767a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800767c:	61fa      	str	r2, [r7, #28]
 800767e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007680:	69b9      	ldr	r1, [r7, #24]
 8007682:	69fa      	ldr	r2, [r7, #28]
 8007684:	e841 2300 	strex	r3, r2, [r1]
 8007688:	617b      	str	r3, [r7, #20]
   return(result);
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e5      	bne.n	800765c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2220      	movs	r2, #32
 8007694:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e011      	b.n	80076c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2220      	movs	r2, #32
 80076a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2220      	movs	r2, #32
 80076ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3758      	adds	r7, #88	@ 0x58
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	4613      	mov	r3, r2
 80076de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076e0:	e04f      	b.n	8007782 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076e8:	d04b      	beq.n	8007782 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ea:	f7fa ff55 	bl	8002598 <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d302      	bcc.n	8007700 <UART_WaitOnFlagUntilTimeout+0x30>
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e04e      	b.n	80077a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0304 	and.w	r3, r3, #4
 800770e:	2b00      	cmp	r3, #0
 8007710:	d037      	beq.n	8007782 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2b80      	cmp	r3, #128	@ 0x80
 8007716:	d034      	beq.n	8007782 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2b40      	cmp	r3, #64	@ 0x40
 800771c:	d031      	beq.n	8007782 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	f003 0308 	and.w	r3, r3, #8
 8007728:	2b08      	cmp	r3, #8
 800772a:	d110      	bne.n	800774e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2208      	movs	r2, #8
 8007732:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 f838 	bl	80077aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2208      	movs	r2, #8
 800773e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e029      	b.n	80077a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007758:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800775c:	d111      	bne.n	8007782 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007766:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 f81e 	bl	80077aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2220      	movs	r2, #32
 8007772:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e00f      	b.n	80077a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69da      	ldr	r2, [r3, #28]
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	4013      	ands	r3, r2
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	429a      	cmp	r2, r3
 8007790:	bf0c      	ite	eq
 8007792:	2301      	moveq	r3, #1
 8007794:	2300      	movne	r3, #0
 8007796:	b2db      	uxtb	r3, r3
 8007798:	461a      	mov	r2, r3
 800779a:	79fb      	ldrb	r3, [r7, #7]
 800779c:	429a      	cmp	r2, r3
 800779e:	d0a0      	beq.n	80076e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b095      	sub	sp, #84	@ 0x54
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	461a      	mov	r2, r3
 80077ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80077d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e6      	bne.n	80077b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3308      	adds	r3, #8
 80077ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	e853 3f00 	ldrex	r3, [r3]
 80077f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	f023 0301 	bic.w	r3, r3, #1
 80077fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3308      	adds	r3, #8
 8007802:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007804:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007806:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007808:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800780a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800780c:	e841 2300 	strex	r3, r2, [r1]
 8007810:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1e5      	bne.n	80077e4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800781c:	2b01      	cmp	r3, #1
 800781e:	d118      	bne.n	8007852 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	60bb      	str	r3, [r7, #8]
   return(result);
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f023 0310 	bic.w	r3, r3, #16
 8007834:	647b      	str	r3, [r7, #68]	@ 0x44
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800783e:	61bb      	str	r3, [r7, #24]
 8007840:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007842:	6979      	ldr	r1, [r7, #20]
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	e841 2300 	strex	r3, r2, [r1]
 800784a:	613b      	str	r3, [r7, #16]
   return(result);
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1e6      	bne.n	8007820 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2220      	movs	r2, #32
 8007856:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007866:	bf00      	nop
 8007868:	3754      	adds	r7, #84	@ 0x54
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <__cvt>:
 8007872:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007876:	ec57 6b10 	vmov	r6, r7, d0
 800787a:	2f00      	cmp	r7, #0
 800787c:	460c      	mov	r4, r1
 800787e:	4619      	mov	r1, r3
 8007880:	463b      	mov	r3, r7
 8007882:	bfbb      	ittet	lt
 8007884:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007888:	461f      	movlt	r7, r3
 800788a:	2300      	movge	r3, #0
 800788c:	232d      	movlt	r3, #45	@ 0x2d
 800788e:	700b      	strb	r3, [r1, #0]
 8007890:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007892:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007896:	4691      	mov	r9, r2
 8007898:	f023 0820 	bic.w	r8, r3, #32
 800789c:	bfbc      	itt	lt
 800789e:	4632      	movlt	r2, r6
 80078a0:	4616      	movlt	r6, r2
 80078a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80078a6:	d005      	beq.n	80078b4 <__cvt+0x42>
 80078a8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80078ac:	d100      	bne.n	80078b0 <__cvt+0x3e>
 80078ae:	3401      	adds	r4, #1
 80078b0:	2102      	movs	r1, #2
 80078b2:	e000      	b.n	80078b6 <__cvt+0x44>
 80078b4:	2103      	movs	r1, #3
 80078b6:	ab03      	add	r3, sp, #12
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	ab02      	add	r3, sp, #8
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	ec47 6b10 	vmov	d0, r6, r7
 80078c2:	4653      	mov	r3, sl
 80078c4:	4622      	mov	r2, r4
 80078c6:	f000 fde3 	bl	8008490 <_dtoa_r>
 80078ca:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80078ce:	4605      	mov	r5, r0
 80078d0:	d119      	bne.n	8007906 <__cvt+0x94>
 80078d2:	f019 0f01 	tst.w	r9, #1
 80078d6:	d00e      	beq.n	80078f6 <__cvt+0x84>
 80078d8:	eb00 0904 	add.w	r9, r0, r4
 80078dc:	2200      	movs	r2, #0
 80078de:	2300      	movs	r3, #0
 80078e0:	4630      	mov	r0, r6
 80078e2:	4639      	mov	r1, r7
 80078e4:	f7f9 f8f0 	bl	8000ac8 <__aeabi_dcmpeq>
 80078e8:	b108      	cbz	r0, 80078ee <__cvt+0x7c>
 80078ea:	f8cd 900c 	str.w	r9, [sp, #12]
 80078ee:	2230      	movs	r2, #48	@ 0x30
 80078f0:	9b03      	ldr	r3, [sp, #12]
 80078f2:	454b      	cmp	r3, r9
 80078f4:	d31e      	bcc.n	8007934 <__cvt+0xc2>
 80078f6:	9b03      	ldr	r3, [sp, #12]
 80078f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078fa:	1b5b      	subs	r3, r3, r5
 80078fc:	4628      	mov	r0, r5
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	b004      	add	sp, #16
 8007902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007906:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800790a:	eb00 0904 	add.w	r9, r0, r4
 800790e:	d1e5      	bne.n	80078dc <__cvt+0x6a>
 8007910:	7803      	ldrb	r3, [r0, #0]
 8007912:	2b30      	cmp	r3, #48	@ 0x30
 8007914:	d10a      	bne.n	800792c <__cvt+0xba>
 8007916:	2200      	movs	r2, #0
 8007918:	2300      	movs	r3, #0
 800791a:	4630      	mov	r0, r6
 800791c:	4639      	mov	r1, r7
 800791e:	f7f9 f8d3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007922:	b918      	cbnz	r0, 800792c <__cvt+0xba>
 8007924:	f1c4 0401 	rsb	r4, r4, #1
 8007928:	f8ca 4000 	str.w	r4, [sl]
 800792c:	f8da 3000 	ldr.w	r3, [sl]
 8007930:	4499      	add	r9, r3
 8007932:	e7d3      	b.n	80078dc <__cvt+0x6a>
 8007934:	1c59      	adds	r1, r3, #1
 8007936:	9103      	str	r1, [sp, #12]
 8007938:	701a      	strb	r2, [r3, #0]
 800793a:	e7d9      	b.n	80078f0 <__cvt+0x7e>

0800793c <__exponent>:
 800793c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800793e:	2900      	cmp	r1, #0
 8007940:	bfba      	itte	lt
 8007942:	4249      	neglt	r1, r1
 8007944:	232d      	movlt	r3, #45	@ 0x2d
 8007946:	232b      	movge	r3, #43	@ 0x2b
 8007948:	2909      	cmp	r1, #9
 800794a:	7002      	strb	r2, [r0, #0]
 800794c:	7043      	strb	r3, [r0, #1]
 800794e:	dd29      	ble.n	80079a4 <__exponent+0x68>
 8007950:	f10d 0307 	add.w	r3, sp, #7
 8007954:	461d      	mov	r5, r3
 8007956:	270a      	movs	r7, #10
 8007958:	461a      	mov	r2, r3
 800795a:	fbb1 f6f7 	udiv	r6, r1, r7
 800795e:	fb07 1416 	mls	r4, r7, r6, r1
 8007962:	3430      	adds	r4, #48	@ 0x30
 8007964:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007968:	460c      	mov	r4, r1
 800796a:	2c63      	cmp	r4, #99	@ 0x63
 800796c:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007970:	4631      	mov	r1, r6
 8007972:	dcf1      	bgt.n	8007958 <__exponent+0x1c>
 8007974:	3130      	adds	r1, #48	@ 0x30
 8007976:	1e94      	subs	r4, r2, #2
 8007978:	f803 1c01 	strb.w	r1, [r3, #-1]
 800797c:	1c41      	adds	r1, r0, #1
 800797e:	4623      	mov	r3, r4
 8007980:	42ab      	cmp	r3, r5
 8007982:	d30a      	bcc.n	800799a <__exponent+0x5e>
 8007984:	f10d 0309 	add.w	r3, sp, #9
 8007988:	1a9b      	subs	r3, r3, r2
 800798a:	42ac      	cmp	r4, r5
 800798c:	bf88      	it	hi
 800798e:	2300      	movhi	r3, #0
 8007990:	3302      	adds	r3, #2
 8007992:	4403      	add	r3, r0
 8007994:	1a18      	subs	r0, r3, r0
 8007996:	b003      	add	sp, #12
 8007998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800799a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800799e:	f801 6f01 	strb.w	r6, [r1, #1]!
 80079a2:	e7ed      	b.n	8007980 <__exponent+0x44>
 80079a4:	2330      	movs	r3, #48	@ 0x30
 80079a6:	3130      	adds	r1, #48	@ 0x30
 80079a8:	7083      	strb	r3, [r0, #2]
 80079aa:	70c1      	strb	r1, [r0, #3]
 80079ac:	1d03      	adds	r3, r0, #4
 80079ae:	e7f1      	b.n	8007994 <__exponent+0x58>

080079b0 <_printf_float>:
 80079b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b4:	b08d      	sub	sp, #52	@ 0x34
 80079b6:	460c      	mov	r4, r1
 80079b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80079bc:	4616      	mov	r6, r2
 80079be:	461f      	mov	r7, r3
 80079c0:	4605      	mov	r5, r0
 80079c2:	f000 fcd9 	bl	8008378 <_localeconv_r>
 80079c6:	6803      	ldr	r3, [r0, #0]
 80079c8:	9304      	str	r3, [sp, #16]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7f8 fc50 	bl	8000270 <strlen>
 80079d0:	2300      	movs	r3, #0
 80079d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80079d4:	f8d8 3000 	ldr.w	r3, [r8]
 80079d8:	9005      	str	r0, [sp, #20]
 80079da:	3307      	adds	r3, #7
 80079dc:	f023 0307 	bic.w	r3, r3, #7
 80079e0:	f103 0208 	add.w	r2, r3, #8
 80079e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80079e8:	f8d4 b000 	ldr.w	fp, [r4]
 80079ec:	f8c8 2000 	str.w	r2, [r8]
 80079f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80079f8:	9307      	str	r3, [sp, #28]
 80079fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80079fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007a02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a06:	4b9c      	ldr	r3, [pc, #624]	@ (8007c78 <_printf_float+0x2c8>)
 8007a08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a0c:	f7f9 f88e 	bl	8000b2c <__aeabi_dcmpun>
 8007a10:	bb70      	cbnz	r0, 8007a70 <_printf_float+0xc0>
 8007a12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a16:	4b98      	ldr	r3, [pc, #608]	@ (8007c78 <_printf_float+0x2c8>)
 8007a18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a1c:	f7f9 f868 	bl	8000af0 <__aeabi_dcmple>
 8007a20:	bb30      	cbnz	r0, 8007a70 <_printf_float+0xc0>
 8007a22:	2200      	movs	r2, #0
 8007a24:	2300      	movs	r3, #0
 8007a26:	4640      	mov	r0, r8
 8007a28:	4649      	mov	r1, r9
 8007a2a:	f7f9 f857 	bl	8000adc <__aeabi_dcmplt>
 8007a2e:	b110      	cbz	r0, 8007a36 <_printf_float+0x86>
 8007a30:	232d      	movs	r3, #45	@ 0x2d
 8007a32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a36:	4a91      	ldr	r2, [pc, #580]	@ (8007c7c <_printf_float+0x2cc>)
 8007a38:	4b91      	ldr	r3, [pc, #580]	@ (8007c80 <_printf_float+0x2d0>)
 8007a3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007a3e:	bf8c      	ite	hi
 8007a40:	4690      	movhi	r8, r2
 8007a42:	4698      	movls	r8, r3
 8007a44:	2303      	movs	r3, #3
 8007a46:	6123      	str	r3, [r4, #16]
 8007a48:	f02b 0304 	bic.w	r3, fp, #4
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	f04f 0900 	mov.w	r9, #0
 8007a52:	9700      	str	r7, [sp, #0]
 8007a54:	4633      	mov	r3, r6
 8007a56:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007a58:	4621      	mov	r1, r4
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	f000 f9d2 	bl	8007e04 <_printf_common>
 8007a60:	3001      	adds	r0, #1
 8007a62:	f040 808d 	bne.w	8007b80 <_printf_float+0x1d0>
 8007a66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a6a:	b00d      	add	sp, #52	@ 0x34
 8007a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a70:	4642      	mov	r2, r8
 8007a72:	464b      	mov	r3, r9
 8007a74:	4640      	mov	r0, r8
 8007a76:	4649      	mov	r1, r9
 8007a78:	f7f9 f858 	bl	8000b2c <__aeabi_dcmpun>
 8007a7c:	b140      	cbz	r0, 8007a90 <_printf_float+0xe0>
 8007a7e:	464b      	mov	r3, r9
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	bfbc      	itt	lt
 8007a84:	232d      	movlt	r3, #45	@ 0x2d
 8007a86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007a8a:	4a7e      	ldr	r2, [pc, #504]	@ (8007c84 <_printf_float+0x2d4>)
 8007a8c:	4b7e      	ldr	r3, [pc, #504]	@ (8007c88 <_printf_float+0x2d8>)
 8007a8e:	e7d4      	b.n	8007a3a <_printf_float+0x8a>
 8007a90:	6863      	ldr	r3, [r4, #4]
 8007a92:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007a96:	9206      	str	r2, [sp, #24]
 8007a98:	1c5a      	adds	r2, r3, #1
 8007a9a:	d13b      	bne.n	8007b14 <_printf_float+0x164>
 8007a9c:	2306      	movs	r3, #6
 8007a9e:	6063      	str	r3, [r4, #4]
 8007aa0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	6022      	str	r2, [r4, #0]
 8007aa8:	9303      	str	r3, [sp, #12]
 8007aaa:	ab0a      	add	r3, sp, #40	@ 0x28
 8007aac:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007ab0:	ab09      	add	r3, sp, #36	@ 0x24
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	6861      	ldr	r1, [r4, #4]
 8007ab6:	ec49 8b10 	vmov	d0, r8, r9
 8007aba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f7ff fed7 	bl	8007872 <__cvt>
 8007ac4:	9b06      	ldr	r3, [sp, #24]
 8007ac6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ac8:	2b47      	cmp	r3, #71	@ 0x47
 8007aca:	4680      	mov	r8, r0
 8007acc:	d129      	bne.n	8007b22 <_printf_float+0x172>
 8007ace:	1cc8      	adds	r0, r1, #3
 8007ad0:	db02      	blt.n	8007ad8 <_printf_float+0x128>
 8007ad2:	6863      	ldr	r3, [r4, #4]
 8007ad4:	4299      	cmp	r1, r3
 8007ad6:	dd41      	ble.n	8007b5c <_printf_float+0x1ac>
 8007ad8:	f1aa 0a02 	sub.w	sl, sl, #2
 8007adc:	fa5f fa8a 	uxtb.w	sl, sl
 8007ae0:	3901      	subs	r1, #1
 8007ae2:	4652      	mov	r2, sl
 8007ae4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ae8:	9109      	str	r1, [sp, #36]	@ 0x24
 8007aea:	f7ff ff27 	bl	800793c <__exponent>
 8007aee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007af0:	1813      	adds	r3, r2, r0
 8007af2:	2a01      	cmp	r2, #1
 8007af4:	4681      	mov	r9, r0
 8007af6:	6123      	str	r3, [r4, #16]
 8007af8:	dc02      	bgt.n	8007b00 <_printf_float+0x150>
 8007afa:	6822      	ldr	r2, [r4, #0]
 8007afc:	07d2      	lsls	r2, r2, #31
 8007afe:	d501      	bpl.n	8007b04 <_printf_float+0x154>
 8007b00:	3301      	adds	r3, #1
 8007b02:	6123      	str	r3, [r4, #16]
 8007b04:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d0a2      	beq.n	8007a52 <_printf_float+0xa2>
 8007b0c:	232d      	movs	r3, #45	@ 0x2d
 8007b0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b12:	e79e      	b.n	8007a52 <_printf_float+0xa2>
 8007b14:	9a06      	ldr	r2, [sp, #24]
 8007b16:	2a47      	cmp	r2, #71	@ 0x47
 8007b18:	d1c2      	bne.n	8007aa0 <_printf_float+0xf0>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1c0      	bne.n	8007aa0 <_printf_float+0xf0>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e7bd      	b.n	8007a9e <_printf_float+0xee>
 8007b22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b26:	d9db      	bls.n	8007ae0 <_printf_float+0x130>
 8007b28:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007b2c:	d118      	bne.n	8007b60 <_printf_float+0x1b0>
 8007b2e:	2900      	cmp	r1, #0
 8007b30:	6863      	ldr	r3, [r4, #4]
 8007b32:	dd0b      	ble.n	8007b4c <_printf_float+0x19c>
 8007b34:	6121      	str	r1, [r4, #16]
 8007b36:	b913      	cbnz	r3, 8007b3e <_printf_float+0x18e>
 8007b38:	6822      	ldr	r2, [r4, #0]
 8007b3a:	07d0      	lsls	r0, r2, #31
 8007b3c:	d502      	bpl.n	8007b44 <_printf_float+0x194>
 8007b3e:	3301      	adds	r3, #1
 8007b40:	440b      	add	r3, r1
 8007b42:	6123      	str	r3, [r4, #16]
 8007b44:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007b46:	f04f 0900 	mov.w	r9, #0
 8007b4a:	e7db      	b.n	8007b04 <_printf_float+0x154>
 8007b4c:	b913      	cbnz	r3, 8007b54 <_printf_float+0x1a4>
 8007b4e:	6822      	ldr	r2, [r4, #0]
 8007b50:	07d2      	lsls	r2, r2, #31
 8007b52:	d501      	bpl.n	8007b58 <_printf_float+0x1a8>
 8007b54:	3302      	adds	r3, #2
 8007b56:	e7f4      	b.n	8007b42 <_printf_float+0x192>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e7f2      	b.n	8007b42 <_printf_float+0x192>
 8007b5c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007b60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b62:	4299      	cmp	r1, r3
 8007b64:	db05      	blt.n	8007b72 <_printf_float+0x1c2>
 8007b66:	6823      	ldr	r3, [r4, #0]
 8007b68:	6121      	str	r1, [r4, #16]
 8007b6a:	07d8      	lsls	r0, r3, #31
 8007b6c:	d5ea      	bpl.n	8007b44 <_printf_float+0x194>
 8007b6e:	1c4b      	adds	r3, r1, #1
 8007b70:	e7e7      	b.n	8007b42 <_printf_float+0x192>
 8007b72:	2900      	cmp	r1, #0
 8007b74:	bfd4      	ite	le
 8007b76:	f1c1 0202 	rsble	r2, r1, #2
 8007b7a:	2201      	movgt	r2, #1
 8007b7c:	4413      	add	r3, r2
 8007b7e:	e7e0      	b.n	8007b42 <_printf_float+0x192>
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	055a      	lsls	r2, r3, #21
 8007b84:	d407      	bmi.n	8007b96 <_printf_float+0x1e6>
 8007b86:	6923      	ldr	r3, [r4, #16]
 8007b88:	4642      	mov	r2, r8
 8007b8a:	4631      	mov	r1, r6
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	47b8      	blx	r7
 8007b90:	3001      	adds	r0, #1
 8007b92:	d12b      	bne.n	8007bec <_printf_float+0x23c>
 8007b94:	e767      	b.n	8007a66 <_printf_float+0xb6>
 8007b96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b9a:	f240 80dd 	bls.w	8007d58 <_printf_float+0x3a8>
 8007b9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	f7f8 ff8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d033      	beq.n	8007c16 <_printf_float+0x266>
 8007bae:	4a37      	ldr	r2, [pc, #220]	@ (8007c8c <_printf_float+0x2dc>)
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	47b8      	blx	r7
 8007bb8:	3001      	adds	r0, #1
 8007bba:	f43f af54 	beq.w	8007a66 <_printf_float+0xb6>
 8007bbe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007bc2:	4543      	cmp	r3, r8
 8007bc4:	db02      	blt.n	8007bcc <_printf_float+0x21c>
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	07d8      	lsls	r0, r3, #31
 8007bca:	d50f      	bpl.n	8007bec <_printf_float+0x23c>
 8007bcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	47b8      	blx	r7
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	f43f af45 	beq.w	8007a66 <_printf_float+0xb6>
 8007bdc:	f04f 0900 	mov.w	r9, #0
 8007be0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007be4:	f104 0a1a 	add.w	sl, r4, #26
 8007be8:	45c8      	cmp	r8, r9
 8007bea:	dc09      	bgt.n	8007c00 <_printf_float+0x250>
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	079b      	lsls	r3, r3, #30
 8007bf0:	f100 8103 	bmi.w	8007dfa <_printf_float+0x44a>
 8007bf4:	68e0      	ldr	r0, [r4, #12]
 8007bf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bf8:	4298      	cmp	r0, r3
 8007bfa:	bfb8      	it	lt
 8007bfc:	4618      	movlt	r0, r3
 8007bfe:	e734      	b.n	8007a6a <_printf_float+0xba>
 8007c00:	2301      	movs	r3, #1
 8007c02:	4652      	mov	r2, sl
 8007c04:	4631      	mov	r1, r6
 8007c06:	4628      	mov	r0, r5
 8007c08:	47b8      	blx	r7
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	f43f af2b 	beq.w	8007a66 <_printf_float+0xb6>
 8007c10:	f109 0901 	add.w	r9, r9, #1
 8007c14:	e7e8      	b.n	8007be8 <_printf_float+0x238>
 8007c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	dc39      	bgt.n	8007c90 <_printf_float+0x2e0>
 8007c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8007c8c <_printf_float+0x2dc>)
 8007c1e:	2301      	movs	r3, #1
 8007c20:	4631      	mov	r1, r6
 8007c22:	4628      	mov	r0, r5
 8007c24:	47b8      	blx	r7
 8007c26:	3001      	adds	r0, #1
 8007c28:	f43f af1d 	beq.w	8007a66 <_printf_float+0xb6>
 8007c2c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007c30:	ea59 0303 	orrs.w	r3, r9, r3
 8007c34:	d102      	bne.n	8007c3c <_printf_float+0x28c>
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	07d9      	lsls	r1, r3, #31
 8007c3a:	d5d7      	bpl.n	8007bec <_printf_float+0x23c>
 8007c3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c40:	4631      	mov	r1, r6
 8007c42:	4628      	mov	r0, r5
 8007c44:	47b8      	blx	r7
 8007c46:	3001      	adds	r0, #1
 8007c48:	f43f af0d 	beq.w	8007a66 <_printf_float+0xb6>
 8007c4c:	f04f 0a00 	mov.w	sl, #0
 8007c50:	f104 0b1a 	add.w	fp, r4, #26
 8007c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c56:	425b      	negs	r3, r3
 8007c58:	4553      	cmp	r3, sl
 8007c5a:	dc01      	bgt.n	8007c60 <_printf_float+0x2b0>
 8007c5c:	464b      	mov	r3, r9
 8007c5e:	e793      	b.n	8007b88 <_printf_float+0x1d8>
 8007c60:	2301      	movs	r3, #1
 8007c62:	465a      	mov	r2, fp
 8007c64:	4631      	mov	r1, r6
 8007c66:	4628      	mov	r0, r5
 8007c68:	47b8      	blx	r7
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	f43f aefb 	beq.w	8007a66 <_printf_float+0xb6>
 8007c70:	f10a 0a01 	add.w	sl, sl, #1
 8007c74:	e7ee      	b.n	8007c54 <_printf_float+0x2a4>
 8007c76:	bf00      	nop
 8007c78:	7fefffff 	.word	0x7fefffff
 8007c7c:	0800a5b4 	.word	0x0800a5b4
 8007c80:	0800a5b0 	.word	0x0800a5b0
 8007c84:	0800a5bc 	.word	0x0800a5bc
 8007c88:	0800a5b8 	.word	0x0800a5b8
 8007c8c:	0800a5c0 	.word	0x0800a5c0
 8007c90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c92:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c96:	4553      	cmp	r3, sl
 8007c98:	bfa8      	it	ge
 8007c9a:	4653      	movge	r3, sl
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	4699      	mov	r9, r3
 8007ca0:	dc36      	bgt.n	8007d10 <_printf_float+0x360>
 8007ca2:	f04f 0b00 	mov.w	fp, #0
 8007ca6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007caa:	f104 021a 	add.w	r2, r4, #26
 8007cae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007cb0:	9306      	str	r3, [sp, #24]
 8007cb2:	eba3 0309 	sub.w	r3, r3, r9
 8007cb6:	455b      	cmp	r3, fp
 8007cb8:	dc31      	bgt.n	8007d1e <_printf_float+0x36e>
 8007cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cbc:	459a      	cmp	sl, r3
 8007cbe:	dc3a      	bgt.n	8007d36 <_printf_float+0x386>
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	07da      	lsls	r2, r3, #31
 8007cc4:	d437      	bmi.n	8007d36 <_printf_float+0x386>
 8007cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc8:	ebaa 0903 	sub.w	r9, sl, r3
 8007ccc:	9b06      	ldr	r3, [sp, #24]
 8007cce:	ebaa 0303 	sub.w	r3, sl, r3
 8007cd2:	4599      	cmp	r9, r3
 8007cd4:	bfa8      	it	ge
 8007cd6:	4699      	movge	r9, r3
 8007cd8:	f1b9 0f00 	cmp.w	r9, #0
 8007cdc:	dc33      	bgt.n	8007d46 <_printf_float+0x396>
 8007cde:	f04f 0800 	mov.w	r8, #0
 8007ce2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ce6:	f104 0b1a 	add.w	fp, r4, #26
 8007cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cec:	ebaa 0303 	sub.w	r3, sl, r3
 8007cf0:	eba3 0309 	sub.w	r3, r3, r9
 8007cf4:	4543      	cmp	r3, r8
 8007cf6:	f77f af79 	ble.w	8007bec <_printf_float+0x23c>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	465a      	mov	r2, fp
 8007cfe:	4631      	mov	r1, r6
 8007d00:	4628      	mov	r0, r5
 8007d02:	47b8      	blx	r7
 8007d04:	3001      	adds	r0, #1
 8007d06:	f43f aeae 	beq.w	8007a66 <_printf_float+0xb6>
 8007d0a:	f108 0801 	add.w	r8, r8, #1
 8007d0e:	e7ec      	b.n	8007cea <_printf_float+0x33a>
 8007d10:	4642      	mov	r2, r8
 8007d12:	4631      	mov	r1, r6
 8007d14:	4628      	mov	r0, r5
 8007d16:	47b8      	blx	r7
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d1c2      	bne.n	8007ca2 <_printf_float+0x2f2>
 8007d1c:	e6a3      	b.n	8007a66 <_printf_float+0xb6>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	4631      	mov	r1, r6
 8007d22:	4628      	mov	r0, r5
 8007d24:	9206      	str	r2, [sp, #24]
 8007d26:	47b8      	blx	r7
 8007d28:	3001      	adds	r0, #1
 8007d2a:	f43f ae9c 	beq.w	8007a66 <_printf_float+0xb6>
 8007d2e:	9a06      	ldr	r2, [sp, #24]
 8007d30:	f10b 0b01 	add.w	fp, fp, #1
 8007d34:	e7bb      	b.n	8007cae <_printf_float+0x2fe>
 8007d36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	47b8      	blx	r7
 8007d40:	3001      	adds	r0, #1
 8007d42:	d1c0      	bne.n	8007cc6 <_printf_float+0x316>
 8007d44:	e68f      	b.n	8007a66 <_printf_float+0xb6>
 8007d46:	9a06      	ldr	r2, [sp, #24]
 8007d48:	464b      	mov	r3, r9
 8007d4a:	4442      	add	r2, r8
 8007d4c:	4631      	mov	r1, r6
 8007d4e:	4628      	mov	r0, r5
 8007d50:	47b8      	blx	r7
 8007d52:	3001      	adds	r0, #1
 8007d54:	d1c3      	bne.n	8007cde <_printf_float+0x32e>
 8007d56:	e686      	b.n	8007a66 <_printf_float+0xb6>
 8007d58:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d5c:	f1ba 0f01 	cmp.w	sl, #1
 8007d60:	dc01      	bgt.n	8007d66 <_printf_float+0x3b6>
 8007d62:	07db      	lsls	r3, r3, #31
 8007d64:	d536      	bpl.n	8007dd4 <_printf_float+0x424>
 8007d66:	2301      	movs	r3, #1
 8007d68:	4642      	mov	r2, r8
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b8      	blx	r7
 8007d70:	3001      	adds	r0, #1
 8007d72:	f43f ae78 	beq.w	8007a66 <_printf_float+0xb6>
 8007d76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d7a:	4631      	mov	r1, r6
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	47b8      	blx	r7
 8007d80:	3001      	adds	r0, #1
 8007d82:	f43f ae70 	beq.w	8007a66 <_printf_float+0xb6>
 8007d86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007d92:	f7f8 fe99 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d96:	b9c0      	cbnz	r0, 8007dca <_printf_float+0x41a>
 8007d98:	4653      	mov	r3, sl
 8007d9a:	f108 0201 	add.w	r2, r8, #1
 8007d9e:	4631      	mov	r1, r6
 8007da0:	4628      	mov	r0, r5
 8007da2:	47b8      	blx	r7
 8007da4:	3001      	adds	r0, #1
 8007da6:	d10c      	bne.n	8007dc2 <_printf_float+0x412>
 8007da8:	e65d      	b.n	8007a66 <_printf_float+0xb6>
 8007daa:	2301      	movs	r3, #1
 8007dac:	465a      	mov	r2, fp
 8007dae:	4631      	mov	r1, r6
 8007db0:	4628      	mov	r0, r5
 8007db2:	47b8      	blx	r7
 8007db4:	3001      	adds	r0, #1
 8007db6:	f43f ae56 	beq.w	8007a66 <_printf_float+0xb6>
 8007dba:	f108 0801 	add.w	r8, r8, #1
 8007dbe:	45d0      	cmp	r8, sl
 8007dc0:	dbf3      	blt.n	8007daa <_printf_float+0x3fa>
 8007dc2:	464b      	mov	r3, r9
 8007dc4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007dc8:	e6df      	b.n	8007b8a <_printf_float+0x1da>
 8007dca:	f04f 0800 	mov.w	r8, #0
 8007dce:	f104 0b1a 	add.w	fp, r4, #26
 8007dd2:	e7f4      	b.n	8007dbe <_printf_float+0x40e>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	4642      	mov	r2, r8
 8007dd8:	e7e1      	b.n	8007d9e <_printf_float+0x3ee>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	464a      	mov	r2, r9
 8007dde:	4631      	mov	r1, r6
 8007de0:	4628      	mov	r0, r5
 8007de2:	47b8      	blx	r7
 8007de4:	3001      	adds	r0, #1
 8007de6:	f43f ae3e 	beq.w	8007a66 <_printf_float+0xb6>
 8007dea:	f108 0801 	add.w	r8, r8, #1
 8007dee:	68e3      	ldr	r3, [r4, #12]
 8007df0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007df2:	1a5b      	subs	r3, r3, r1
 8007df4:	4543      	cmp	r3, r8
 8007df6:	dcf0      	bgt.n	8007dda <_printf_float+0x42a>
 8007df8:	e6fc      	b.n	8007bf4 <_printf_float+0x244>
 8007dfa:	f04f 0800 	mov.w	r8, #0
 8007dfe:	f104 0919 	add.w	r9, r4, #25
 8007e02:	e7f4      	b.n	8007dee <_printf_float+0x43e>

08007e04 <_printf_common>:
 8007e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e08:	4616      	mov	r6, r2
 8007e0a:	4698      	mov	r8, r3
 8007e0c:	688a      	ldr	r2, [r1, #8]
 8007e0e:	690b      	ldr	r3, [r1, #16]
 8007e10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e14:	4293      	cmp	r3, r2
 8007e16:	bfb8      	it	lt
 8007e18:	4613      	movlt	r3, r2
 8007e1a:	6033      	str	r3, [r6, #0]
 8007e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e20:	4607      	mov	r7, r0
 8007e22:	460c      	mov	r4, r1
 8007e24:	b10a      	cbz	r2, 8007e2a <_printf_common+0x26>
 8007e26:	3301      	adds	r3, #1
 8007e28:	6033      	str	r3, [r6, #0]
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	0699      	lsls	r1, r3, #26
 8007e2e:	bf42      	ittt	mi
 8007e30:	6833      	ldrmi	r3, [r6, #0]
 8007e32:	3302      	addmi	r3, #2
 8007e34:	6033      	strmi	r3, [r6, #0]
 8007e36:	6825      	ldr	r5, [r4, #0]
 8007e38:	f015 0506 	ands.w	r5, r5, #6
 8007e3c:	d106      	bne.n	8007e4c <_printf_common+0x48>
 8007e3e:	f104 0a19 	add.w	sl, r4, #25
 8007e42:	68e3      	ldr	r3, [r4, #12]
 8007e44:	6832      	ldr	r2, [r6, #0]
 8007e46:	1a9b      	subs	r3, r3, r2
 8007e48:	42ab      	cmp	r3, r5
 8007e4a:	dc26      	bgt.n	8007e9a <_printf_common+0x96>
 8007e4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e50:	6822      	ldr	r2, [r4, #0]
 8007e52:	3b00      	subs	r3, #0
 8007e54:	bf18      	it	ne
 8007e56:	2301      	movne	r3, #1
 8007e58:	0692      	lsls	r2, r2, #26
 8007e5a:	d42b      	bmi.n	8007eb4 <_printf_common+0xb0>
 8007e5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e60:	4641      	mov	r1, r8
 8007e62:	4638      	mov	r0, r7
 8007e64:	47c8      	blx	r9
 8007e66:	3001      	adds	r0, #1
 8007e68:	d01e      	beq.n	8007ea8 <_printf_common+0xa4>
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	6922      	ldr	r2, [r4, #16]
 8007e6e:	f003 0306 	and.w	r3, r3, #6
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	bf02      	ittt	eq
 8007e76:	68e5      	ldreq	r5, [r4, #12]
 8007e78:	6833      	ldreq	r3, [r6, #0]
 8007e7a:	1aed      	subeq	r5, r5, r3
 8007e7c:	68a3      	ldr	r3, [r4, #8]
 8007e7e:	bf0c      	ite	eq
 8007e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e84:	2500      	movne	r5, #0
 8007e86:	4293      	cmp	r3, r2
 8007e88:	bfc4      	itt	gt
 8007e8a:	1a9b      	subgt	r3, r3, r2
 8007e8c:	18ed      	addgt	r5, r5, r3
 8007e8e:	2600      	movs	r6, #0
 8007e90:	341a      	adds	r4, #26
 8007e92:	42b5      	cmp	r5, r6
 8007e94:	d11a      	bne.n	8007ecc <_printf_common+0xc8>
 8007e96:	2000      	movs	r0, #0
 8007e98:	e008      	b.n	8007eac <_printf_common+0xa8>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	4652      	mov	r2, sl
 8007e9e:	4641      	mov	r1, r8
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	47c8      	blx	r9
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d103      	bne.n	8007eb0 <_printf_common+0xac>
 8007ea8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb0:	3501      	adds	r5, #1
 8007eb2:	e7c6      	b.n	8007e42 <_printf_common+0x3e>
 8007eb4:	18e1      	adds	r1, r4, r3
 8007eb6:	1c5a      	adds	r2, r3, #1
 8007eb8:	2030      	movs	r0, #48	@ 0x30
 8007eba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ebe:	4422      	add	r2, r4
 8007ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ec4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ec8:	3302      	adds	r3, #2
 8007eca:	e7c7      	b.n	8007e5c <_printf_common+0x58>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	4622      	mov	r2, r4
 8007ed0:	4641      	mov	r1, r8
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	47c8      	blx	r9
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	d0e6      	beq.n	8007ea8 <_printf_common+0xa4>
 8007eda:	3601      	adds	r6, #1
 8007edc:	e7d9      	b.n	8007e92 <_printf_common+0x8e>
	...

08007ee0 <_printf_i>:
 8007ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee4:	7e0f      	ldrb	r7, [r1, #24]
 8007ee6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ee8:	2f78      	cmp	r7, #120	@ 0x78
 8007eea:	4691      	mov	r9, r2
 8007eec:	4680      	mov	r8, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	469a      	mov	sl, r3
 8007ef2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ef6:	d807      	bhi.n	8007f08 <_printf_i+0x28>
 8007ef8:	2f62      	cmp	r7, #98	@ 0x62
 8007efa:	d80a      	bhi.n	8007f12 <_printf_i+0x32>
 8007efc:	2f00      	cmp	r7, #0
 8007efe:	f000 80d1 	beq.w	80080a4 <_printf_i+0x1c4>
 8007f02:	2f58      	cmp	r7, #88	@ 0x58
 8007f04:	f000 80b8 	beq.w	8008078 <_printf_i+0x198>
 8007f08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f10:	e03a      	b.n	8007f88 <_printf_i+0xa8>
 8007f12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f16:	2b15      	cmp	r3, #21
 8007f18:	d8f6      	bhi.n	8007f08 <_printf_i+0x28>
 8007f1a:	a101      	add	r1, pc, #4	@ (adr r1, 8007f20 <_printf_i+0x40>)
 8007f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f20:	08007f79 	.word	0x08007f79
 8007f24:	08007f8d 	.word	0x08007f8d
 8007f28:	08007f09 	.word	0x08007f09
 8007f2c:	08007f09 	.word	0x08007f09
 8007f30:	08007f09 	.word	0x08007f09
 8007f34:	08007f09 	.word	0x08007f09
 8007f38:	08007f8d 	.word	0x08007f8d
 8007f3c:	08007f09 	.word	0x08007f09
 8007f40:	08007f09 	.word	0x08007f09
 8007f44:	08007f09 	.word	0x08007f09
 8007f48:	08007f09 	.word	0x08007f09
 8007f4c:	0800808b 	.word	0x0800808b
 8007f50:	08007fb7 	.word	0x08007fb7
 8007f54:	08008045 	.word	0x08008045
 8007f58:	08007f09 	.word	0x08007f09
 8007f5c:	08007f09 	.word	0x08007f09
 8007f60:	080080ad 	.word	0x080080ad
 8007f64:	08007f09 	.word	0x08007f09
 8007f68:	08007fb7 	.word	0x08007fb7
 8007f6c:	08007f09 	.word	0x08007f09
 8007f70:	08007f09 	.word	0x08007f09
 8007f74:	0800804d 	.word	0x0800804d
 8007f78:	6833      	ldr	r3, [r6, #0]
 8007f7a:	1d1a      	adds	r2, r3, #4
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	6032      	str	r2, [r6, #0]
 8007f80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e09c      	b.n	80080c6 <_printf_i+0x1e6>
 8007f8c:	6833      	ldr	r3, [r6, #0]
 8007f8e:	6820      	ldr	r0, [r4, #0]
 8007f90:	1d19      	adds	r1, r3, #4
 8007f92:	6031      	str	r1, [r6, #0]
 8007f94:	0606      	lsls	r6, r0, #24
 8007f96:	d501      	bpl.n	8007f9c <_printf_i+0xbc>
 8007f98:	681d      	ldr	r5, [r3, #0]
 8007f9a:	e003      	b.n	8007fa4 <_printf_i+0xc4>
 8007f9c:	0645      	lsls	r5, r0, #25
 8007f9e:	d5fb      	bpl.n	8007f98 <_printf_i+0xb8>
 8007fa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007fa4:	2d00      	cmp	r5, #0
 8007fa6:	da03      	bge.n	8007fb0 <_printf_i+0xd0>
 8007fa8:	232d      	movs	r3, #45	@ 0x2d
 8007faa:	426d      	negs	r5, r5
 8007fac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fb0:	4858      	ldr	r0, [pc, #352]	@ (8008114 <_printf_i+0x234>)
 8007fb2:	230a      	movs	r3, #10
 8007fb4:	e011      	b.n	8007fda <_printf_i+0xfa>
 8007fb6:	6821      	ldr	r1, [r4, #0]
 8007fb8:	6833      	ldr	r3, [r6, #0]
 8007fba:	0608      	lsls	r0, r1, #24
 8007fbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007fc0:	d402      	bmi.n	8007fc8 <_printf_i+0xe8>
 8007fc2:	0649      	lsls	r1, r1, #25
 8007fc4:	bf48      	it	mi
 8007fc6:	b2ad      	uxthmi	r5, r5
 8007fc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007fca:	4852      	ldr	r0, [pc, #328]	@ (8008114 <_printf_i+0x234>)
 8007fcc:	6033      	str	r3, [r6, #0]
 8007fce:	bf14      	ite	ne
 8007fd0:	230a      	movne	r3, #10
 8007fd2:	2308      	moveq	r3, #8
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fda:	6866      	ldr	r6, [r4, #4]
 8007fdc:	60a6      	str	r6, [r4, #8]
 8007fde:	2e00      	cmp	r6, #0
 8007fe0:	db05      	blt.n	8007fee <_printf_i+0x10e>
 8007fe2:	6821      	ldr	r1, [r4, #0]
 8007fe4:	432e      	orrs	r6, r5
 8007fe6:	f021 0104 	bic.w	r1, r1, #4
 8007fea:	6021      	str	r1, [r4, #0]
 8007fec:	d04b      	beq.n	8008086 <_printf_i+0x1a6>
 8007fee:	4616      	mov	r6, r2
 8007ff0:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ff4:	fb03 5711 	mls	r7, r3, r1, r5
 8007ff8:	5dc7      	ldrb	r7, [r0, r7]
 8007ffa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ffe:	462f      	mov	r7, r5
 8008000:	42bb      	cmp	r3, r7
 8008002:	460d      	mov	r5, r1
 8008004:	d9f4      	bls.n	8007ff0 <_printf_i+0x110>
 8008006:	2b08      	cmp	r3, #8
 8008008:	d10b      	bne.n	8008022 <_printf_i+0x142>
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	07df      	lsls	r7, r3, #31
 800800e:	d508      	bpl.n	8008022 <_printf_i+0x142>
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	6861      	ldr	r1, [r4, #4]
 8008014:	4299      	cmp	r1, r3
 8008016:	bfde      	ittt	le
 8008018:	2330      	movle	r3, #48	@ 0x30
 800801a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800801e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008022:	1b92      	subs	r2, r2, r6
 8008024:	6122      	str	r2, [r4, #16]
 8008026:	f8cd a000 	str.w	sl, [sp]
 800802a:	464b      	mov	r3, r9
 800802c:	aa03      	add	r2, sp, #12
 800802e:	4621      	mov	r1, r4
 8008030:	4640      	mov	r0, r8
 8008032:	f7ff fee7 	bl	8007e04 <_printf_common>
 8008036:	3001      	adds	r0, #1
 8008038:	d14a      	bne.n	80080d0 <_printf_i+0x1f0>
 800803a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800803e:	b004      	add	sp, #16
 8008040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	f043 0320 	orr.w	r3, r3, #32
 800804a:	6023      	str	r3, [r4, #0]
 800804c:	4832      	ldr	r0, [pc, #200]	@ (8008118 <_printf_i+0x238>)
 800804e:	2778      	movs	r7, #120	@ 0x78
 8008050:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	6831      	ldr	r1, [r6, #0]
 8008058:	061f      	lsls	r7, r3, #24
 800805a:	f851 5b04 	ldr.w	r5, [r1], #4
 800805e:	d402      	bmi.n	8008066 <_printf_i+0x186>
 8008060:	065f      	lsls	r7, r3, #25
 8008062:	bf48      	it	mi
 8008064:	b2ad      	uxthmi	r5, r5
 8008066:	6031      	str	r1, [r6, #0]
 8008068:	07d9      	lsls	r1, r3, #31
 800806a:	bf44      	itt	mi
 800806c:	f043 0320 	orrmi.w	r3, r3, #32
 8008070:	6023      	strmi	r3, [r4, #0]
 8008072:	b11d      	cbz	r5, 800807c <_printf_i+0x19c>
 8008074:	2310      	movs	r3, #16
 8008076:	e7ad      	b.n	8007fd4 <_printf_i+0xf4>
 8008078:	4826      	ldr	r0, [pc, #152]	@ (8008114 <_printf_i+0x234>)
 800807a:	e7e9      	b.n	8008050 <_printf_i+0x170>
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	f023 0320 	bic.w	r3, r3, #32
 8008082:	6023      	str	r3, [r4, #0]
 8008084:	e7f6      	b.n	8008074 <_printf_i+0x194>
 8008086:	4616      	mov	r6, r2
 8008088:	e7bd      	b.n	8008006 <_printf_i+0x126>
 800808a:	6833      	ldr	r3, [r6, #0]
 800808c:	6825      	ldr	r5, [r4, #0]
 800808e:	6961      	ldr	r1, [r4, #20]
 8008090:	1d18      	adds	r0, r3, #4
 8008092:	6030      	str	r0, [r6, #0]
 8008094:	062e      	lsls	r6, r5, #24
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	d501      	bpl.n	800809e <_printf_i+0x1be>
 800809a:	6019      	str	r1, [r3, #0]
 800809c:	e002      	b.n	80080a4 <_printf_i+0x1c4>
 800809e:	0668      	lsls	r0, r5, #25
 80080a0:	d5fb      	bpl.n	800809a <_printf_i+0x1ba>
 80080a2:	8019      	strh	r1, [r3, #0]
 80080a4:	2300      	movs	r3, #0
 80080a6:	6123      	str	r3, [r4, #16]
 80080a8:	4616      	mov	r6, r2
 80080aa:	e7bc      	b.n	8008026 <_printf_i+0x146>
 80080ac:	6833      	ldr	r3, [r6, #0]
 80080ae:	1d1a      	adds	r2, r3, #4
 80080b0:	6032      	str	r2, [r6, #0]
 80080b2:	681e      	ldr	r6, [r3, #0]
 80080b4:	6862      	ldr	r2, [r4, #4]
 80080b6:	2100      	movs	r1, #0
 80080b8:	4630      	mov	r0, r6
 80080ba:	f7f8 f889 	bl	80001d0 <memchr>
 80080be:	b108      	cbz	r0, 80080c4 <_printf_i+0x1e4>
 80080c0:	1b80      	subs	r0, r0, r6
 80080c2:	6060      	str	r0, [r4, #4]
 80080c4:	6863      	ldr	r3, [r4, #4]
 80080c6:	6123      	str	r3, [r4, #16]
 80080c8:	2300      	movs	r3, #0
 80080ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080ce:	e7aa      	b.n	8008026 <_printf_i+0x146>
 80080d0:	6923      	ldr	r3, [r4, #16]
 80080d2:	4632      	mov	r2, r6
 80080d4:	4649      	mov	r1, r9
 80080d6:	4640      	mov	r0, r8
 80080d8:	47d0      	blx	sl
 80080da:	3001      	adds	r0, #1
 80080dc:	d0ad      	beq.n	800803a <_printf_i+0x15a>
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	079b      	lsls	r3, r3, #30
 80080e2:	d413      	bmi.n	800810c <_printf_i+0x22c>
 80080e4:	68e0      	ldr	r0, [r4, #12]
 80080e6:	9b03      	ldr	r3, [sp, #12]
 80080e8:	4298      	cmp	r0, r3
 80080ea:	bfb8      	it	lt
 80080ec:	4618      	movlt	r0, r3
 80080ee:	e7a6      	b.n	800803e <_printf_i+0x15e>
 80080f0:	2301      	movs	r3, #1
 80080f2:	4632      	mov	r2, r6
 80080f4:	4649      	mov	r1, r9
 80080f6:	4640      	mov	r0, r8
 80080f8:	47d0      	blx	sl
 80080fa:	3001      	adds	r0, #1
 80080fc:	d09d      	beq.n	800803a <_printf_i+0x15a>
 80080fe:	3501      	adds	r5, #1
 8008100:	68e3      	ldr	r3, [r4, #12]
 8008102:	9903      	ldr	r1, [sp, #12]
 8008104:	1a5b      	subs	r3, r3, r1
 8008106:	42ab      	cmp	r3, r5
 8008108:	dcf2      	bgt.n	80080f0 <_printf_i+0x210>
 800810a:	e7eb      	b.n	80080e4 <_printf_i+0x204>
 800810c:	2500      	movs	r5, #0
 800810e:	f104 0619 	add.w	r6, r4, #25
 8008112:	e7f5      	b.n	8008100 <_printf_i+0x220>
 8008114:	0800a5c2 	.word	0x0800a5c2
 8008118:	0800a5d3 	.word	0x0800a5d3

0800811c <sniprintf>:
 800811c:	b40c      	push	{r2, r3}
 800811e:	b530      	push	{r4, r5, lr}
 8008120:	4b18      	ldr	r3, [pc, #96]	@ (8008184 <sniprintf+0x68>)
 8008122:	1e0c      	subs	r4, r1, #0
 8008124:	681d      	ldr	r5, [r3, #0]
 8008126:	b09d      	sub	sp, #116	@ 0x74
 8008128:	da08      	bge.n	800813c <sniprintf+0x20>
 800812a:	238b      	movs	r3, #139	@ 0x8b
 800812c:	602b      	str	r3, [r5, #0]
 800812e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008132:	b01d      	add	sp, #116	@ 0x74
 8008134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008138:	b002      	add	sp, #8
 800813a:	4770      	bx	lr
 800813c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008140:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008144:	f04f 0300 	mov.w	r3, #0
 8008148:	931b      	str	r3, [sp, #108]	@ 0x6c
 800814a:	bf14      	ite	ne
 800814c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008150:	4623      	moveq	r3, r4
 8008152:	9304      	str	r3, [sp, #16]
 8008154:	9307      	str	r3, [sp, #28]
 8008156:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800815a:	9002      	str	r0, [sp, #8]
 800815c:	9006      	str	r0, [sp, #24]
 800815e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008162:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008164:	ab21      	add	r3, sp, #132	@ 0x84
 8008166:	a902      	add	r1, sp, #8
 8008168:	4628      	mov	r0, r5
 800816a:	9301      	str	r3, [sp, #4]
 800816c:	f000 ffbc 	bl	80090e8 <_svfiprintf_r>
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	bfbc      	itt	lt
 8008174:	238b      	movlt	r3, #139	@ 0x8b
 8008176:	602b      	strlt	r3, [r5, #0]
 8008178:	2c00      	cmp	r4, #0
 800817a:	d0da      	beq.n	8008132 <sniprintf+0x16>
 800817c:	9b02      	ldr	r3, [sp, #8]
 800817e:	2200      	movs	r2, #0
 8008180:	701a      	strb	r2, [r3, #0]
 8008182:	e7d6      	b.n	8008132 <sniprintf+0x16>
 8008184:	20000020 	.word	0x20000020

08008188 <std>:
 8008188:	2300      	movs	r3, #0
 800818a:	b510      	push	{r4, lr}
 800818c:	4604      	mov	r4, r0
 800818e:	e9c0 3300 	strd	r3, r3, [r0]
 8008192:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008196:	6083      	str	r3, [r0, #8]
 8008198:	8181      	strh	r1, [r0, #12]
 800819a:	6643      	str	r3, [r0, #100]	@ 0x64
 800819c:	81c2      	strh	r2, [r0, #14]
 800819e:	6183      	str	r3, [r0, #24]
 80081a0:	4619      	mov	r1, r3
 80081a2:	2208      	movs	r2, #8
 80081a4:	305c      	adds	r0, #92	@ 0x5c
 80081a6:	f000 f8b1 	bl	800830c <memset>
 80081aa:	4b0d      	ldr	r3, [pc, #52]	@ (80081e0 <std+0x58>)
 80081ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80081ae:	4b0d      	ldr	r3, [pc, #52]	@ (80081e4 <std+0x5c>)
 80081b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80081b2:	4b0d      	ldr	r3, [pc, #52]	@ (80081e8 <std+0x60>)
 80081b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80081b6:	4b0d      	ldr	r3, [pc, #52]	@ (80081ec <std+0x64>)
 80081b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80081ba:	4b0d      	ldr	r3, [pc, #52]	@ (80081f0 <std+0x68>)
 80081bc:	6224      	str	r4, [r4, #32]
 80081be:	429c      	cmp	r4, r3
 80081c0:	d006      	beq.n	80081d0 <std+0x48>
 80081c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80081c6:	4294      	cmp	r4, r2
 80081c8:	d002      	beq.n	80081d0 <std+0x48>
 80081ca:	33d0      	adds	r3, #208	@ 0xd0
 80081cc:	429c      	cmp	r4, r3
 80081ce:	d105      	bne.n	80081dc <std+0x54>
 80081d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80081d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081d8:	f000 b8ca 	b.w	8008370 <__retarget_lock_init_recursive>
 80081dc:	bd10      	pop	{r4, pc}
 80081de:	bf00      	nop
 80081e0:	08009c99 	.word	0x08009c99
 80081e4:	08009cbb 	.word	0x08009cbb
 80081e8:	08009cf3 	.word	0x08009cf3
 80081ec:	08009d17 	.word	0x08009d17
 80081f0:	20000484 	.word	0x20000484

080081f4 <stdio_exit_handler>:
 80081f4:	4a02      	ldr	r2, [pc, #8]	@ (8008200 <stdio_exit_handler+0xc>)
 80081f6:	4903      	ldr	r1, [pc, #12]	@ (8008204 <stdio_exit_handler+0x10>)
 80081f8:	4803      	ldr	r0, [pc, #12]	@ (8008208 <stdio_exit_handler+0x14>)
 80081fa:	f000 b869 	b.w	80082d0 <_fwalk_sglue>
 80081fe:	bf00      	nop
 8008200:	20000014 	.word	0x20000014
 8008204:	0800953d 	.word	0x0800953d
 8008208:	20000024 	.word	0x20000024

0800820c <cleanup_stdio>:
 800820c:	6841      	ldr	r1, [r0, #4]
 800820e:	4b0c      	ldr	r3, [pc, #48]	@ (8008240 <cleanup_stdio+0x34>)
 8008210:	4299      	cmp	r1, r3
 8008212:	b510      	push	{r4, lr}
 8008214:	4604      	mov	r4, r0
 8008216:	d001      	beq.n	800821c <cleanup_stdio+0x10>
 8008218:	f001 f990 	bl	800953c <_fflush_r>
 800821c:	68a1      	ldr	r1, [r4, #8]
 800821e:	4b09      	ldr	r3, [pc, #36]	@ (8008244 <cleanup_stdio+0x38>)
 8008220:	4299      	cmp	r1, r3
 8008222:	d002      	beq.n	800822a <cleanup_stdio+0x1e>
 8008224:	4620      	mov	r0, r4
 8008226:	f001 f989 	bl	800953c <_fflush_r>
 800822a:	68e1      	ldr	r1, [r4, #12]
 800822c:	4b06      	ldr	r3, [pc, #24]	@ (8008248 <cleanup_stdio+0x3c>)
 800822e:	4299      	cmp	r1, r3
 8008230:	d004      	beq.n	800823c <cleanup_stdio+0x30>
 8008232:	4620      	mov	r0, r4
 8008234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008238:	f001 b980 	b.w	800953c <_fflush_r>
 800823c:	bd10      	pop	{r4, pc}
 800823e:	bf00      	nop
 8008240:	20000484 	.word	0x20000484
 8008244:	200004ec 	.word	0x200004ec
 8008248:	20000554 	.word	0x20000554

0800824c <global_stdio_init.part.0>:
 800824c:	b510      	push	{r4, lr}
 800824e:	4b0b      	ldr	r3, [pc, #44]	@ (800827c <global_stdio_init.part.0+0x30>)
 8008250:	4c0b      	ldr	r4, [pc, #44]	@ (8008280 <global_stdio_init.part.0+0x34>)
 8008252:	4a0c      	ldr	r2, [pc, #48]	@ (8008284 <global_stdio_init.part.0+0x38>)
 8008254:	601a      	str	r2, [r3, #0]
 8008256:	4620      	mov	r0, r4
 8008258:	2200      	movs	r2, #0
 800825a:	2104      	movs	r1, #4
 800825c:	f7ff ff94 	bl	8008188 <std>
 8008260:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008264:	2201      	movs	r2, #1
 8008266:	2109      	movs	r1, #9
 8008268:	f7ff ff8e 	bl	8008188 <std>
 800826c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008270:	2202      	movs	r2, #2
 8008272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008276:	2112      	movs	r1, #18
 8008278:	f7ff bf86 	b.w	8008188 <std>
 800827c:	200005bc 	.word	0x200005bc
 8008280:	20000484 	.word	0x20000484
 8008284:	080081f5 	.word	0x080081f5

08008288 <__sfp_lock_acquire>:
 8008288:	4801      	ldr	r0, [pc, #4]	@ (8008290 <__sfp_lock_acquire+0x8>)
 800828a:	f000 b872 	b.w	8008372 <__retarget_lock_acquire_recursive>
 800828e:	bf00      	nop
 8008290:	200005c1 	.word	0x200005c1

08008294 <__sfp_lock_release>:
 8008294:	4801      	ldr	r0, [pc, #4]	@ (800829c <__sfp_lock_release+0x8>)
 8008296:	f000 b86d 	b.w	8008374 <__retarget_lock_release_recursive>
 800829a:	bf00      	nop
 800829c:	200005c1 	.word	0x200005c1

080082a0 <__sinit>:
 80082a0:	b510      	push	{r4, lr}
 80082a2:	4604      	mov	r4, r0
 80082a4:	f7ff fff0 	bl	8008288 <__sfp_lock_acquire>
 80082a8:	6a23      	ldr	r3, [r4, #32]
 80082aa:	b11b      	cbz	r3, 80082b4 <__sinit+0x14>
 80082ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b0:	f7ff bff0 	b.w	8008294 <__sfp_lock_release>
 80082b4:	4b04      	ldr	r3, [pc, #16]	@ (80082c8 <__sinit+0x28>)
 80082b6:	6223      	str	r3, [r4, #32]
 80082b8:	4b04      	ldr	r3, [pc, #16]	@ (80082cc <__sinit+0x2c>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1f5      	bne.n	80082ac <__sinit+0xc>
 80082c0:	f7ff ffc4 	bl	800824c <global_stdio_init.part.0>
 80082c4:	e7f2      	b.n	80082ac <__sinit+0xc>
 80082c6:	bf00      	nop
 80082c8:	0800820d 	.word	0x0800820d
 80082cc:	200005bc 	.word	0x200005bc

080082d0 <_fwalk_sglue>:
 80082d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d4:	4607      	mov	r7, r0
 80082d6:	4688      	mov	r8, r1
 80082d8:	4614      	mov	r4, r2
 80082da:	2600      	movs	r6, #0
 80082dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082e0:	f1b9 0901 	subs.w	r9, r9, #1
 80082e4:	d505      	bpl.n	80082f2 <_fwalk_sglue+0x22>
 80082e6:	6824      	ldr	r4, [r4, #0]
 80082e8:	2c00      	cmp	r4, #0
 80082ea:	d1f7      	bne.n	80082dc <_fwalk_sglue+0xc>
 80082ec:	4630      	mov	r0, r6
 80082ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082f2:	89ab      	ldrh	r3, [r5, #12]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d907      	bls.n	8008308 <_fwalk_sglue+0x38>
 80082f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082fc:	3301      	adds	r3, #1
 80082fe:	d003      	beq.n	8008308 <_fwalk_sglue+0x38>
 8008300:	4629      	mov	r1, r5
 8008302:	4638      	mov	r0, r7
 8008304:	47c0      	blx	r8
 8008306:	4306      	orrs	r6, r0
 8008308:	3568      	adds	r5, #104	@ 0x68
 800830a:	e7e9      	b.n	80082e0 <_fwalk_sglue+0x10>

0800830c <memset>:
 800830c:	4402      	add	r2, r0
 800830e:	4603      	mov	r3, r0
 8008310:	4293      	cmp	r3, r2
 8008312:	d100      	bne.n	8008316 <memset+0xa>
 8008314:	4770      	bx	lr
 8008316:	f803 1b01 	strb.w	r1, [r3], #1
 800831a:	e7f9      	b.n	8008310 <memset+0x4>

0800831c <__errno>:
 800831c:	4b01      	ldr	r3, [pc, #4]	@ (8008324 <__errno+0x8>)
 800831e:	6818      	ldr	r0, [r3, #0]
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	20000020 	.word	0x20000020

08008328 <__libc_init_array>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	4d0d      	ldr	r5, [pc, #52]	@ (8008360 <__libc_init_array+0x38>)
 800832c:	4c0d      	ldr	r4, [pc, #52]	@ (8008364 <__libc_init_array+0x3c>)
 800832e:	1b64      	subs	r4, r4, r5
 8008330:	10a4      	asrs	r4, r4, #2
 8008332:	2600      	movs	r6, #0
 8008334:	42a6      	cmp	r6, r4
 8008336:	d109      	bne.n	800834c <__libc_init_array+0x24>
 8008338:	4d0b      	ldr	r5, [pc, #44]	@ (8008368 <__libc_init_array+0x40>)
 800833a:	4c0c      	ldr	r4, [pc, #48]	@ (800836c <__libc_init_array+0x44>)
 800833c:	f002 f8f6 	bl	800a52c <_init>
 8008340:	1b64      	subs	r4, r4, r5
 8008342:	10a4      	asrs	r4, r4, #2
 8008344:	2600      	movs	r6, #0
 8008346:	42a6      	cmp	r6, r4
 8008348:	d105      	bne.n	8008356 <__libc_init_array+0x2e>
 800834a:	bd70      	pop	{r4, r5, r6, pc}
 800834c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008350:	4798      	blx	r3
 8008352:	3601      	adds	r6, #1
 8008354:	e7ee      	b.n	8008334 <__libc_init_array+0xc>
 8008356:	f855 3b04 	ldr.w	r3, [r5], #4
 800835a:	4798      	blx	r3
 800835c:	3601      	adds	r6, #1
 800835e:	e7f2      	b.n	8008346 <__libc_init_array+0x1e>
 8008360:	0800a92c 	.word	0x0800a92c
 8008364:	0800a92c 	.word	0x0800a92c
 8008368:	0800a92c 	.word	0x0800a92c
 800836c:	0800a930 	.word	0x0800a930

08008370 <__retarget_lock_init_recursive>:
 8008370:	4770      	bx	lr

08008372 <__retarget_lock_acquire_recursive>:
 8008372:	4770      	bx	lr

08008374 <__retarget_lock_release_recursive>:
 8008374:	4770      	bx	lr
	...

08008378 <_localeconv_r>:
 8008378:	4800      	ldr	r0, [pc, #0]	@ (800837c <_localeconv_r+0x4>)
 800837a:	4770      	bx	lr
 800837c:	20000160 	.word	0x20000160

08008380 <quorem>:
 8008380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	6903      	ldr	r3, [r0, #16]
 8008386:	690c      	ldr	r4, [r1, #16]
 8008388:	42a3      	cmp	r3, r4
 800838a:	4607      	mov	r7, r0
 800838c:	db7e      	blt.n	800848c <quorem+0x10c>
 800838e:	3c01      	subs	r4, #1
 8008390:	f101 0814 	add.w	r8, r1, #20
 8008394:	00a3      	lsls	r3, r4, #2
 8008396:	f100 0514 	add.w	r5, r0, #20
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083a0:	9301      	str	r3, [sp, #4]
 80083a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80083a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083aa:	3301      	adds	r3, #1
 80083ac:	429a      	cmp	r2, r3
 80083ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80083b2:	fbb2 f6f3 	udiv	r6, r2, r3
 80083b6:	d32e      	bcc.n	8008416 <quorem+0x96>
 80083b8:	f04f 0a00 	mov.w	sl, #0
 80083bc:	46c4      	mov	ip, r8
 80083be:	46ae      	mov	lr, r5
 80083c0:	46d3      	mov	fp, sl
 80083c2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80083c6:	b298      	uxth	r0, r3
 80083c8:	fb06 a000 	mla	r0, r6, r0, sl
 80083cc:	0c02      	lsrs	r2, r0, #16
 80083ce:	0c1b      	lsrs	r3, r3, #16
 80083d0:	fb06 2303 	mla	r3, r6, r3, r2
 80083d4:	f8de 2000 	ldr.w	r2, [lr]
 80083d8:	b280      	uxth	r0, r0
 80083da:	b292      	uxth	r2, r2
 80083dc:	1a12      	subs	r2, r2, r0
 80083de:	445a      	add	r2, fp
 80083e0:	f8de 0000 	ldr.w	r0, [lr]
 80083e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80083ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80083f2:	b292      	uxth	r2, r2
 80083f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80083f8:	45e1      	cmp	r9, ip
 80083fa:	f84e 2b04 	str.w	r2, [lr], #4
 80083fe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008402:	d2de      	bcs.n	80083c2 <quorem+0x42>
 8008404:	9b00      	ldr	r3, [sp, #0]
 8008406:	58eb      	ldr	r3, [r5, r3]
 8008408:	b92b      	cbnz	r3, 8008416 <quorem+0x96>
 800840a:	9b01      	ldr	r3, [sp, #4]
 800840c:	3b04      	subs	r3, #4
 800840e:	429d      	cmp	r5, r3
 8008410:	461a      	mov	r2, r3
 8008412:	d32f      	bcc.n	8008474 <quorem+0xf4>
 8008414:	613c      	str	r4, [r7, #16]
 8008416:	4638      	mov	r0, r7
 8008418:	f001 fb36 	bl	8009a88 <__mcmp>
 800841c:	2800      	cmp	r0, #0
 800841e:	db25      	blt.n	800846c <quorem+0xec>
 8008420:	4629      	mov	r1, r5
 8008422:	2000      	movs	r0, #0
 8008424:	f858 2b04 	ldr.w	r2, [r8], #4
 8008428:	f8d1 c000 	ldr.w	ip, [r1]
 800842c:	fa1f fe82 	uxth.w	lr, r2
 8008430:	fa1f f38c 	uxth.w	r3, ip
 8008434:	eba3 030e 	sub.w	r3, r3, lr
 8008438:	4403      	add	r3, r0
 800843a:	0c12      	lsrs	r2, r2, #16
 800843c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008440:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008444:	b29b      	uxth	r3, r3
 8008446:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800844a:	45c1      	cmp	r9, r8
 800844c:	f841 3b04 	str.w	r3, [r1], #4
 8008450:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008454:	d2e6      	bcs.n	8008424 <quorem+0xa4>
 8008456:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800845a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800845e:	b922      	cbnz	r2, 800846a <quorem+0xea>
 8008460:	3b04      	subs	r3, #4
 8008462:	429d      	cmp	r5, r3
 8008464:	461a      	mov	r2, r3
 8008466:	d30b      	bcc.n	8008480 <quorem+0x100>
 8008468:	613c      	str	r4, [r7, #16]
 800846a:	3601      	adds	r6, #1
 800846c:	4630      	mov	r0, r6
 800846e:	b003      	add	sp, #12
 8008470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008474:	6812      	ldr	r2, [r2, #0]
 8008476:	3b04      	subs	r3, #4
 8008478:	2a00      	cmp	r2, #0
 800847a:	d1cb      	bne.n	8008414 <quorem+0x94>
 800847c:	3c01      	subs	r4, #1
 800847e:	e7c6      	b.n	800840e <quorem+0x8e>
 8008480:	6812      	ldr	r2, [r2, #0]
 8008482:	3b04      	subs	r3, #4
 8008484:	2a00      	cmp	r2, #0
 8008486:	d1ef      	bne.n	8008468 <quorem+0xe8>
 8008488:	3c01      	subs	r4, #1
 800848a:	e7ea      	b.n	8008462 <quorem+0xe2>
 800848c:	2000      	movs	r0, #0
 800848e:	e7ee      	b.n	800846e <quorem+0xee>

08008490 <_dtoa_r>:
 8008490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008494:	69c7      	ldr	r7, [r0, #28]
 8008496:	b097      	sub	sp, #92	@ 0x5c
 8008498:	ed8d 0b04 	vstr	d0, [sp, #16]
 800849c:	ec55 4b10 	vmov	r4, r5, d0
 80084a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80084a2:	9107      	str	r1, [sp, #28]
 80084a4:	4681      	mov	r9, r0
 80084a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80084a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80084aa:	b97f      	cbnz	r7, 80084cc <_dtoa_r+0x3c>
 80084ac:	2010      	movs	r0, #16
 80084ae:	f000 ff17 	bl	80092e0 <malloc>
 80084b2:	4602      	mov	r2, r0
 80084b4:	f8c9 001c 	str.w	r0, [r9, #28]
 80084b8:	b920      	cbnz	r0, 80084c4 <_dtoa_r+0x34>
 80084ba:	4ba9      	ldr	r3, [pc, #676]	@ (8008760 <_dtoa_r+0x2d0>)
 80084bc:	21ef      	movs	r1, #239	@ 0xef
 80084be:	48a9      	ldr	r0, [pc, #676]	@ (8008764 <_dtoa_r+0x2d4>)
 80084c0:	f001 fcda 	bl	8009e78 <__assert_func>
 80084c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80084c8:	6007      	str	r7, [r0, #0]
 80084ca:	60c7      	str	r7, [r0, #12]
 80084cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80084d0:	6819      	ldr	r1, [r3, #0]
 80084d2:	b159      	cbz	r1, 80084ec <_dtoa_r+0x5c>
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	604a      	str	r2, [r1, #4]
 80084d8:	2301      	movs	r3, #1
 80084da:	4093      	lsls	r3, r2
 80084dc:	608b      	str	r3, [r1, #8]
 80084de:	4648      	mov	r0, r9
 80084e0:	f001 f8a0 	bl	8009624 <_Bfree>
 80084e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	1e2b      	subs	r3, r5, #0
 80084ee:	bfb9      	ittee	lt
 80084f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80084f4:	9305      	strlt	r3, [sp, #20]
 80084f6:	2300      	movge	r3, #0
 80084f8:	6033      	strge	r3, [r6, #0]
 80084fa:	9f05      	ldr	r7, [sp, #20]
 80084fc:	4b9a      	ldr	r3, [pc, #616]	@ (8008768 <_dtoa_r+0x2d8>)
 80084fe:	bfbc      	itt	lt
 8008500:	2201      	movlt	r2, #1
 8008502:	6032      	strlt	r2, [r6, #0]
 8008504:	43bb      	bics	r3, r7
 8008506:	d112      	bne.n	800852e <_dtoa_r+0x9e>
 8008508:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800850a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800850e:	6013      	str	r3, [r2, #0]
 8008510:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008514:	4323      	orrs	r3, r4
 8008516:	f000 855a 	beq.w	8008fce <_dtoa_r+0xb3e>
 800851a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800851c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800877c <_dtoa_r+0x2ec>
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 855c 	beq.w	8008fde <_dtoa_r+0xb4e>
 8008526:	f10a 0303 	add.w	r3, sl, #3
 800852a:	f000 bd56 	b.w	8008fda <_dtoa_r+0xb4a>
 800852e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008532:	2200      	movs	r2, #0
 8008534:	ec51 0b17 	vmov	r0, r1, d7
 8008538:	2300      	movs	r3, #0
 800853a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800853e:	f7f8 fac3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008542:	4680      	mov	r8, r0
 8008544:	b158      	cbz	r0, 800855e <_dtoa_r+0xce>
 8008546:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008548:	2301      	movs	r3, #1
 800854a:	6013      	str	r3, [r2, #0]
 800854c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800854e:	b113      	cbz	r3, 8008556 <_dtoa_r+0xc6>
 8008550:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008552:	4b86      	ldr	r3, [pc, #536]	@ (800876c <_dtoa_r+0x2dc>)
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008780 <_dtoa_r+0x2f0>
 800855a:	f000 bd40 	b.w	8008fde <_dtoa_r+0xb4e>
 800855e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008562:	aa14      	add	r2, sp, #80	@ 0x50
 8008564:	a915      	add	r1, sp, #84	@ 0x54
 8008566:	4648      	mov	r0, r9
 8008568:	f001 fb3e 	bl	8009be8 <__d2b>
 800856c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008570:	9002      	str	r0, [sp, #8]
 8008572:	2e00      	cmp	r6, #0
 8008574:	d078      	beq.n	8008668 <_dtoa_r+0x1d8>
 8008576:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008578:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800857c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008580:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008584:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008588:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800858c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008590:	4619      	mov	r1, r3
 8008592:	2200      	movs	r2, #0
 8008594:	4b76      	ldr	r3, [pc, #472]	@ (8008770 <_dtoa_r+0x2e0>)
 8008596:	f7f7 fe77 	bl	8000288 <__aeabi_dsub>
 800859a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008748 <_dtoa_r+0x2b8>)
 800859c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a0:	f7f8 f82a 	bl	80005f8 <__aeabi_dmul>
 80085a4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008750 <_dtoa_r+0x2c0>)
 80085a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085aa:	f7f7 fe6f 	bl	800028c <__adddf3>
 80085ae:	4604      	mov	r4, r0
 80085b0:	4630      	mov	r0, r6
 80085b2:	460d      	mov	r5, r1
 80085b4:	f7f7 ffb6 	bl	8000524 <__aeabi_i2d>
 80085b8:	a367      	add	r3, pc, #412	@ (adr r3, 8008758 <_dtoa_r+0x2c8>)
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	f7f8 f81b 	bl	80005f8 <__aeabi_dmul>
 80085c2:	4602      	mov	r2, r0
 80085c4:	460b      	mov	r3, r1
 80085c6:	4620      	mov	r0, r4
 80085c8:	4629      	mov	r1, r5
 80085ca:	f7f7 fe5f 	bl	800028c <__adddf3>
 80085ce:	4604      	mov	r4, r0
 80085d0:	460d      	mov	r5, r1
 80085d2:	f7f8 fac1 	bl	8000b58 <__aeabi_d2iz>
 80085d6:	2200      	movs	r2, #0
 80085d8:	4607      	mov	r7, r0
 80085da:	2300      	movs	r3, #0
 80085dc:	4620      	mov	r0, r4
 80085de:	4629      	mov	r1, r5
 80085e0:	f7f8 fa7c 	bl	8000adc <__aeabi_dcmplt>
 80085e4:	b140      	cbz	r0, 80085f8 <_dtoa_r+0x168>
 80085e6:	4638      	mov	r0, r7
 80085e8:	f7f7 ff9c 	bl	8000524 <__aeabi_i2d>
 80085ec:	4622      	mov	r2, r4
 80085ee:	462b      	mov	r3, r5
 80085f0:	f7f8 fa6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80085f4:	b900      	cbnz	r0, 80085f8 <_dtoa_r+0x168>
 80085f6:	3f01      	subs	r7, #1
 80085f8:	2f16      	cmp	r7, #22
 80085fa:	d852      	bhi.n	80086a2 <_dtoa_r+0x212>
 80085fc:	4b5d      	ldr	r3, [pc, #372]	@ (8008774 <_dtoa_r+0x2e4>)
 80085fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008606:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800860a:	f7f8 fa67 	bl	8000adc <__aeabi_dcmplt>
 800860e:	2800      	cmp	r0, #0
 8008610:	d049      	beq.n	80086a6 <_dtoa_r+0x216>
 8008612:	3f01      	subs	r7, #1
 8008614:	2300      	movs	r3, #0
 8008616:	9310      	str	r3, [sp, #64]	@ 0x40
 8008618:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800861a:	1b9b      	subs	r3, r3, r6
 800861c:	1e5a      	subs	r2, r3, #1
 800861e:	bf45      	ittet	mi
 8008620:	f1c3 0301 	rsbmi	r3, r3, #1
 8008624:	9300      	strmi	r3, [sp, #0]
 8008626:	2300      	movpl	r3, #0
 8008628:	2300      	movmi	r3, #0
 800862a:	9206      	str	r2, [sp, #24]
 800862c:	bf54      	ite	pl
 800862e:	9300      	strpl	r3, [sp, #0]
 8008630:	9306      	strmi	r3, [sp, #24]
 8008632:	2f00      	cmp	r7, #0
 8008634:	db39      	blt.n	80086aa <_dtoa_r+0x21a>
 8008636:	9b06      	ldr	r3, [sp, #24]
 8008638:	970d      	str	r7, [sp, #52]	@ 0x34
 800863a:	443b      	add	r3, r7
 800863c:	9306      	str	r3, [sp, #24]
 800863e:	2300      	movs	r3, #0
 8008640:	9308      	str	r3, [sp, #32]
 8008642:	9b07      	ldr	r3, [sp, #28]
 8008644:	2b09      	cmp	r3, #9
 8008646:	d863      	bhi.n	8008710 <_dtoa_r+0x280>
 8008648:	2b05      	cmp	r3, #5
 800864a:	bfc4      	itt	gt
 800864c:	3b04      	subgt	r3, #4
 800864e:	9307      	strgt	r3, [sp, #28]
 8008650:	9b07      	ldr	r3, [sp, #28]
 8008652:	f1a3 0302 	sub.w	r3, r3, #2
 8008656:	bfcc      	ite	gt
 8008658:	2400      	movgt	r4, #0
 800865a:	2401      	movle	r4, #1
 800865c:	2b03      	cmp	r3, #3
 800865e:	d863      	bhi.n	8008728 <_dtoa_r+0x298>
 8008660:	e8df f003 	tbb	[pc, r3]
 8008664:	2b375452 	.word	0x2b375452
 8008668:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800866c:	441e      	add	r6, r3
 800866e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008672:	2b20      	cmp	r3, #32
 8008674:	bfc1      	itttt	gt
 8008676:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800867a:	409f      	lslgt	r7, r3
 800867c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008680:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008684:	bfd6      	itet	le
 8008686:	f1c3 0320 	rsble	r3, r3, #32
 800868a:	ea47 0003 	orrgt.w	r0, r7, r3
 800868e:	fa04 f003 	lslle.w	r0, r4, r3
 8008692:	f7f7 ff37 	bl	8000504 <__aeabi_ui2d>
 8008696:	2201      	movs	r2, #1
 8008698:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800869c:	3e01      	subs	r6, #1
 800869e:	9212      	str	r2, [sp, #72]	@ 0x48
 80086a0:	e776      	b.n	8008590 <_dtoa_r+0x100>
 80086a2:	2301      	movs	r3, #1
 80086a4:	e7b7      	b.n	8008616 <_dtoa_r+0x186>
 80086a6:	9010      	str	r0, [sp, #64]	@ 0x40
 80086a8:	e7b6      	b.n	8008618 <_dtoa_r+0x188>
 80086aa:	9b00      	ldr	r3, [sp, #0]
 80086ac:	1bdb      	subs	r3, r3, r7
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	427b      	negs	r3, r7
 80086b2:	9308      	str	r3, [sp, #32]
 80086b4:	2300      	movs	r3, #0
 80086b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80086b8:	e7c3      	b.n	8008642 <_dtoa_r+0x1b2>
 80086ba:	2301      	movs	r3, #1
 80086bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80086be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086c0:	eb07 0b03 	add.w	fp, r7, r3
 80086c4:	f10b 0301 	add.w	r3, fp, #1
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	9303      	str	r3, [sp, #12]
 80086cc:	bfb8      	it	lt
 80086ce:	2301      	movlt	r3, #1
 80086d0:	e006      	b.n	80086e0 <_dtoa_r+0x250>
 80086d2:	2301      	movs	r3, #1
 80086d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80086d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086d8:	2b00      	cmp	r3, #0
 80086da:	dd28      	ble.n	800872e <_dtoa_r+0x29e>
 80086dc:	469b      	mov	fp, r3
 80086de:	9303      	str	r3, [sp, #12]
 80086e0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80086e4:	2100      	movs	r1, #0
 80086e6:	2204      	movs	r2, #4
 80086e8:	f102 0514 	add.w	r5, r2, #20
 80086ec:	429d      	cmp	r5, r3
 80086ee:	d926      	bls.n	800873e <_dtoa_r+0x2ae>
 80086f0:	6041      	str	r1, [r0, #4]
 80086f2:	4648      	mov	r0, r9
 80086f4:	f000 ff56 	bl	80095a4 <_Balloc>
 80086f8:	4682      	mov	sl, r0
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d142      	bne.n	8008784 <_dtoa_r+0x2f4>
 80086fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008778 <_dtoa_r+0x2e8>)
 8008700:	4602      	mov	r2, r0
 8008702:	f240 11af 	movw	r1, #431	@ 0x1af
 8008706:	e6da      	b.n	80084be <_dtoa_r+0x2e>
 8008708:	2300      	movs	r3, #0
 800870a:	e7e3      	b.n	80086d4 <_dtoa_r+0x244>
 800870c:	2300      	movs	r3, #0
 800870e:	e7d5      	b.n	80086bc <_dtoa_r+0x22c>
 8008710:	2401      	movs	r4, #1
 8008712:	2300      	movs	r3, #0
 8008714:	9307      	str	r3, [sp, #28]
 8008716:	9409      	str	r4, [sp, #36]	@ 0x24
 8008718:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800871c:	2200      	movs	r2, #0
 800871e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008722:	2312      	movs	r3, #18
 8008724:	920c      	str	r2, [sp, #48]	@ 0x30
 8008726:	e7db      	b.n	80086e0 <_dtoa_r+0x250>
 8008728:	2301      	movs	r3, #1
 800872a:	9309      	str	r3, [sp, #36]	@ 0x24
 800872c:	e7f4      	b.n	8008718 <_dtoa_r+0x288>
 800872e:	f04f 0b01 	mov.w	fp, #1
 8008732:	f8cd b00c 	str.w	fp, [sp, #12]
 8008736:	465b      	mov	r3, fp
 8008738:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800873c:	e7d0      	b.n	80086e0 <_dtoa_r+0x250>
 800873e:	3101      	adds	r1, #1
 8008740:	0052      	lsls	r2, r2, #1
 8008742:	e7d1      	b.n	80086e8 <_dtoa_r+0x258>
 8008744:	f3af 8000 	nop.w
 8008748:	636f4361 	.word	0x636f4361
 800874c:	3fd287a7 	.word	0x3fd287a7
 8008750:	8b60c8b3 	.word	0x8b60c8b3
 8008754:	3fc68a28 	.word	0x3fc68a28
 8008758:	509f79fb 	.word	0x509f79fb
 800875c:	3fd34413 	.word	0x3fd34413
 8008760:	0800a5f1 	.word	0x0800a5f1
 8008764:	0800a608 	.word	0x0800a608
 8008768:	7ff00000 	.word	0x7ff00000
 800876c:	0800a5c1 	.word	0x0800a5c1
 8008770:	3ff80000 	.word	0x3ff80000
 8008774:	0800a758 	.word	0x0800a758
 8008778:	0800a660 	.word	0x0800a660
 800877c:	0800a5ed 	.word	0x0800a5ed
 8008780:	0800a5c0 	.word	0x0800a5c0
 8008784:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008788:	6018      	str	r0, [r3, #0]
 800878a:	9b03      	ldr	r3, [sp, #12]
 800878c:	2b0e      	cmp	r3, #14
 800878e:	f200 80a1 	bhi.w	80088d4 <_dtoa_r+0x444>
 8008792:	2c00      	cmp	r4, #0
 8008794:	f000 809e 	beq.w	80088d4 <_dtoa_r+0x444>
 8008798:	2f00      	cmp	r7, #0
 800879a:	dd33      	ble.n	8008804 <_dtoa_r+0x374>
 800879c:	4b9c      	ldr	r3, [pc, #624]	@ (8008a10 <_dtoa_r+0x580>)
 800879e:	f007 020f 	and.w	r2, r7, #15
 80087a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087a6:	ed93 7b00 	vldr	d7, [r3]
 80087aa:	05f8      	lsls	r0, r7, #23
 80087ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80087b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80087b4:	d516      	bpl.n	80087e4 <_dtoa_r+0x354>
 80087b6:	4b97      	ldr	r3, [pc, #604]	@ (8008a14 <_dtoa_r+0x584>)
 80087b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80087bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087c0:	f7f8 f844 	bl	800084c <__aeabi_ddiv>
 80087c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087c8:	f004 040f 	and.w	r4, r4, #15
 80087cc:	2603      	movs	r6, #3
 80087ce:	4d91      	ldr	r5, [pc, #580]	@ (8008a14 <_dtoa_r+0x584>)
 80087d0:	b954      	cbnz	r4, 80087e8 <_dtoa_r+0x358>
 80087d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80087d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087da:	f7f8 f837 	bl	800084c <__aeabi_ddiv>
 80087de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087e2:	e028      	b.n	8008836 <_dtoa_r+0x3a6>
 80087e4:	2602      	movs	r6, #2
 80087e6:	e7f2      	b.n	80087ce <_dtoa_r+0x33e>
 80087e8:	07e1      	lsls	r1, r4, #31
 80087ea:	d508      	bpl.n	80087fe <_dtoa_r+0x36e>
 80087ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80087f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80087f4:	f7f7 ff00 	bl	80005f8 <__aeabi_dmul>
 80087f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80087fc:	3601      	adds	r6, #1
 80087fe:	1064      	asrs	r4, r4, #1
 8008800:	3508      	adds	r5, #8
 8008802:	e7e5      	b.n	80087d0 <_dtoa_r+0x340>
 8008804:	f000 80af 	beq.w	8008966 <_dtoa_r+0x4d6>
 8008808:	427c      	negs	r4, r7
 800880a:	4b81      	ldr	r3, [pc, #516]	@ (8008a10 <_dtoa_r+0x580>)
 800880c:	4d81      	ldr	r5, [pc, #516]	@ (8008a14 <_dtoa_r+0x584>)
 800880e:	f004 020f 	and.w	r2, r4, #15
 8008812:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800881e:	f7f7 feeb 	bl	80005f8 <__aeabi_dmul>
 8008822:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008826:	1124      	asrs	r4, r4, #4
 8008828:	2300      	movs	r3, #0
 800882a:	2602      	movs	r6, #2
 800882c:	2c00      	cmp	r4, #0
 800882e:	f040 808f 	bne.w	8008950 <_dtoa_r+0x4c0>
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1d3      	bne.n	80087de <_dtoa_r+0x34e>
 8008836:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008838:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800883c:	2b00      	cmp	r3, #0
 800883e:	f000 8094 	beq.w	800896a <_dtoa_r+0x4da>
 8008842:	4b75      	ldr	r3, [pc, #468]	@ (8008a18 <_dtoa_r+0x588>)
 8008844:	2200      	movs	r2, #0
 8008846:	4620      	mov	r0, r4
 8008848:	4629      	mov	r1, r5
 800884a:	f7f8 f947 	bl	8000adc <__aeabi_dcmplt>
 800884e:	2800      	cmp	r0, #0
 8008850:	f000 808b 	beq.w	800896a <_dtoa_r+0x4da>
 8008854:	9b03      	ldr	r3, [sp, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 8087 	beq.w	800896a <_dtoa_r+0x4da>
 800885c:	f1bb 0f00 	cmp.w	fp, #0
 8008860:	dd34      	ble.n	80088cc <_dtoa_r+0x43c>
 8008862:	4620      	mov	r0, r4
 8008864:	4b6d      	ldr	r3, [pc, #436]	@ (8008a1c <_dtoa_r+0x58c>)
 8008866:	2200      	movs	r2, #0
 8008868:	4629      	mov	r1, r5
 800886a:	f7f7 fec5 	bl	80005f8 <__aeabi_dmul>
 800886e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008872:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8008876:	3601      	adds	r6, #1
 8008878:	465c      	mov	r4, fp
 800887a:	4630      	mov	r0, r6
 800887c:	f7f7 fe52 	bl	8000524 <__aeabi_i2d>
 8008880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008884:	f7f7 feb8 	bl	80005f8 <__aeabi_dmul>
 8008888:	4b65      	ldr	r3, [pc, #404]	@ (8008a20 <_dtoa_r+0x590>)
 800888a:	2200      	movs	r2, #0
 800888c:	f7f7 fcfe 	bl	800028c <__adddf3>
 8008890:	4605      	mov	r5, r0
 8008892:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008896:	2c00      	cmp	r4, #0
 8008898:	d16a      	bne.n	8008970 <_dtoa_r+0x4e0>
 800889a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800889e:	4b61      	ldr	r3, [pc, #388]	@ (8008a24 <_dtoa_r+0x594>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	f7f7 fcf1 	bl	8000288 <__aeabi_dsub>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088ae:	462a      	mov	r2, r5
 80088b0:	4633      	mov	r3, r6
 80088b2:	f7f8 f931 	bl	8000b18 <__aeabi_dcmpgt>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	f040 8298 	bne.w	8008dec <_dtoa_r+0x95c>
 80088bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088c0:	462a      	mov	r2, r5
 80088c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80088c6:	f7f8 f909 	bl	8000adc <__aeabi_dcmplt>
 80088ca:	bb38      	cbnz	r0, 800891c <_dtoa_r+0x48c>
 80088cc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80088d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80088d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f2c0 8157 	blt.w	8008b8a <_dtoa_r+0x6fa>
 80088dc:	2f0e      	cmp	r7, #14
 80088de:	f300 8154 	bgt.w	8008b8a <_dtoa_r+0x6fa>
 80088e2:	4b4b      	ldr	r3, [pc, #300]	@ (8008a10 <_dtoa_r+0x580>)
 80088e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80088e8:	ed93 7b00 	vldr	d7, [r3]
 80088ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	ed8d 7b00 	vstr	d7, [sp]
 80088f4:	f280 80e5 	bge.w	8008ac2 <_dtoa_r+0x632>
 80088f8:	9b03      	ldr	r3, [sp, #12]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f300 80e1 	bgt.w	8008ac2 <_dtoa_r+0x632>
 8008900:	d10c      	bne.n	800891c <_dtoa_r+0x48c>
 8008902:	4b48      	ldr	r3, [pc, #288]	@ (8008a24 <_dtoa_r+0x594>)
 8008904:	2200      	movs	r2, #0
 8008906:	ec51 0b17 	vmov	r0, r1, d7
 800890a:	f7f7 fe75 	bl	80005f8 <__aeabi_dmul>
 800890e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008912:	f7f8 f8f7 	bl	8000b04 <__aeabi_dcmpge>
 8008916:	2800      	cmp	r0, #0
 8008918:	f000 8266 	beq.w	8008de8 <_dtoa_r+0x958>
 800891c:	2400      	movs	r4, #0
 800891e:	4625      	mov	r5, r4
 8008920:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008922:	4656      	mov	r6, sl
 8008924:	ea6f 0803 	mvn.w	r8, r3
 8008928:	2700      	movs	r7, #0
 800892a:	4621      	mov	r1, r4
 800892c:	4648      	mov	r0, r9
 800892e:	f000 fe79 	bl	8009624 <_Bfree>
 8008932:	2d00      	cmp	r5, #0
 8008934:	f000 80bd 	beq.w	8008ab2 <_dtoa_r+0x622>
 8008938:	b12f      	cbz	r7, 8008946 <_dtoa_r+0x4b6>
 800893a:	42af      	cmp	r7, r5
 800893c:	d003      	beq.n	8008946 <_dtoa_r+0x4b6>
 800893e:	4639      	mov	r1, r7
 8008940:	4648      	mov	r0, r9
 8008942:	f000 fe6f 	bl	8009624 <_Bfree>
 8008946:	4629      	mov	r1, r5
 8008948:	4648      	mov	r0, r9
 800894a:	f000 fe6b 	bl	8009624 <_Bfree>
 800894e:	e0b0      	b.n	8008ab2 <_dtoa_r+0x622>
 8008950:	07e2      	lsls	r2, r4, #31
 8008952:	d505      	bpl.n	8008960 <_dtoa_r+0x4d0>
 8008954:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008958:	f7f7 fe4e 	bl	80005f8 <__aeabi_dmul>
 800895c:	3601      	adds	r6, #1
 800895e:	2301      	movs	r3, #1
 8008960:	1064      	asrs	r4, r4, #1
 8008962:	3508      	adds	r5, #8
 8008964:	e762      	b.n	800882c <_dtoa_r+0x39c>
 8008966:	2602      	movs	r6, #2
 8008968:	e765      	b.n	8008836 <_dtoa_r+0x3a6>
 800896a:	9c03      	ldr	r4, [sp, #12]
 800896c:	46b8      	mov	r8, r7
 800896e:	e784      	b.n	800887a <_dtoa_r+0x3ea>
 8008970:	4b27      	ldr	r3, [pc, #156]	@ (8008a10 <_dtoa_r+0x580>)
 8008972:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008974:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008978:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800897c:	4454      	add	r4, sl
 800897e:	2900      	cmp	r1, #0
 8008980:	d054      	beq.n	8008a2c <_dtoa_r+0x59c>
 8008982:	4929      	ldr	r1, [pc, #164]	@ (8008a28 <_dtoa_r+0x598>)
 8008984:	2000      	movs	r0, #0
 8008986:	f7f7 ff61 	bl	800084c <__aeabi_ddiv>
 800898a:	4633      	mov	r3, r6
 800898c:	462a      	mov	r2, r5
 800898e:	f7f7 fc7b 	bl	8000288 <__aeabi_dsub>
 8008992:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008996:	4656      	mov	r6, sl
 8008998:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800899c:	f7f8 f8dc 	bl	8000b58 <__aeabi_d2iz>
 80089a0:	4605      	mov	r5, r0
 80089a2:	f7f7 fdbf 	bl	8000524 <__aeabi_i2d>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089ae:	f7f7 fc6b 	bl	8000288 <__aeabi_dsub>
 80089b2:	3530      	adds	r5, #48	@ 0x30
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80089bc:	f806 5b01 	strb.w	r5, [r6], #1
 80089c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80089c4:	f7f8 f88a 	bl	8000adc <__aeabi_dcmplt>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	d172      	bne.n	8008ab2 <_dtoa_r+0x622>
 80089cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089d0:	4911      	ldr	r1, [pc, #68]	@ (8008a18 <_dtoa_r+0x588>)
 80089d2:	2000      	movs	r0, #0
 80089d4:	f7f7 fc58 	bl	8000288 <__aeabi_dsub>
 80089d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80089dc:	f7f8 f87e 	bl	8000adc <__aeabi_dcmplt>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	f040 80b4 	bne.w	8008b4e <_dtoa_r+0x6be>
 80089e6:	42a6      	cmp	r6, r4
 80089e8:	f43f af70 	beq.w	80088cc <_dtoa_r+0x43c>
 80089ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80089f0:	4b0a      	ldr	r3, [pc, #40]	@ (8008a1c <_dtoa_r+0x58c>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	f7f7 fe00 	bl	80005f8 <__aeabi_dmul>
 80089f8:	4b08      	ldr	r3, [pc, #32]	@ (8008a1c <_dtoa_r+0x58c>)
 80089fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80089fe:	2200      	movs	r2, #0
 8008a00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a04:	f7f7 fdf8 	bl	80005f8 <__aeabi_dmul>
 8008a08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a0c:	e7c4      	b.n	8008998 <_dtoa_r+0x508>
 8008a0e:	bf00      	nop
 8008a10:	0800a758 	.word	0x0800a758
 8008a14:	0800a730 	.word	0x0800a730
 8008a18:	3ff00000 	.word	0x3ff00000
 8008a1c:	40240000 	.word	0x40240000
 8008a20:	401c0000 	.word	0x401c0000
 8008a24:	40140000 	.word	0x40140000
 8008a28:	3fe00000 	.word	0x3fe00000
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f7f7 fde2 	bl	80005f8 <__aeabi_dmul>
 8008a34:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008a38:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008a3a:	4656      	mov	r6, sl
 8008a3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a40:	f7f8 f88a 	bl	8000b58 <__aeabi_d2iz>
 8008a44:	4605      	mov	r5, r0
 8008a46:	f7f7 fd6d 	bl	8000524 <__aeabi_i2d>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a52:	f7f7 fc19 	bl	8000288 <__aeabi_dsub>
 8008a56:	3530      	adds	r5, #48	@ 0x30
 8008a58:	f806 5b01 	strb.w	r5, [r6], #1
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	42a6      	cmp	r6, r4
 8008a62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a66:	f04f 0200 	mov.w	r2, #0
 8008a6a:	d124      	bne.n	8008ab6 <_dtoa_r+0x626>
 8008a6c:	4baf      	ldr	r3, [pc, #700]	@ (8008d2c <_dtoa_r+0x89c>)
 8008a6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008a72:	f7f7 fc0b 	bl	800028c <__adddf3>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a7e:	f7f8 f84b 	bl	8000b18 <__aeabi_dcmpgt>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d163      	bne.n	8008b4e <_dtoa_r+0x6be>
 8008a86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008a8a:	49a8      	ldr	r1, [pc, #672]	@ (8008d2c <_dtoa_r+0x89c>)
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	f7f7 fbfb 	bl	8000288 <__aeabi_dsub>
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a9a:	f7f8 f81f 	bl	8000adc <__aeabi_dcmplt>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	f43f af14 	beq.w	80088cc <_dtoa_r+0x43c>
 8008aa4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008aa6:	1e73      	subs	r3, r6, #1
 8008aa8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008aaa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008aae:	2b30      	cmp	r3, #48	@ 0x30
 8008ab0:	d0f8      	beq.n	8008aa4 <_dtoa_r+0x614>
 8008ab2:	4647      	mov	r7, r8
 8008ab4:	e03b      	b.n	8008b2e <_dtoa_r+0x69e>
 8008ab6:	4b9e      	ldr	r3, [pc, #632]	@ (8008d30 <_dtoa_r+0x8a0>)
 8008ab8:	f7f7 fd9e 	bl	80005f8 <__aeabi_dmul>
 8008abc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ac0:	e7bc      	b.n	8008a3c <_dtoa_r+0x5ac>
 8008ac2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008ac6:	4656      	mov	r6, sl
 8008ac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008acc:	4620      	mov	r0, r4
 8008ace:	4629      	mov	r1, r5
 8008ad0:	f7f7 febc 	bl	800084c <__aeabi_ddiv>
 8008ad4:	f7f8 f840 	bl	8000b58 <__aeabi_d2iz>
 8008ad8:	4680      	mov	r8, r0
 8008ada:	f7f7 fd23 	bl	8000524 <__aeabi_i2d>
 8008ade:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ae2:	f7f7 fd89 	bl	80005f8 <__aeabi_dmul>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4620      	mov	r0, r4
 8008aec:	4629      	mov	r1, r5
 8008aee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008af2:	f7f7 fbc9 	bl	8000288 <__aeabi_dsub>
 8008af6:	f806 4b01 	strb.w	r4, [r6], #1
 8008afa:	9d03      	ldr	r5, [sp, #12]
 8008afc:	eba6 040a 	sub.w	r4, r6, sl
 8008b00:	42a5      	cmp	r5, r4
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	d133      	bne.n	8008b70 <_dtoa_r+0x6e0>
 8008b08:	f7f7 fbc0 	bl	800028c <__adddf3>
 8008b0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b10:	4604      	mov	r4, r0
 8008b12:	460d      	mov	r5, r1
 8008b14:	f7f8 f800 	bl	8000b18 <__aeabi_dcmpgt>
 8008b18:	b9c0      	cbnz	r0, 8008b4c <_dtoa_r+0x6bc>
 8008b1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b1e:	4620      	mov	r0, r4
 8008b20:	4629      	mov	r1, r5
 8008b22:	f7f7 ffd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b26:	b110      	cbz	r0, 8008b2e <_dtoa_r+0x69e>
 8008b28:	f018 0f01 	tst.w	r8, #1
 8008b2c:	d10e      	bne.n	8008b4c <_dtoa_r+0x6bc>
 8008b2e:	9902      	ldr	r1, [sp, #8]
 8008b30:	4648      	mov	r0, r9
 8008b32:	f000 fd77 	bl	8009624 <_Bfree>
 8008b36:	2300      	movs	r3, #0
 8008b38:	7033      	strb	r3, [r6, #0]
 8008b3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008b3c:	3701      	adds	r7, #1
 8008b3e:	601f      	str	r7, [r3, #0]
 8008b40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 824b 	beq.w	8008fde <_dtoa_r+0xb4e>
 8008b48:	601e      	str	r6, [r3, #0]
 8008b4a:	e248      	b.n	8008fde <_dtoa_r+0xb4e>
 8008b4c:	46b8      	mov	r8, r7
 8008b4e:	4633      	mov	r3, r6
 8008b50:	461e      	mov	r6, r3
 8008b52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b56:	2a39      	cmp	r2, #57	@ 0x39
 8008b58:	d106      	bne.n	8008b68 <_dtoa_r+0x6d8>
 8008b5a:	459a      	cmp	sl, r3
 8008b5c:	d1f8      	bne.n	8008b50 <_dtoa_r+0x6c0>
 8008b5e:	2230      	movs	r2, #48	@ 0x30
 8008b60:	f108 0801 	add.w	r8, r8, #1
 8008b64:	f88a 2000 	strb.w	r2, [sl]
 8008b68:	781a      	ldrb	r2, [r3, #0]
 8008b6a:	3201      	adds	r2, #1
 8008b6c:	701a      	strb	r2, [r3, #0]
 8008b6e:	e7a0      	b.n	8008ab2 <_dtoa_r+0x622>
 8008b70:	4b6f      	ldr	r3, [pc, #444]	@ (8008d30 <_dtoa_r+0x8a0>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	f7f7 fd40 	bl	80005f8 <__aeabi_dmul>
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	460d      	mov	r5, r1
 8008b80:	f7f7 ffa2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d09f      	beq.n	8008ac8 <_dtoa_r+0x638>
 8008b88:	e7d1      	b.n	8008b2e <_dtoa_r+0x69e>
 8008b8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b8c:	2a00      	cmp	r2, #0
 8008b8e:	f000 80ea 	beq.w	8008d66 <_dtoa_r+0x8d6>
 8008b92:	9a07      	ldr	r2, [sp, #28]
 8008b94:	2a01      	cmp	r2, #1
 8008b96:	f300 80cd 	bgt.w	8008d34 <_dtoa_r+0x8a4>
 8008b9a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008b9c:	2a00      	cmp	r2, #0
 8008b9e:	f000 80c1 	beq.w	8008d24 <_dtoa_r+0x894>
 8008ba2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008ba6:	9c08      	ldr	r4, [sp, #32]
 8008ba8:	9e00      	ldr	r6, [sp, #0]
 8008baa:	9a00      	ldr	r2, [sp, #0]
 8008bac:	441a      	add	r2, r3
 8008bae:	9200      	str	r2, [sp, #0]
 8008bb0:	9a06      	ldr	r2, [sp, #24]
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	441a      	add	r2, r3
 8008bb6:	4648      	mov	r0, r9
 8008bb8:	9206      	str	r2, [sp, #24]
 8008bba:	f000 fde7 	bl	800978c <__i2b>
 8008bbe:	4605      	mov	r5, r0
 8008bc0:	b166      	cbz	r6, 8008bdc <_dtoa_r+0x74c>
 8008bc2:	9b06      	ldr	r3, [sp, #24]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	dd09      	ble.n	8008bdc <_dtoa_r+0x74c>
 8008bc8:	42b3      	cmp	r3, r6
 8008bca:	9a00      	ldr	r2, [sp, #0]
 8008bcc:	bfa8      	it	ge
 8008bce:	4633      	movge	r3, r6
 8008bd0:	1ad2      	subs	r2, r2, r3
 8008bd2:	9200      	str	r2, [sp, #0]
 8008bd4:	9a06      	ldr	r2, [sp, #24]
 8008bd6:	1af6      	subs	r6, r6, r3
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	9306      	str	r3, [sp, #24]
 8008bdc:	9b08      	ldr	r3, [sp, #32]
 8008bde:	b30b      	cbz	r3, 8008c24 <_dtoa_r+0x794>
 8008be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f000 80c6 	beq.w	8008d74 <_dtoa_r+0x8e4>
 8008be8:	2c00      	cmp	r4, #0
 8008bea:	f000 80c0 	beq.w	8008d6e <_dtoa_r+0x8de>
 8008bee:	4629      	mov	r1, r5
 8008bf0:	4622      	mov	r2, r4
 8008bf2:	4648      	mov	r0, r9
 8008bf4:	f000 fe82 	bl	80098fc <__pow5mult>
 8008bf8:	9a02      	ldr	r2, [sp, #8]
 8008bfa:	4601      	mov	r1, r0
 8008bfc:	4605      	mov	r5, r0
 8008bfe:	4648      	mov	r0, r9
 8008c00:	f000 fdda 	bl	80097b8 <__multiply>
 8008c04:	9902      	ldr	r1, [sp, #8]
 8008c06:	4680      	mov	r8, r0
 8008c08:	4648      	mov	r0, r9
 8008c0a:	f000 fd0b 	bl	8009624 <_Bfree>
 8008c0e:	9b08      	ldr	r3, [sp, #32]
 8008c10:	1b1b      	subs	r3, r3, r4
 8008c12:	9308      	str	r3, [sp, #32]
 8008c14:	f000 80b1 	beq.w	8008d7a <_dtoa_r+0x8ea>
 8008c18:	9a08      	ldr	r2, [sp, #32]
 8008c1a:	4641      	mov	r1, r8
 8008c1c:	4648      	mov	r0, r9
 8008c1e:	f000 fe6d 	bl	80098fc <__pow5mult>
 8008c22:	9002      	str	r0, [sp, #8]
 8008c24:	2101      	movs	r1, #1
 8008c26:	4648      	mov	r0, r9
 8008c28:	f000 fdb0 	bl	800978c <__i2b>
 8008c2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c2e:	4604      	mov	r4, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 81d8 	beq.w	8008fe6 <_dtoa_r+0xb56>
 8008c36:	461a      	mov	r2, r3
 8008c38:	4601      	mov	r1, r0
 8008c3a:	4648      	mov	r0, r9
 8008c3c:	f000 fe5e 	bl	80098fc <__pow5mult>
 8008c40:	9b07      	ldr	r3, [sp, #28]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	4604      	mov	r4, r0
 8008c46:	f300 809f 	bgt.w	8008d88 <_dtoa_r+0x8f8>
 8008c4a:	9b04      	ldr	r3, [sp, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f040 8097 	bne.w	8008d80 <_dtoa_r+0x8f0>
 8008c52:	9b05      	ldr	r3, [sp, #20]
 8008c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f040 8093 	bne.w	8008d84 <_dtoa_r+0x8f4>
 8008c5e:	9b05      	ldr	r3, [sp, #20]
 8008c60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c64:	0d1b      	lsrs	r3, r3, #20
 8008c66:	051b      	lsls	r3, r3, #20
 8008c68:	b133      	cbz	r3, 8008c78 <_dtoa_r+0x7e8>
 8008c6a:	9b00      	ldr	r3, [sp, #0]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	9b06      	ldr	r3, [sp, #24]
 8008c72:	3301      	adds	r3, #1
 8008c74:	9306      	str	r3, [sp, #24]
 8008c76:	2301      	movs	r3, #1
 8008c78:	9308      	str	r3, [sp, #32]
 8008c7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 81b8 	beq.w	8008ff2 <_dtoa_r+0xb62>
 8008c82:	6923      	ldr	r3, [r4, #16]
 8008c84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c88:	6918      	ldr	r0, [r3, #16]
 8008c8a:	f000 fd33 	bl	80096f4 <__hi0bits>
 8008c8e:	f1c0 0020 	rsb	r0, r0, #32
 8008c92:	9b06      	ldr	r3, [sp, #24]
 8008c94:	4418      	add	r0, r3
 8008c96:	f010 001f 	ands.w	r0, r0, #31
 8008c9a:	f000 8082 	beq.w	8008da2 <_dtoa_r+0x912>
 8008c9e:	f1c0 0320 	rsb	r3, r0, #32
 8008ca2:	2b04      	cmp	r3, #4
 8008ca4:	dd73      	ble.n	8008d8e <_dtoa_r+0x8fe>
 8008ca6:	9b00      	ldr	r3, [sp, #0]
 8008ca8:	f1c0 001c 	rsb	r0, r0, #28
 8008cac:	4403      	add	r3, r0
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	9b06      	ldr	r3, [sp, #24]
 8008cb2:	4403      	add	r3, r0
 8008cb4:	4406      	add	r6, r0
 8008cb6:	9306      	str	r3, [sp, #24]
 8008cb8:	9b00      	ldr	r3, [sp, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	dd05      	ble.n	8008cca <_dtoa_r+0x83a>
 8008cbe:	9902      	ldr	r1, [sp, #8]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	4648      	mov	r0, r9
 8008cc4:	f000 fe74 	bl	80099b0 <__lshift>
 8008cc8:	9002      	str	r0, [sp, #8]
 8008cca:	9b06      	ldr	r3, [sp, #24]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	dd05      	ble.n	8008cdc <_dtoa_r+0x84c>
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	4648      	mov	r0, r9
 8008cd6:	f000 fe6b 	bl	80099b0 <__lshift>
 8008cda:	4604      	mov	r4, r0
 8008cdc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d061      	beq.n	8008da6 <_dtoa_r+0x916>
 8008ce2:	9802      	ldr	r0, [sp, #8]
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	f000 fecf 	bl	8009a88 <__mcmp>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	da5b      	bge.n	8008da6 <_dtoa_r+0x916>
 8008cee:	2300      	movs	r3, #0
 8008cf0:	9902      	ldr	r1, [sp, #8]
 8008cf2:	220a      	movs	r2, #10
 8008cf4:	4648      	mov	r0, r9
 8008cf6:	f000 fcb7 	bl	8009668 <__multadd>
 8008cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cfc:	9002      	str	r0, [sp, #8]
 8008cfe:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 8177 	beq.w	8008ff6 <_dtoa_r+0xb66>
 8008d08:	4629      	mov	r1, r5
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	220a      	movs	r2, #10
 8008d0e:	4648      	mov	r0, r9
 8008d10:	f000 fcaa 	bl	8009668 <__multadd>
 8008d14:	f1bb 0f00 	cmp.w	fp, #0
 8008d18:	4605      	mov	r5, r0
 8008d1a:	dc6f      	bgt.n	8008dfc <_dtoa_r+0x96c>
 8008d1c:	9b07      	ldr	r3, [sp, #28]
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	dc49      	bgt.n	8008db6 <_dtoa_r+0x926>
 8008d22:	e06b      	b.n	8008dfc <_dtoa_r+0x96c>
 8008d24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008d26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008d2a:	e73c      	b.n	8008ba6 <_dtoa_r+0x716>
 8008d2c:	3fe00000 	.word	0x3fe00000
 8008d30:	40240000 	.word	0x40240000
 8008d34:	9b03      	ldr	r3, [sp, #12]
 8008d36:	1e5c      	subs	r4, r3, #1
 8008d38:	9b08      	ldr	r3, [sp, #32]
 8008d3a:	42a3      	cmp	r3, r4
 8008d3c:	db09      	blt.n	8008d52 <_dtoa_r+0x8c2>
 8008d3e:	1b1c      	subs	r4, r3, r4
 8008d40:	9b03      	ldr	r3, [sp, #12]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f6bf af30 	bge.w	8008ba8 <_dtoa_r+0x718>
 8008d48:	9b00      	ldr	r3, [sp, #0]
 8008d4a:	9a03      	ldr	r2, [sp, #12]
 8008d4c:	1a9e      	subs	r6, r3, r2
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e72b      	b.n	8008baa <_dtoa_r+0x71a>
 8008d52:	9b08      	ldr	r3, [sp, #32]
 8008d54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d56:	9408      	str	r4, [sp, #32]
 8008d58:	1ae3      	subs	r3, r4, r3
 8008d5a:	441a      	add	r2, r3
 8008d5c:	9e00      	ldr	r6, [sp, #0]
 8008d5e:	9b03      	ldr	r3, [sp, #12]
 8008d60:	920d      	str	r2, [sp, #52]	@ 0x34
 8008d62:	2400      	movs	r4, #0
 8008d64:	e721      	b.n	8008baa <_dtoa_r+0x71a>
 8008d66:	9c08      	ldr	r4, [sp, #32]
 8008d68:	9e00      	ldr	r6, [sp, #0]
 8008d6a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008d6c:	e728      	b.n	8008bc0 <_dtoa_r+0x730>
 8008d6e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008d72:	e751      	b.n	8008c18 <_dtoa_r+0x788>
 8008d74:	9a08      	ldr	r2, [sp, #32]
 8008d76:	9902      	ldr	r1, [sp, #8]
 8008d78:	e750      	b.n	8008c1c <_dtoa_r+0x78c>
 8008d7a:	f8cd 8008 	str.w	r8, [sp, #8]
 8008d7e:	e751      	b.n	8008c24 <_dtoa_r+0x794>
 8008d80:	2300      	movs	r3, #0
 8008d82:	e779      	b.n	8008c78 <_dtoa_r+0x7e8>
 8008d84:	9b04      	ldr	r3, [sp, #16]
 8008d86:	e777      	b.n	8008c78 <_dtoa_r+0x7e8>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	9308      	str	r3, [sp, #32]
 8008d8c:	e779      	b.n	8008c82 <_dtoa_r+0x7f2>
 8008d8e:	d093      	beq.n	8008cb8 <_dtoa_r+0x828>
 8008d90:	9a00      	ldr	r2, [sp, #0]
 8008d92:	331c      	adds	r3, #28
 8008d94:	441a      	add	r2, r3
 8008d96:	9200      	str	r2, [sp, #0]
 8008d98:	9a06      	ldr	r2, [sp, #24]
 8008d9a:	441a      	add	r2, r3
 8008d9c:	441e      	add	r6, r3
 8008d9e:	9206      	str	r2, [sp, #24]
 8008da0:	e78a      	b.n	8008cb8 <_dtoa_r+0x828>
 8008da2:	4603      	mov	r3, r0
 8008da4:	e7f4      	b.n	8008d90 <_dtoa_r+0x900>
 8008da6:	9b03      	ldr	r3, [sp, #12]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	46b8      	mov	r8, r7
 8008dac:	dc20      	bgt.n	8008df0 <_dtoa_r+0x960>
 8008dae:	469b      	mov	fp, r3
 8008db0:	9b07      	ldr	r3, [sp, #28]
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	dd1e      	ble.n	8008df4 <_dtoa_r+0x964>
 8008db6:	f1bb 0f00 	cmp.w	fp, #0
 8008dba:	f47f adb1 	bne.w	8008920 <_dtoa_r+0x490>
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	465b      	mov	r3, fp
 8008dc2:	2205      	movs	r2, #5
 8008dc4:	4648      	mov	r0, r9
 8008dc6:	f000 fc4f 	bl	8009668 <__multadd>
 8008dca:	4601      	mov	r1, r0
 8008dcc:	4604      	mov	r4, r0
 8008dce:	9802      	ldr	r0, [sp, #8]
 8008dd0:	f000 fe5a 	bl	8009a88 <__mcmp>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	f77f ada3 	ble.w	8008920 <_dtoa_r+0x490>
 8008dda:	4656      	mov	r6, sl
 8008ddc:	2331      	movs	r3, #49	@ 0x31
 8008dde:	f806 3b01 	strb.w	r3, [r6], #1
 8008de2:	f108 0801 	add.w	r8, r8, #1
 8008de6:	e59f      	b.n	8008928 <_dtoa_r+0x498>
 8008de8:	9c03      	ldr	r4, [sp, #12]
 8008dea:	46b8      	mov	r8, r7
 8008dec:	4625      	mov	r5, r4
 8008dee:	e7f4      	b.n	8008dda <_dtoa_r+0x94a>
 8008df0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008df4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 8101 	beq.w	8008ffe <_dtoa_r+0xb6e>
 8008dfc:	2e00      	cmp	r6, #0
 8008dfe:	dd05      	ble.n	8008e0c <_dtoa_r+0x97c>
 8008e00:	4629      	mov	r1, r5
 8008e02:	4632      	mov	r2, r6
 8008e04:	4648      	mov	r0, r9
 8008e06:	f000 fdd3 	bl	80099b0 <__lshift>
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	9b08      	ldr	r3, [sp, #32]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d05c      	beq.n	8008ecc <_dtoa_r+0xa3c>
 8008e12:	6869      	ldr	r1, [r5, #4]
 8008e14:	4648      	mov	r0, r9
 8008e16:	f000 fbc5 	bl	80095a4 <_Balloc>
 8008e1a:	4606      	mov	r6, r0
 8008e1c:	b928      	cbnz	r0, 8008e2a <_dtoa_r+0x99a>
 8008e1e:	4b82      	ldr	r3, [pc, #520]	@ (8009028 <_dtoa_r+0xb98>)
 8008e20:	4602      	mov	r2, r0
 8008e22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008e26:	f7ff bb4a 	b.w	80084be <_dtoa_r+0x2e>
 8008e2a:	692a      	ldr	r2, [r5, #16]
 8008e2c:	3202      	adds	r2, #2
 8008e2e:	0092      	lsls	r2, r2, #2
 8008e30:	f105 010c 	add.w	r1, r5, #12
 8008e34:	300c      	adds	r0, #12
 8008e36:	f001 f811 	bl	8009e5c <memcpy>
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	4631      	mov	r1, r6
 8008e3e:	4648      	mov	r0, r9
 8008e40:	f000 fdb6 	bl	80099b0 <__lshift>
 8008e44:	f10a 0301 	add.w	r3, sl, #1
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	eb0a 030b 	add.w	r3, sl, fp
 8008e4e:	9308      	str	r3, [sp, #32]
 8008e50:	9b04      	ldr	r3, [sp, #16]
 8008e52:	f003 0301 	and.w	r3, r3, #1
 8008e56:	462f      	mov	r7, r5
 8008e58:	9306      	str	r3, [sp, #24]
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	9b00      	ldr	r3, [sp, #0]
 8008e5e:	9802      	ldr	r0, [sp, #8]
 8008e60:	4621      	mov	r1, r4
 8008e62:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8008e66:	f7ff fa8b 	bl	8008380 <quorem>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	3330      	adds	r3, #48	@ 0x30
 8008e6e:	9003      	str	r0, [sp, #12]
 8008e70:	4639      	mov	r1, r7
 8008e72:	9802      	ldr	r0, [sp, #8]
 8008e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e76:	f000 fe07 	bl	8009a88 <__mcmp>
 8008e7a:	462a      	mov	r2, r5
 8008e7c:	9004      	str	r0, [sp, #16]
 8008e7e:	4621      	mov	r1, r4
 8008e80:	4648      	mov	r0, r9
 8008e82:	f000 fe1d 	bl	8009ac0 <__mdiff>
 8008e86:	68c2      	ldr	r2, [r0, #12]
 8008e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	bb02      	cbnz	r2, 8008ed0 <_dtoa_r+0xa40>
 8008e8e:	4601      	mov	r1, r0
 8008e90:	9802      	ldr	r0, [sp, #8]
 8008e92:	f000 fdf9 	bl	8009a88 <__mcmp>
 8008e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e98:	4602      	mov	r2, r0
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	4648      	mov	r0, r9
 8008e9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ea2:	f000 fbbf 	bl	8009624 <_Bfree>
 8008ea6:	9b07      	ldr	r3, [sp, #28]
 8008ea8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008eaa:	9e00      	ldr	r6, [sp, #0]
 8008eac:	ea42 0103 	orr.w	r1, r2, r3
 8008eb0:	9b06      	ldr	r3, [sp, #24]
 8008eb2:	4319      	orrs	r1, r3
 8008eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eb6:	d10d      	bne.n	8008ed4 <_dtoa_r+0xa44>
 8008eb8:	2b39      	cmp	r3, #57	@ 0x39
 8008eba:	d027      	beq.n	8008f0c <_dtoa_r+0xa7c>
 8008ebc:	9a04      	ldr	r2, [sp, #16]
 8008ebe:	2a00      	cmp	r2, #0
 8008ec0:	dd01      	ble.n	8008ec6 <_dtoa_r+0xa36>
 8008ec2:	9b03      	ldr	r3, [sp, #12]
 8008ec4:	3331      	adds	r3, #49	@ 0x31
 8008ec6:	f88b 3000 	strb.w	r3, [fp]
 8008eca:	e52e      	b.n	800892a <_dtoa_r+0x49a>
 8008ecc:	4628      	mov	r0, r5
 8008ece:	e7b9      	b.n	8008e44 <_dtoa_r+0x9b4>
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	e7e2      	b.n	8008e9a <_dtoa_r+0xa0a>
 8008ed4:	9904      	ldr	r1, [sp, #16]
 8008ed6:	2900      	cmp	r1, #0
 8008ed8:	db04      	blt.n	8008ee4 <_dtoa_r+0xa54>
 8008eda:	9807      	ldr	r0, [sp, #28]
 8008edc:	4301      	orrs	r1, r0
 8008ede:	9806      	ldr	r0, [sp, #24]
 8008ee0:	4301      	orrs	r1, r0
 8008ee2:	d120      	bne.n	8008f26 <_dtoa_r+0xa96>
 8008ee4:	2a00      	cmp	r2, #0
 8008ee6:	ddee      	ble.n	8008ec6 <_dtoa_r+0xa36>
 8008ee8:	9902      	ldr	r1, [sp, #8]
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	2201      	movs	r2, #1
 8008eee:	4648      	mov	r0, r9
 8008ef0:	f000 fd5e 	bl	80099b0 <__lshift>
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	9002      	str	r0, [sp, #8]
 8008ef8:	f000 fdc6 	bl	8009a88 <__mcmp>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	9b00      	ldr	r3, [sp, #0]
 8008f00:	dc02      	bgt.n	8008f08 <_dtoa_r+0xa78>
 8008f02:	d1e0      	bne.n	8008ec6 <_dtoa_r+0xa36>
 8008f04:	07da      	lsls	r2, r3, #31
 8008f06:	d5de      	bpl.n	8008ec6 <_dtoa_r+0xa36>
 8008f08:	2b39      	cmp	r3, #57	@ 0x39
 8008f0a:	d1da      	bne.n	8008ec2 <_dtoa_r+0xa32>
 8008f0c:	2339      	movs	r3, #57	@ 0x39
 8008f0e:	f88b 3000 	strb.w	r3, [fp]
 8008f12:	4633      	mov	r3, r6
 8008f14:	461e      	mov	r6, r3
 8008f16:	3b01      	subs	r3, #1
 8008f18:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008f1c:	2a39      	cmp	r2, #57	@ 0x39
 8008f1e:	d04e      	beq.n	8008fbe <_dtoa_r+0xb2e>
 8008f20:	3201      	adds	r2, #1
 8008f22:	701a      	strb	r2, [r3, #0]
 8008f24:	e501      	b.n	800892a <_dtoa_r+0x49a>
 8008f26:	2a00      	cmp	r2, #0
 8008f28:	dd03      	ble.n	8008f32 <_dtoa_r+0xaa2>
 8008f2a:	2b39      	cmp	r3, #57	@ 0x39
 8008f2c:	d0ee      	beq.n	8008f0c <_dtoa_r+0xa7c>
 8008f2e:	3301      	adds	r3, #1
 8008f30:	e7c9      	b.n	8008ec6 <_dtoa_r+0xa36>
 8008f32:	9a00      	ldr	r2, [sp, #0]
 8008f34:	9908      	ldr	r1, [sp, #32]
 8008f36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008f3a:	428a      	cmp	r2, r1
 8008f3c:	d028      	beq.n	8008f90 <_dtoa_r+0xb00>
 8008f3e:	9902      	ldr	r1, [sp, #8]
 8008f40:	2300      	movs	r3, #0
 8008f42:	220a      	movs	r2, #10
 8008f44:	4648      	mov	r0, r9
 8008f46:	f000 fb8f 	bl	8009668 <__multadd>
 8008f4a:	42af      	cmp	r7, r5
 8008f4c:	9002      	str	r0, [sp, #8]
 8008f4e:	f04f 0300 	mov.w	r3, #0
 8008f52:	f04f 020a 	mov.w	r2, #10
 8008f56:	4639      	mov	r1, r7
 8008f58:	4648      	mov	r0, r9
 8008f5a:	d107      	bne.n	8008f6c <_dtoa_r+0xadc>
 8008f5c:	f000 fb84 	bl	8009668 <__multadd>
 8008f60:	4607      	mov	r7, r0
 8008f62:	4605      	mov	r5, r0
 8008f64:	9b00      	ldr	r3, [sp, #0]
 8008f66:	3301      	adds	r3, #1
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	e777      	b.n	8008e5c <_dtoa_r+0x9cc>
 8008f6c:	f000 fb7c 	bl	8009668 <__multadd>
 8008f70:	4629      	mov	r1, r5
 8008f72:	4607      	mov	r7, r0
 8008f74:	2300      	movs	r3, #0
 8008f76:	220a      	movs	r2, #10
 8008f78:	4648      	mov	r0, r9
 8008f7a:	f000 fb75 	bl	8009668 <__multadd>
 8008f7e:	4605      	mov	r5, r0
 8008f80:	e7f0      	b.n	8008f64 <_dtoa_r+0xad4>
 8008f82:	f1bb 0f00 	cmp.w	fp, #0
 8008f86:	bfcc      	ite	gt
 8008f88:	465e      	movgt	r6, fp
 8008f8a:	2601      	movle	r6, #1
 8008f8c:	4456      	add	r6, sl
 8008f8e:	2700      	movs	r7, #0
 8008f90:	9902      	ldr	r1, [sp, #8]
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	2201      	movs	r2, #1
 8008f96:	4648      	mov	r0, r9
 8008f98:	f000 fd0a 	bl	80099b0 <__lshift>
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	9002      	str	r0, [sp, #8]
 8008fa0:	f000 fd72 	bl	8009a88 <__mcmp>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	dcb4      	bgt.n	8008f12 <_dtoa_r+0xa82>
 8008fa8:	d102      	bne.n	8008fb0 <_dtoa_r+0xb20>
 8008faa:	9b00      	ldr	r3, [sp, #0]
 8008fac:	07db      	lsls	r3, r3, #31
 8008fae:	d4b0      	bmi.n	8008f12 <_dtoa_r+0xa82>
 8008fb0:	4633      	mov	r3, r6
 8008fb2:	461e      	mov	r6, r3
 8008fb4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fb8:	2a30      	cmp	r2, #48	@ 0x30
 8008fba:	d0fa      	beq.n	8008fb2 <_dtoa_r+0xb22>
 8008fbc:	e4b5      	b.n	800892a <_dtoa_r+0x49a>
 8008fbe:	459a      	cmp	sl, r3
 8008fc0:	d1a8      	bne.n	8008f14 <_dtoa_r+0xa84>
 8008fc2:	2331      	movs	r3, #49	@ 0x31
 8008fc4:	f108 0801 	add.w	r8, r8, #1
 8008fc8:	f88a 3000 	strb.w	r3, [sl]
 8008fcc:	e4ad      	b.n	800892a <_dtoa_r+0x49a>
 8008fce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008fd0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800902c <_dtoa_r+0xb9c>
 8008fd4:	b11b      	cbz	r3, 8008fde <_dtoa_r+0xb4e>
 8008fd6:	f10a 0308 	add.w	r3, sl, #8
 8008fda:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008fdc:	6013      	str	r3, [r2, #0]
 8008fde:	4650      	mov	r0, sl
 8008fe0:	b017      	add	sp, #92	@ 0x5c
 8008fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe6:	9b07      	ldr	r3, [sp, #28]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	f77f ae2e 	ble.w	8008c4a <_dtoa_r+0x7ba>
 8008fee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ff0:	9308      	str	r3, [sp, #32]
 8008ff2:	2001      	movs	r0, #1
 8008ff4:	e64d      	b.n	8008c92 <_dtoa_r+0x802>
 8008ff6:	f1bb 0f00 	cmp.w	fp, #0
 8008ffa:	f77f aed9 	ble.w	8008db0 <_dtoa_r+0x920>
 8008ffe:	4656      	mov	r6, sl
 8009000:	9802      	ldr	r0, [sp, #8]
 8009002:	4621      	mov	r1, r4
 8009004:	f7ff f9bc 	bl	8008380 <quorem>
 8009008:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800900c:	f806 3b01 	strb.w	r3, [r6], #1
 8009010:	eba6 020a 	sub.w	r2, r6, sl
 8009014:	4593      	cmp	fp, r2
 8009016:	ddb4      	ble.n	8008f82 <_dtoa_r+0xaf2>
 8009018:	9902      	ldr	r1, [sp, #8]
 800901a:	2300      	movs	r3, #0
 800901c:	220a      	movs	r2, #10
 800901e:	4648      	mov	r0, r9
 8009020:	f000 fb22 	bl	8009668 <__multadd>
 8009024:	9002      	str	r0, [sp, #8]
 8009026:	e7eb      	b.n	8009000 <_dtoa_r+0xb70>
 8009028:	0800a660 	.word	0x0800a660
 800902c:	0800a5e4 	.word	0x0800a5e4

08009030 <__ssputs_r>:
 8009030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009034:	688e      	ldr	r6, [r1, #8]
 8009036:	461f      	mov	r7, r3
 8009038:	42be      	cmp	r6, r7
 800903a:	680b      	ldr	r3, [r1, #0]
 800903c:	4682      	mov	sl, r0
 800903e:	460c      	mov	r4, r1
 8009040:	4690      	mov	r8, r2
 8009042:	d82d      	bhi.n	80090a0 <__ssputs_r+0x70>
 8009044:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009048:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800904c:	d026      	beq.n	800909c <__ssputs_r+0x6c>
 800904e:	6965      	ldr	r5, [r4, #20]
 8009050:	6909      	ldr	r1, [r1, #16]
 8009052:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009056:	eba3 0901 	sub.w	r9, r3, r1
 800905a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800905e:	1c7b      	adds	r3, r7, #1
 8009060:	444b      	add	r3, r9
 8009062:	106d      	asrs	r5, r5, #1
 8009064:	429d      	cmp	r5, r3
 8009066:	bf38      	it	cc
 8009068:	461d      	movcc	r5, r3
 800906a:	0553      	lsls	r3, r2, #21
 800906c:	d527      	bpl.n	80090be <__ssputs_r+0x8e>
 800906e:	4629      	mov	r1, r5
 8009070:	f000 f960 	bl	8009334 <_malloc_r>
 8009074:	4606      	mov	r6, r0
 8009076:	b360      	cbz	r0, 80090d2 <__ssputs_r+0xa2>
 8009078:	6921      	ldr	r1, [r4, #16]
 800907a:	464a      	mov	r2, r9
 800907c:	f000 feee 	bl	8009e5c <memcpy>
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800908a:	81a3      	strh	r3, [r4, #12]
 800908c:	6126      	str	r6, [r4, #16]
 800908e:	6165      	str	r5, [r4, #20]
 8009090:	444e      	add	r6, r9
 8009092:	eba5 0509 	sub.w	r5, r5, r9
 8009096:	6026      	str	r6, [r4, #0]
 8009098:	60a5      	str	r5, [r4, #8]
 800909a:	463e      	mov	r6, r7
 800909c:	42be      	cmp	r6, r7
 800909e:	d900      	bls.n	80090a2 <__ssputs_r+0x72>
 80090a0:	463e      	mov	r6, r7
 80090a2:	6820      	ldr	r0, [r4, #0]
 80090a4:	4632      	mov	r2, r6
 80090a6:	4641      	mov	r1, r8
 80090a8:	f000 fe67 	bl	8009d7a <memmove>
 80090ac:	68a3      	ldr	r3, [r4, #8]
 80090ae:	1b9b      	subs	r3, r3, r6
 80090b0:	60a3      	str	r3, [r4, #8]
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	4433      	add	r3, r6
 80090b6:	6023      	str	r3, [r4, #0]
 80090b8:	2000      	movs	r0, #0
 80090ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090be:	462a      	mov	r2, r5
 80090c0:	f000 fe2d 	bl	8009d1e <_realloc_r>
 80090c4:	4606      	mov	r6, r0
 80090c6:	2800      	cmp	r0, #0
 80090c8:	d1e0      	bne.n	800908c <__ssputs_r+0x5c>
 80090ca:	6921      	ldr	r1, [r4, #16]
 80090cc:	4650      	mov	r0, sl
 80090ce:	f000 ff05 	bl	8009edc <_free_r>
 80090d2:	230c      	movs	r3, #12
 80090d4:	f8ca 3000 	str.w	r3, [sl]
 80090d8:	89a3      	ldrh	r3, [r4, #12]
 80090da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090de:	81a3      	strh	r3, [r4, #12]
 80090e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090e4:	e7e9      	b.n	80090ba <__ssputs_r+0x8a>
	...

080090e8 <_svfiprintf_r>:
 80090e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ec:	4698      	mov	r8, r3
 80090ee:	898b      	ldrh	r3, [r1, #12]
 80090f0:	061b      	lsls	r3, r3, #24
 80090f2:	b09d      	sub	sp, #116	@ 0x74
 80090f4:	4607      	mov	r7, r0
 80090f6:	460d      	mov	r5, r1
 80090f8:	4614      	mov	r4, r2
 80090fa:	d510      	bpl.n	800911e <_svfiprintf_r+0x36>
 80090fc:	690b      	ldr	r3, [r1, #16]
 80090fe:	b973      	cbnz	r3, 800911e <_svfiprintf_r+0x36>
 8009100:	2140      	movs	r1, #64	@ 0x40
 8009102:	f000 f917 	bl	8009334 <_malloc_r>
 8009106:	6028      	str	r0, [r5, #0]
 8009108:	6128      	str	r0, [r5, #16]
 800910a:	b930      	cbnz	r0, 800911a <_svfiprintf_r+0x32>
 800910c:	230c      	movs	r3, #12
 800910e:	603b      	str	r3, [r7, #0]
 8009110:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009114:	b01d      	add	sp, #116	@ 0x74
 8009116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911a:	2340      	movs	r3, #64	@ 0x40
 800911c:	616b      	str	r3, [r5, #20]
 800911e:	2300      	movs	r3, #0
 8009120:	9309      	str	r3, [sp, #36]	@ 0x24
 8009122:	2320      	movs	r3, #32
 8009124:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009128:	f8cd 800c 	str.w	r8, [sp, #12]
 800912c:	2330      	movs	r3, #48	@ 0x30
 800912e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80092cc <_svfiprintf_r+0x1e4>
 8009132:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009136:	f04f 0901 	mov.w	r9, #1
 800913a:	4623      	mov	r3, r4
 800913c:	469a      	mov	sl, r3
 800913e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009142:	b10a      	cbz	r2, 8009148 <_svfiprintf_r+0x60>
 8009144:	2a25      	cmp	r2, #37	@ 0x25
 8009146:	d1f9      	bne.n	800913c <_svfiprintf_r+0x54>
 8009148:	ebba 0b04 	subs.w	fp, sl, r4
 800914c:	d00b      	beq.n	8009166 <_svfiprintf_r+0x7e>
 800914e:	465b      	mov	r3, fp
 8009150:	4622      	mov	r2, r4
 8009152:	4629      	mov	r1, r5
 8009154:	4638      	mov	r0, r7
 8009156:	f7ff ff6b 	bl	8009030 <__ssputs_r>
 800915a:	3001      	adds	r0, #1
 800915c:	f000 80a7 	beq.w	80092ae <_svfiprintf_r+0x1c6>
 8009160:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009162:	445a      	add	r2, fp
 8009164:	9209      	str	r2, [sp, #36]	@ 0x24
 8009166:	f89a 3000 	ldrb.w	r3, [sl]
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 809f 	beq.w	80092ae <_svfiprintf_r+0x1c6>
 8009170:	2300      	movs	r3, #0
 8009172:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009176:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800917a:	f10a 0a01 	add.w	sl, sl, #1
 800917e:	9304      	str	r3, [sp, #16]
 8009180:	9307      	str	r3, [sp, #28]
 8009182:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009186:	931a      	str	r3, [sp, #104]	@ 0x68
 8009188:	4654      	mov	r4, sl
 800918a:	2205      	movs	r2, #5
 800918c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009190:	484e      	ldr	r0, [pc, #312]	@ (80092cc <_svfiprintf_r+0x1e4>)
 8009192:	f7f7 f81d 	bl	80001d0 <memchr>
 8009196:	9a04      	ldr	r2, [sp, #16]
 8009198:	b9d8      	cbnz	r0, 80091d2 <_svfiprintf_r+0xea>
 800919a:	06d0      	lsls	r0, r2, #27
 800919c:	bf44      	itt	mi
 800919e:	2320      	movmi	r3, #32
 80091a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091a4:	0711      	lsls	r1, r2, #28
 80091a6:	bf44      	itt	mi
 80091a8:	232b      	movmi	r3, #43	@ 0x2b
 80091aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091ae:	f89a 3000 	ldrb.w	r3, [sl]
 80091b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80091b4:	d015      	beq.n	80091e2 <_svfiprintf_r+0xfa>
 80091b6:	9a07      	ldr	r2, [sp, #28]
 80091b8:	4654      	mov	r4, sl
 80091ba:	2000      	movs	r0, #0
 80091bc:	f04f 0c0a 	mov.w	ip, #10
 80091c0:	4621      	mov	r1, r4
 80091c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091c6:	3b30      	subs	r3, #48	@ 0x30
 80091c8:	2b09      	cmp	r3, #9
 80091ca:	d94b      	bls.n	8009264 <_svfiprintf_r+0x17c>
 80091cc:	b1b0      	cbz	r0, 80091fc <_svfiprintf_r+0x114>
 80091ce:	9207      	str	r2, [sp, #28]
 80091d0:	e014      	b.n	80091fc <_svfiprintf_r+0x114>
 80091d2:	eba0 0308 	sub.w	r3, r0, r8
 80091d6:	fa09 f303 	lsl.w	r3, r9, r3
 80091da:	4313      	orrs	r3, r2
 80091dc:	9304      	str	r3, [sp, #16]
 80091de:	46a2      	mov	sl, r4
 80091e0:	e7d2      	b.n	8009188 <_svfiprintf_r+0xa0>
 80091e2:	9b03      	ldr	r3, [sp, #12]
 80091e4:	1d19      	adds	r1, r3, #4
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	9103      	str	r1, [sp, #12]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	bfbb      	ittet	lt
 80091ee:	425b      	neglt	r3, r3
 80091f0:	f042 0202 	orrlt.w	r2, r2, #2
 80091f4:	9307      	strge	r3, [sp, #28]
 80091f6:	9307      	strlt	r3, [sp, #28]
 80091f8:	bfb8      	it	lt
 80091fa:	9204      	strlt	r2, [sp, #16]
 80091fc:	7823      	ldrb	r3, [r4, #0]
 80091fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8009200:	d10a      	bne.n	8009218 <_svfiprintf_r+0x130>
 8009202:	7863      	ldrb	r3, [r4, #1]
 8009204:	2b2a      	cmp	r3, #42	@ 0x2a
 8009206:	d132      	bne.n	800926e <_svfiprintf_r+0x186>
 8009208:	9b03      	ldr	r3, [sp, #12]
 800920a:	1d1a      	adds	r2, r3, #4
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	9203      	str	r2, [sp, #12]
 8009210:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009214:	3402      	adds	r4, #2
 8009216:	9305      	str	r3, [sp, #20]
 8009218:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80092dc <_svfiprintf_r+0x1f4>
 800921c:	7821      	ldrb	r1, [r4, #0]
 800921e:	2203      	movs	r2, #3
 8009220:	4650      	mov	r0, sl
 8009222:	f7f6 ffd5 	bl	80001d0 <memchr>
 8009226:	b138      	cbz	r0, 8009238 <_svfiprintf_r+0x150>
 8009228:	9b04      	ldr	r3, [sp, #16]
 800922a:	eba0 000a 	sub.w	r0, r0, sl
 800922e:	2240      	movs	r2, #64	@ 0x40
 8009230:	4082      	lsls	r2, r0
 8009232:	4313      	orrs	r3, r2
 8009234:	3401      	adds	r4, #1
 8009236:	9304      	str	r3, [sp, #16]
 8009238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800923c:	4824      	ldr	r0, [pc, #144]	@ (80092d0 <_svfiprintf_r+0x1e8>)
 800923e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009242:	2206      	movs	r2, #6
 8009244:	f7f6 ffc4 	bl	80001d0 <memchr>
 8009248:	2800      	cmp	r0, #0
 800924a:	d036      	beq.n	80092ba <_svfiprintf_r+0x1d2>
 800924c:	4b21      	ldr	r3, [pc, #132]	@ (80092d4 <_svfiprintf_r+0x1ec>)
 800924e:	bb1b      	cbnz	r3, 8009298 <_svfiprintf_r+0x1b0>
 8009250:	9b03      	ldr	r3, [sp, #12]
 8009252:	3307      	adds	r3, #7
 8009254:	f023 0307 	bic.w	r3, r3, #7
 8009258:	3308      	adds	r3, #8
 800925a:	9303      	str	r3, [sp, #12]
 800925c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800925e:	4433      	add	r3, r6
 8009260:	9309      	str	r3, [sp, #36]	@ 0x24
 8009262:	e76a      	b.n	800913a <_svfiprintf_r+0x52>
 8009264:	fb0c 3202 	mla	r2, ip, r2, r3
 8009268:	460c      	mov	r4, r1
 800926a:	2001      	movs	r0, #1
 800926c:	e7a8      	b.n	80091c0 <_svfiprintf_r+0xd8>
 800926e:	2300      	movs	r3, #0
 8009270:	3401      	adds	r4, #1
 8009272:	9305      	str	r3, [sp, #20]
 8009274:	4619      	mov	r1, r3
 8009276:	f04f 0c0a 	mov.w	ip, #10
 800927a:	4620      	mov	r0, r4
 800927c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009280:	3a30      	subs	r2, #48	@ 0x30
 8009282:	2a09      	cmp	r2, #9
 8009284:	d903      	bls.n	800928e <_svfiprintf_r+0x1a6>
 8009286:	2b00      	cmp	r3, #0
 8009288:	d0c6      	beq.n	8009218 <_svfiprintf_r+0x130>
 800928a:	9105      	str	r1, [sp, #20]
 800928c:	e7c4      	b.n	8009218 <_svfiprintf_r+0x130>
 800928e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009292:	4604      	mov	r4, r0
 8009294:	2301      	movs	r3, #1
 8009296:	e7f0      	b.n	800927a <_svfiprintf_r+0x192>
 8009298:	ab03      	add	r3, sp, #12
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	462a      	mov	r2, r5
 800929e:	4b0e      	ldr	r3, [pc, #56]	@ (80092d8 <_svfiprintf_r+0x1f0>)
 80092a0:	a904      	add	r1, sp, #16
 80092a2:	4638      	mov	r0, r7
 80092a4:	f7fe fb84 	bl	80079b0 <_printf_float>
 80092a8:	1c42      	adds	r2, r0, #1
 80092aa:	4606      	mov	r6, r0
 80092ac:	d1d6      	bne.n	800925c <_svfiprintf_r+0x174>
 80092ae:	89ab      	ldrh	r3, [r5, #12]
 80092b0:	065b      	lsls	r3, r3, #25
 80092b2:	f53f af2d 	bmi.w	8009110 <_svfiprintf_r+0x28>
 80092b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092b8:	e72c      	b.n	8009114 <_svfiprintf_r+0x2c>
 80092ba:	ab03      	add	r3, sp, #12
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	462a      	mov	r2, r5
 80092c0:	4b05      	ldr	r3, [pc, #20]	@ (80092d8 <_svfiprintf_r+0x1f0>)
 80092c2:	a904      	add	r1, sp, #16
 80092c4:	4638      	mov	r0, r7
 80092c6:	f7fe fe0b 	bl	8007ee0 <_printf_i>
 80092ca:	e7ed      	b.n	80092a8 <_svfiprintf_r+0x1c0>
 80092cc:	0800a671 	.word	0x0800a671
 80092d0:	0800a67b 	.word	0x0800a67b
 80092d4:	080079b1 	.word	0x080079b1
 80092d8:	08009031 	.word	0x08009031
 80092dc:	0800a677 	.word	0x0800a677

080092e0 <malloc>:
 80092e0:	4b02      	ldr	r3, [pc, #8]	@ (80092ec <malloc+0xc>)
 80092e2:	4601      	mov	r1, r0
 80092e4:	6818      	ldr	r0, [r3, #0]
 80092e6:	f000 b825 	b.w	8009334 <_malloc_r>
 80092ea:	bf00      	nop
 80092ec:	20000020 	.word	0x20000020

080092f0 <sbrk_aligned>:
 80092f0:	b570      	push	{r4, r5, r6, lr}
 80092f2:	4e0f      	ldr	r6, [pc, #60]	@ (8009330 <sbrk_aligned+0x40>)
 80092f4:	460c      	mov	r4, r1
 80092f6:	6831      	ldr	r1, [r6, #0]
 80092f8:	4605      	mov	r5, r0
 80092fa:	b911      	cbnz	r1, 8009302 <sbrk_aligned+0x12>
 80092fc:	f000 fd7c 	bl	8009df8 <_sbrk_r>
 8009300:	6030      	str	r0, [r6, #0]
 8009302:	4621      	mov	r1, r4
 8009304:	4628      	mov	r0, r5
 8009306:	f000 fd77 	bl	8009df8 <_sbrk_r>
 800930a:	1c43      	adds	r3, r0, #1
 800930c:	d103      	bne.n	8009316 <sbrk_aligned+0x26>
 800930e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009312:	4620      	mov	r0, r4
 8009314:	bd70      	pop	{r4, r5, r6, pc}
 8009316:	1cc4      	adds	r4, r0, #3
 8009318:	f024 0403 	bic.w	r4, r4, #3
 800931c:	42a0      	cmp	r0, r4
 800931e:	d0f8      	beq.n	8009312 <sbrk_aligned+0x22>
 8009320:	1a21      	subs	r1, r4, r0
 8009322:	4628      	mov	r0, r5
 8009324:	f000 fd68 	bl	8009df8 <_sbrk_r>
 8009328:	3001      	adds	r0, #1
 800932a:	d1f2      	bne.n	8009312 <sbrk_aligned+0x22>
 800932c:	e7ef      	b.n	800930e <sbrk_aligned+0x1e>
 800932e:	bf00      	nop
 8009330:	200005c4 	.word	0x200005c4

08009334 <_malloc_r>:
 8009334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009338:	1ccd      	adds	r5, r1, #3
 800933a:	f025 0503 	bic.w	r5, r5, #3
 800933e:	3508      	adds	r5, #8
 8009340:	2d0c      	cmp	r5, #12
 8009342:	bf38      	it	cc
 8009344:	250c      	movcc	r5, #12
 8009346:	2d00      	cmp	r5, #0
 8009348:	4606      	mov	r6, r0
 800934a:	db01      	blt.n	8009350 <_malloc_r+0x1c>
 800934c:	42a9      	cmp	r1, r5
 800934e:	d904      	bls.n	800935a <_malloc_r+0x26>
 8009350:	230c      	movs	r3, #12
 8009352:	6033      	str	r3, [r6, #0]
 8009354:	2000      	movs	r0, #0
 8009356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800935a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009430 <_malloc_r+0xfc>
 800935e:	f000 f915 	bl	800958c <__malloc_lock>
 8009362:	f8d8 3000 	ldr.w	r3, [r8]
 8009366:	461c      	mov	r4, r3
 8009368:	bb44      	cbnz	r4, 80093bc <_malloc_r+0x88>
 800936a:	4629      	mov	r1, r5
 800936c:	4630      	mov	r0, r6
 800936e:	f7ff ffbf 	bl	80092f0 <sbrk_aligned>
 8009372:	1c43      	adds	r3, r0, #1
 8009374:	4604      	mov	r4, r0
 8009376:	d158      	bne.n	800942a <_malloc_r+0xf6>
 8009378:	f8d8 4000 	ldr.w	r4, [r8]
 800937c:	4627      	mov	r7, r4
 800937e:	2f00      	cmp	r7, #0
 8009380:	d143      	bne.n	800940a <_malloc_r+0xd6>
 8009382:	2c00      	cmp	r4, #0
 8009384:	d04b      	beq.n	800941e <_malloc_r+0xea>
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	4639      	mov	r1, r7
 800938a:	4630      	mov	r0, r6
 800938c:	eb04 0903 	add.w	r9, r4, r3
 8009390:	f000 fd32 	bl	8009df8 <_sbrk_r>
 8009394:	4581      	cmp	r9, r0
 8009396:	d142      	bne.n	800941e <_malloc_r+0xea>
 8009398:	6821      	ldr	r1, [r4, #0]
 800939a:	1a6d      	subs	r5, r5, r1
 800939c:	4629      	mov	r1, r5
 800939e:	4630      	mov	r0, r6
 80093a0:	f7ff ffa6 	bl	80092f0 <sbrk_aligned>
 80093a4:	3001      	adds	r0, #1
 80093a6:	d03a      	beq.n	800941e <_malloc_r+0xea>
 80093a8:	6823      	ldr	r3, [r4, #0]
 80093aa:	442b      	add	r3, r5
 80093ac:	6023      	str	r3, [r4, #0]
 80093ae:	f8d8 3000 	ldr.w	r3, [r8]
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	bb62      	cbnz	r2, 8009410 <_malloc_r+0xdc>
 80093b6:	f8c8 7000 	str.w	r7, [r8]
 80093ba:	e00f      	b.n	80093dc <_malloc_r+0xa8>
 80093bc:	6822      	ldr	r2, [r4, #0]
 80093be:	1b52      	subs	r2, r2, r5
 80093c0:	d420      	bmi.n	8009404 <_malloc_r+0xd0>
 80093c2:	2a0b      	cmp	r2, #11
 80093c4:	d917      	bls.n	80093f6 <_malloc_r+0xc2>
 80093c6:	1961      	adds	r1, r4, r5
 80093c8:	42a3      	cmp	r3, r4
 80093ca:	6025      	str	r5, [r4, #0]
 80093cc:	bf18      	it	ne
 80093ce:	6059      	strne	r1, [r3, #4]
 80093d0:	6863      	ldr	r3, [r4, #4]
 80093d2:	bf08      	it	eq
 80093d4:	f8c8 1000 	streq.w	r1, [r8]
 80093d8:	5162      	str	r2, [r4, r5]
 80093da:	604b      	str	r3, [r1, #4]
 80093dc:	4630      	mov	r0, r6
 80093de:	f000 f8db 	bl	8009598 <__malloc_unlock>
 80093e2:	f104 000b 	add.w	r0, r4, #11
 80093e6:	1d23      	adds	r3, r4, #4
 80093e8:	f020 0007 	bic.w	r0, r0, #7
 80093ec:	1ac2      	subs	r2, r0, r3
 80093ee:	bf1c      	itt	ne
 80093f0:	1a1b      	subne	r3, r3, r0
 80093f2:	50a3      	strne	r3, [r4, r2]
 80093f4:	e7af      	b.n	8009356 <_malloc_r+0x22>
 80093f6:	6862      	ldr	r2, [r4, #4]
 80093f8:	42a3      	cmp	r3, r4
 80093fa:	bf0c      	ite	eq
 80093fc:	f8c8 2000 	streq.w	r2, [r8]
 8009400:	605a      	strne	r2, [r3, #4]
 8009402:	e7eb      	b.n	80093dc <_malloc_r+0xa8>
 8009404:	4623      	mov	r3, r4
 8009406:	6864      	ldr	r4, [r4, #4]
 8009408:	e7ae      	b.n	8009368 <_malloc_r+0x34>
 800940a:	463c      	mov	r4, r7
 800940c:	687f      	ldr	r7, [r7, #4]
 800940e:	e7b6      	b.n	800937e <_malloc_r+0x4a>
 8009410:	461a      	mov	r2, r3
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	42a3      	cmp	r3, r4
 8009416:	d1fb      	bne.n	8009410 <_malloc_r+0xdc>
 8009418:	2300      	movs	r3, #0
 800941a:	6053      	str	r3, [r2, #4]
 800941c:	e7de      	b.n	80093dc <_malloc_r+0xa8>
 800941e:	230c      	movs	r3, #12
 8009420:	6033      	str	r3, [r6, #0]
 8009422:	4630      	mov	r0, r6
 8009424:	f000 f8b8 	bl	8009598 <__malloc_unlock>
 8009428:	e794      	b.n	8009354 <_malloc_r+0x20>
 800942a:	6005      	str	r5, [r0, #0]
 800942c:	e7d6      	b.n	80093dc <_malloc_r+0xa8>
 800942e:	bf00      	nop
 8009430:	200005c8 	.word	0x200005c8

08009434 <__sflush_r>:
 8009434:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800943c:	0716      	lsls	r6, r2, #28
 800943e:	4605      	mov	r5, r0
 8009440:	460c      	mov	r4, r1
 8009442:	d454      	bmi.n	80094ee <__sflush_r+0xba>
 8009444:	684b      	ldr	r3, [r1, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	dc02      	bgt.n	8009450 <__sflush_r+0x1c>
 800944a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800944c:	2b00      	cmp	r3, #0
 800944e:	dd48      	ble.n	80094e2 <__sflush_r+0xae>
 8009450:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009452:	2e00      	cmp	r6, #0
 8009454:	d045      	beq.n	80094e2 <__sflush_r+0xae>
 8009456:	2300      	movs	r3, #0
 8009458:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800945c:	682f      	ldr	r7, [r5, #0]
 800945e:	6a21      	ldr	r1, [r4, #32]
 8009460:	602b      	str	r3, [r5, #0]
 8009462:	d030      	beq.n	80094c6 <__sflush_r+0x92>
 8009464:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009466:	89a3      	ldrh	r3, [r4, #12]
 8009468:	0759      	lsls	r1, r3, #29
 800946a:	d505      	bpl.n	8009478 <__sflush_r+0x44>
 800946c:	6863      	ldr	r3, [r4, #4]
 800946e:	1ad2      	subs	r2, r2, r3
 8009470:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009472:	b10b      	cbz	r3, 8009478 <__sflush_r+0x44>
 8009474:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009476:	1ad2      	subs	r2, r2, r3
 8009478:	2300      	movs	r3, #0
 800947a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800947c:	6a21      	ldr	r1, [r4, #32]
 800947e:	4628      	mov	r0, r5
 8009480:	47b0      	blx	r6
 8009482:	1c43      	adds	r3, r0, #1
 8009484:	89a3      	ldrh	r3, [r4, #12]
 8009486:	d106      	bne.n	8009496 <__sflush_r+0x62>
 8009488:	6829      	ldr	r1, [r5, #0]
 800948a:	291d      	cmp	r1, #29
 800948c:	d82b      	bhi.n	80094e6 <__sflush_r+0xb2>
 800948e:	4a2a      	ldr	r2, [pc, #168]	@ (8009538 <__sflush_r+0x104>)
 8009490:	40ca      	lsrs	r2, r1
 8009492:	07d6      	lsls	r6, r2, #31
 8009494:	d527      	bpl.n	80094e6 <__sflush_r+0xb2>
 8009496:	2200      	movs	r2, #0
 8009498:	6062      	str	r2, [r4, #4]
 800949a:	04d9      	lsls	r1, r3, #19
 800949c:	6922      	ldr	r2, [r4, #16]
 800949e:	6022      	str	r2, [r4, #0]
 80094a0:	d504      	bpl.n	80094ac <__sflush_r+0x78>
 80094a2:	1c42      	adds	r2, r0, #1
 80094a4:	d101      	bne.n	80094aa <__sflush_r+0x76>
 80094a6:	682b      	ldr	r3, [r5, #0]
 80094a8:	b903      	cbnz	r3, 80094ac <__sflush_r+0x78>
 80094aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80094ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094ae:	602f      	str	r7, [r5, #0]
 80094b0:	b1b9      	cbz	r1, 80094e2 <__sflush_r+0xae>
 80094b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094b6:	4299      	cmp	r1, r3
 80094b8:	d002      	beq.n	80094c0 <__sflush_r+0x8c>
 80094ba:	4628      	mov	r0, r5
 80094bc:	f000 fd0e 	bl	8009edc <_free_r>
 80094c0:	2300      	movs	r3, #0
 80094c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80094c4:	e00d      	b.n	80094e2 <__sflush_r+0xae>
 80094c6:	2301      	movs	r3, #1
 80094c8:	4628      	mov	r0, r5
 80094ca:	47b0      	blx	r6
 80094cc:	4602      	mov	r2, r0
 80094ce:	1c50      	adds	r0, r2, #1
 80094d0:	d1c9      	bne.n	8009466 <__sflush_r+0x32>
 80094d2:	682b      	ldr	r3, [r5, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d0c6      	beq.n	8009466 <__sflush_r+0x32>
 80094d8:	2b1d      	cmp	r3, #29
 80094da:	d001      	beq.n	80094e0 <__sflush_r+0xac>
 80094dc:	2b16      	cmp	r3, #22
 80094de:	d11e      	bne.n	800951e <__sflush_r+0xea>
 80094e0:	602f      	str	r7, [r5, #0]
 80094e2:	2000      	movs	r0, #0
 80094e4:	e022      	b.n	800952c <__sflush_r+0xf8>
 80094e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094ea:	b21b      	sxth	r3, r3
 80094ec:	e01b      	b.n	8009526 <__sflush_r+0xf2>
 80094ee:	690f      	ldr	r7, [r1, #16]
 80094f0:	2f00      	cmp	r7, #0
 80094f2:	d0f6      	beq.n	80094e2 <__sflush_r+0xae>
 80094f4:	0793      	lsls	r3, r2, #30
 80094f6:	680e      	ldr	r6, [r1, #0]
 80094f8:	bf08      	it	eq
 80094fa:	694b      	ldreq	r3, [r1, #20]
 80094fc:	600f      	str	r7, [r1, #0]
 80094fe:	bf18      	it	ne
 8009500:	2300      	movne	r3, #0
 8009502:	eba6 0807 	sub.w	r8, r6, r7
 8009506:	608b      	str	r3, [r1, #8]
 8009508:	f1b8 0f00 	cmp.w	r8, #0
 800950c:	dde9      	ble.n	80094e2 <__sflush_r+0xae>
 800950e:	6a21      	ldr	r1, [r4, #32]
 8009510:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009512:	4643      	mov	r3, r8
 8009514:	463a      	mov	r2, r7
 8009516:	4628      	mov	r0, r5
 8009518:	47b0      	blx	r6
 800951a:	2800      	cmp	r0, #0
 800951c:	dc08      	bgt.n	8009530 <__sflush_r+0xfc>
 800951e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009526:	81a3      	strh	r3, [r4, #12]
 8009528:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800952c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009530:	4407      	add	r7, r0
 8009532:	eba8 0800 	sub.w	r8, r8, r0
 8009536:	e7e7      	b.n	8009508 <__sflush_r+0xd4>
 8009538:	20400001 	.word	0x20400001

0800953c <_fflush_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	690b      	ldr	r3, [r1, #16]
 8009540:	4605      	mov	r5, r0
 8009542:	460c      	mov	r4, r1
 8009544:	b913      	cbnz	r3, 800954c <_fflush_r+0x10>
 8009546:	2500      	movs	r5, #0
 8009548:	4628      	mov	r0, r5
 800954a:	bd38      	pop	{r3, r4, r5, pc}
 800954c:	b118      	cbz	r0, 8009556 <_fflush_r+0x1a>
 800954e:	6a03      	ldr	r3, [r0, #32]
 8009550:	b90b      	cbnz	r3, 8009556 <_fflush_r+0x1a>
 8009552:	f7fe fea5 	bl	80082a0 <__sinit>
 8009556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d0f3      	beq.n	8009546 <_fflush_r+0xa>
 800955e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009560:	07d0      	lsls	r0, r2, #31
 8009562:	d404      	bmi.n	800956e <_fflush_r+0x32>
 8009564:	0599      	lsls	r1, r3, #22
 8009566:	d402      	bmi.n	800956e <_fflush_r+0x32>
 8009568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800956a:	f7fe ff02 	bl	8008372 <__retarget_lock_acquire_recursive>
 800956e:	4628      	mov	r0, r5
 8009570:	4621      	mov	r1, r4
 8009572:	f7ff ff5f 	bl	8009434 <__sflush_r>
 8009576:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009578:	07da      	lsls	r2, r3, #31
 800957a:	4605      	mov	r5, r0
 800957c:	d4e4      	bmi.n	8009548 <_fflush_r+0xc>
 800957e:	89a3      	ldrh	r3, [r4, #12]
 8009580:	059b      	lsls	r3, r3, #22
 8009582:	d4e1      	bmi.n	8009548 <_fflush_r+0xc>
 8009584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009586:	f7fe fef5 	bl	8008374 <__retarget_lock_release_recursive>
 800958a:	e7dd      	b.n	8009548 <_fflush_r+0xc>

0800958c <__malloc_lock>:
 800958c:	4801      	ldr	r0, [pc, #4]	@ (8009594 <__malloc_lock+0x8>)
 800958e:	f7fe bef0 	b.w	8008372 <__retarget_lock_acquire_recursive>
 8009592:	bf00      	nop
 8009594:	200005c0 	.word	0x200005c0

08009598 <__malloc_unlock>:
 8009598:	4801      	ldr	r0, [pc, #4]	@ (80095a0 <__malloc_unlock+0x8>)
 800959a:	f7fe beeb 	b.w	8008374 <__retarget_lock_release_recursive>
 800959e:	bf00      	nop
 80095a0:	200005c0 	.word	0x200005c0

080095a4 <_Balloc>:
 80095a4:	b570      	push	{r4, r5, r6, lr}
 80095a6:	69c6      	ldr	r6, [r0, #28]
 80095a8:	4604      	mov	r4, r0
 80095aa:	460d      	mov	r5, r1
 80095ac:	b976      	cbnz	r6, 80095cc <_Balloc+0x28>
 80095ae:	2010      	movs	r0, #16
 80095b0:	f7ff fe96 	bl	80092e0 <malloc>
 80095b4:	4602      	mov	r2, r0
 80095b6:	61e0      	str	r0, [r4, #28]
 80095b8:	b920      	cbnz	r0, 80095c4 <_Balloc+0x20>
 80095ba:	4b18      	ldr	r3, [pc, #96]	@ (800961c <_Balloc+0x78>)
 80095bc:	4818      	ldr	r0, [pc, #96]	@ (8009620 <_Balloc+0x7c>)
 80095be:	216b      	movs	r1, #107	@ 0x6b
 80095c0:	f000 fc5a 	bl	8009e78 <__assert_func>
 80095c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095c8:	6006      	str	r6, [r0, #0]
 80095ca:	60c6      	str	r6, [r0, #12]
 80095cc:	69e6      	ldr	r6, [r4, #28]
 80095ce:	68f3      	ldr	r3, [r6, #12]
 80095d0:	b183      	cbz	r3, 80095f4 <_Balloc+0x50>
 80095d2:	69e3      	ldr	r3, [r4, #28]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095da:	b9b8      	cbnz	r0, 800960c <_Balloc+0x68>
 80095dc:	2101      	movs	r1, #1
 80095de:	fa01 f605 	lsl.w	r6, r1, r5
 80095e2:	1d72      	adds	r2, r6, #5
 80095e4:	0092      	lsls	r2, r2, #2
 80095e6:	4620      	mov	r0, r4
 80095e8:	f000 fc64 	bl	8009eb4 <_calloc_r>
 80095ec:	b160      	cbz	r0, 8009608 <_Balloc+0x64>
 80095ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095f2:	e00e      	b.n	8009612 <_Balloc+0x6e>
 80095f4:	2221      	movs	r2, #33	@ 0x21
 80095f6:	2104      	movs	r1, #4
 80095f8:	4620      	mov	r0, r4
 80095fa:	f000 fc5b 	bl	8009eb4 <_calloc_r>
 80095fe:	69e3      	ldr	r3, [r4, #28]
 8009600:	60f0      	str	r0, [r6, #12]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1e4      	bne.n	80095d2 <_Balloc+0x2e>
 8009608:	2000      	movs	r0, #0
 800960a:	bd70      	pop	{r4, r5, r6, pc}
 800960c:	6802      	ldr	r2, [r0, #0]
 800960e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009612:	2300      	movs	r3, #0
 8009614:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009618:	e7f7      	b.n	800960a <_Balloc+0x66>
 800961a:	bf00      	nop
 800961c:	0800a5f1 	.word	0x0800a5f1
 8009620:	0800a682 	.word	0x0800a682

08009624 <_Bfree>:
 8009624:	b570      	push	{r4, r5, r6, lr}
 8009626:	69c6      	ldr	r6, [r0, #28]
 8009628:	4605      	mov	r5, r0
 800962a:	460c      	mov	r4, r1
 800962c:	b976      	cbnz	r6, 800964c <_Bfree+0x28>
 800962e:	2010      	movs	r0, #16
 8009630:	f7ff fe56 	bl	80092e0 <malloc>
 8009634:	4602      	mov	r2, r0
 8009636:	61e8      	str	r0, [r5, #28]
 8009638:	b920      	cbnz	r0, 8009644 <_Bfree+0x20>
 800963a:	4b09      	ldr	r3, [pc, #36]	@ (8009660 <_Bfree+0x3c>)
 800963c:	4809      	ldr	r0, [pc, #36]	@ (8009664 <_Bfree+0x40>)
 800963e:	218f      	movs	r1, #143	@ 0x8f
 8009640:	f000 fc1a 	bl	8009e78 <__assert_func>
 8009644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009648:	6006      	str	r6, [r0, #0]
 800964a:	60c6      	str	r6, [r0, #12]
 800964c:	b13c      	cbz	r4, 800965e <_Bfree+0x3a>
 800964e:	69eb      	ldr	r3, [r5, #28]
 8009650:	6862      	ldr	r2, [r4, #4]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009658:	6021      	str	r1, [r4, #0]
 800965a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800965e:	bd70      	pop	{r4, r5, r6, pc}
 8009660:	0800a5f1 	.word	0x0800a5f1
 8009664:	0800a682 	.word	0x0800a682

08009668 <__multadd>:
 8009668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800966c:	690d      	ldr	r5, [r1, #16]
 800966e:	4607      	mov	r7, r0
 8009670:	460c      	mov	r4, r1
 8009672:	461e      	mov	r6, r3
 8009674:	f101 0c14 	add.w	ip, r1, #20
 8009678:	2000      	movs	r0, #0
 800967a:	f8dc 3000 	ldr.w	r3, [ip]
 800967e:	b299      	uxth	r1, r3
 8009680:	fb02 6101 	mla	r1, r2, r1, r6
 8009684:	0c1e      	lsrs	r6, r3, #16
 8009686:	0c0b      	lsrs	r3, r1, #16
 8009688:	fb02 3306 	mla	r3, r2, r6, r3
 800968c:	b289      	uxth	r1, r1
 800968e:	3001      	adds	r0, #1
 8009690:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009694:	4285      	cmp	r5, r0
 8009696:	f84c 1b04 	str.w	r1, [ip], #4
 800969a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800969e:	dcec      	bgt.n	800967a <__multadd+0x12>
 80096a0:	b30e      	cbz	r6, 80096e6 <__multadd+0x7e>
 80096a2:	68a3      	ldr	r3, [r4, #8]
 80096a4:	42ab      	cmp	r3, r5
 80096a6:	dc19      	bgt.n	80096dc <__multadd+0x74>
 80096a8:	6861      	ldr	r1, [r4, #4]
 80096aa:	4638      	mov	r0, r7
 80096ac:	3101      	adds	r1, #1
 80096ae:	f7ff ff79 	bl	80095a4 <_Balloc>
 80096b2:	4680      	mov	r8, r0
 80096b4:	b928      	cbnz	r0, 80096c2 <__multadd+0x5a>
 80096b6:	4602      	mov	r2, r0
 80096b8:	4b0c      	ldr	r3, [pc, #48]	@ (80096ec <__multadd+0x84>)
 80096ba:	480d      	ldr	r0, [pc, #52]	@ (80096f0 <__multadd+0x88>)
 80096bc:	21ba      	movs	r1, #186	@ 0xba
 80096be:	f000 fbdb 	bl	8009e78 <__assert_func>
 80096c2:	6922      	ldr	r2, [r4, #16]
 80096c4:	3202      	adds	r2, #2
 80096c6:	f104 010c 	add.w	r1, r4, #12
 80096ca:	0092      	lsls	r2, r2, #2
 80096cc:	300c      	adds	r0, #12
 80096ce:	f000 fbc5 	bl	8009e5c <memcpy>
 80096d2:	4621      	mov	r1, r4
 80096d4:	4638      	mov	r0, r7
 80096d6:	f7ff ffa5 	bl	8009624 <_Bfree>
 80096da:	4644      	mov	r4, r8
 80096dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096e0:	3501      	adds	r5, #1
 80096e2:	615e      	str	r6, [r3, #20]
 80096e4:	6125      	str	r5, [r4, #16]
 80096e6:	4620      	mov	r0, r4
 80096e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096ec:	0800a660 	.word	0x0800a660
 80096f0:	0800a682 	.word	0x0800a682

080096f4 <__hi0bits>:
 80096f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80096f8:	4603      	mov	r3, r0
 80096fa:	bf36      	itet	cc
 80096fc:	0403      	lslcc	r3, r0, #16
 80096fe:	2000      	movcs	r0, #0
 8009700:	2010      	movcc	r0, #16
 8009702:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009706:	bf3c      	itt	cc
 8009708:	021b      	lslcc	r3, r3, #8
 800970a:	3008      	addcc	r0, #8
 800970c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009710:	bf3c      	itt	cc
 8009712:	011b      	lslcc	r3, r3, #4
 8009714:	3004      	addcc	r0, #4
 8009716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800971a:	bf3c      	itt	cc
 800971c:	009b      	lslcc	r3, r3, #2
 800971e:	3002      	addcc	r0, #2
 8009720:	2b00      	cmp	r3, #0
 8009722:	db05      	blt.n	8009730 <__hi0bits+0x3c>
 8009724:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009728:	f100 0001 	add.w	r0, r0, #1
 800972c:	bf08      	it	eq
 800972e:	2020      	moveq	r0, #32
 8009730:	4770      	bx	lr

08009732 <__lo0bits>:
 8009732:	6803      	ldr	r3, [r0, #0]
 8009734:	4602      	mov	r2, r0
 8009736:	f013 0007 	ands.w	r0, r3, #7
 800973a:	d00b      	beq.n	8009754 <__lo0bits+0x22>
 800973c:	07d9      	lsls	r1, r3, #31
 800973e:	d421      	bmi.n	8009784 <__lo0bits+0x52>
 8009740:	0798      	lsls	r0, r3, #30
 8009742:	bf49      	itett	mi
 8009744:	085b      	lsrmi	r3, r3, #1
 8009746:	089b      	lsrpl	r3, r3, #2
 8009748:	2001      	movmi	r0, #1
 800974a:	6013      	strmi	r3, [r2, #0]
 800974c:	bf5c      	itt	pl
 800974e:	6013      	strpl	r3, [r2, #0]
 8009750:	2002      	movpl	r0, #2
 8009752:	4770      	bx	lr
 8009754:	b299      	uxth	r1, r3
 8009756:	b909      	cbnz	r1, 800975c <__lo0bits+0x2a>
 8009758:	0c1b      	lsrs	r3, r3, #16
 800975a:	2010      	movs	r0, #16
 800975c:	b2d9      	uxtb	r1, r3
 800975e:	b909      	cbnz	r1, 8009764 <__lo0bits+0x32>
 8009760:	3008      	adds	r0, #8
 8009762:	0a1b      	lsrs	r3, r3, #8
 8009764:	0719      	lsls	r1, r3, #28
 8009766:	bf04      	itt	eq
 8009768:	091b      	lsreq	r3, r3, #4
 800976a:	3004      	addeq	r0, #4
 800976c:	0799      	lsls	r1, r3, #30
 800976e:	bf04      	itt	eq
 8009770:	089b      	lsreq	r3, r3, #2
 8009772:	3002      	addeq	r0, #2
 8009774:	07d9      	lsls	r1, r3, #31
 8009776:	d403      	bmi.n	8009780 <__lo0bits+0x4e>
 8009778:	085b      	lsrs	r3, r3, #1
 800977a:	f100 0001 	add.w	r0, r0, #1
 800977e:	d003      	beq.n	8009788 <__lo0bits+0x56>
 8009780:	6013      	str	r3, [r2, #0]
 8009782:	4770      	bx	lr
 8009784:	2000      	movs	r0, #0
 8009786:	4770      	bx	lr
 8009788:	2020      	movs	r0, #32
 800978a:	4770      	bx	lr

0800978c <__i2b>:
 800978c:	b510      	push	{r4, lr}
 800978e:	460c      	mov	r4, r1
 8009790:	2101      	movs	r1, #1
 8009792:	f7ff ff07 	bl	80095a4 <_Balloc>
 8009796:	4602      	mov	r2, r0
 8009798:	b928      	cbnz	r0, 80097a6 <__i2b+0x1a>
 800979a:	4b05      	ldr	r3, [pc, #20]	@ (80097b0 <__i2b+0x24>)
 800979c:	4805      	ldr	r0, [pc, #20]	@ (80097b4 <__i2b+0x28>)
 800979e:	f240 1145 	movw	r1, #325	@ 0x145
 80097a2:	f000 fb69 	bl	8009e78 <__assert_func>
 80097a6:	2301      	movs	r3, #1
 80097a8:	6144      	str	r4, [r0, #20]
 80097aa:	6103      	str	r3, [r0, #16]
 80097ac:	bd10      	pop	{r4, pc}
 80097ae:	bf00      	nop
 80097b0:	0800a660 	.word	0x0800a660
 80097b4:	0800a682 	.word	0x0800a682

080097b8 <__multiply>:
 80097b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097bc:	4617      	mov	r7, r2
 80097be:	690a      	ldr	r2, [r1, #16]
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	bfa8      	it	ge
 80097c6:	463b      	movge	r3, r7
 80097c8:	4689      	mov	r9, r1
 80097ca:	bfa4      	itt	ge
 80097cc:	460f      	movge	r7, r1
 80097ce:	4699      	movge	r9, r3
 80097d0:	693d      	ldr	r5, [r7, #16]
 80097d2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	6879      	ldr	r1, [r7, #4]
 80097da:	eb05 060a 	add.w	r6, r5, sl
 80097de:	42b3      	cmp	r3, r6
 80097e0:	b085      	sub	sp, #20
 80097e2:	bfb8      	it	lt
 80097e4:	3101      	addlt	r1, #1
 80097e6:	f7ff fedd 	bl	80095a4 <_Balloc>
 80097ea:	b930      	cbnz	r0, 80097fa <__multiply+0x42>
 80097ec:	4602      	mov	r2, r0
 80097ee:	4b41      	ldr	r3, [pc, #260]	@ (80098f4 <__multiply+0x13c>)
 80097f0:	4841      	ldr	r0, [pc, #260]	@ (80098f8 <__multiply+0x140>)
 80097f2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80097f6:	f000 fb3f 	bl	8009e78 <__assert_func>
 80097fa:	f100 0414 	add.w	r4, r0, #20
 80097fe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009802:	4623      	mov	r3, r4
 8009804:	2200      	movs	r2, #0
 8009806:	4573      	cmp	r3, lr
 8009808:	d320      	bcc.n	800984c <__multiply+0x94>
 800980a:	f107 0814 	add.w	r8, r7, #20
 800980e:	f109 0114 	add.w	r1, r9, #20
 8009812:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009816:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800981a:	9302      	str	r3, [sp, #8]
 800981c:	1beb      	subs	r3, r5, r7
 800981e:	3b15      	subs	r3, #21
 8009820:	f023 0303 	bic.w	r3, r3, #3
 8009824:	3304      	adds	r3, #4
 8009826:	3715      	adds	r7, #21
 8009828:	42bd      	cmp	r5, r7
 800982a:	bf38      	it	cc
 800982c:	2304      	movcc	r3, #4
 800982e:	9301      	str	r3, [sp, #4]
 8009830:	9b02      	ldr	r3, [sp, #8]
 8009832:	9103      	str	r1, [sp, #12]
 8009834:	428b      	cmp	r3, r1
 8009836:	d80c      	bhi.n	8009852 <__multiply+0x9a>
 8009838:	2e00      	cmp	r6, #0
 800983a:	dd03      	ble.n	8009844 <__multiply+0x8c>
 800983c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009840:	2b00      	cmp	r3, #0
 8009842:	d055      	beq.n	80098f0 <__multiply+0x138>
 8009844:	6106      	str	r6, [r0, #16]
 8009846:	b005      	add	sp, #20
 8009848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984c:	f843 2b04 	str.w	r2, [r3], #4
 8009850:	e7d9      	b.n	8009806 <__multiply+0x4e>
 8009852:	f8b1 a000 	ldrh.w	sl, [r1]
 8009856:	f1ba 0f00 	cmp.w	sl, #0
 800985a:	d01f      	beq.n	800989c <__multiply+0xe4>
 800985c:	46c4      	mov	ip, r8
 800985e:	46a1      	mov	r9, r4
 8009860:	2700      	movs	r7, #0
 8009862:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009866:	f8d9 3000 	ldr.w	r3, [r9]
 800986a:	fa1f fb82 	uxth.w	fp, r2
 800986e:	b29b      	uxth	r3, r3
 8009870:	fb0a 330b 	mla	r3, sl, fp, r3
 8009874:	443b      	add	r3, r7
 8009876:	f8d9 7000 	ldr.w	r7, [r9]
 800987a:	0c12      	lsrs	r2, r2, #16
 800987c:	0c3f      	lsrs	r7, r7, #16
 800987e:	fb0a 7202 	mla	r2, sl, r2, r7
 8009882:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009886:	b29b      	uxth	r3, r3
 8009888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800988c:	4565      	cmp	r5, ip
 800988e:	f849 3b04 	str.w	r3, [r9], #4
 8009892:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009896:	d8e4      	bhi.n	8009862 <__multiply+0xaa>
 8009898:	9b01      	ldr	r3, [sp, #4]
 800989a:	50e7      	str	r7, [r4, r3]
 800989c:	9b03      	ldr	r3, [sp, #12]
 800989e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80098a2:	3104      	adds	r1, #4
 80098a4:	f1b9 0f00 	cmp.w	r9, #0
 80098a8:	d020      	beq.n	80098ec <__multiply+0x134>
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	4647      	mov	r7, r8
 80098ae:	46a4      	mov	ip, r4
 80098b0:	f04f 0a00 	mov.w	sl, #0
 80098b4:	f8b7 b000 	ldrh.w	fp, [r7]
 80098b8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80098bc:	fb09 220b 	mla	r2, r9, fp, r2
 80098c0:	4452      	add	r2, sl
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098c8:	f84c 3b04 	str.w	r3, [ip], #4
 80098cc:	f857 3b04 	ldr.w	r3, [r7], #4
 80098d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098d4:	f8bc 3000 	ldrh.w	r3, [ip]
 80098d8:	fb09 330a 	mla	r3, r9, sl, r3
 80098dc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80098e0:	42bd      	cmp	r5, r7
 80098e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098e6:	d8e5      	bhi.n	80098b4 <__multiply+0xfc>
 80098e8:	9a01      	ldr	r2, [sp, #4]
 80098ea:	50a3      	str	r3, [r4, r2]
 80098ec:	3404      	adds	r4, #4
 80098ee:	e79f      	b.n	8009830 <__multiply+0x78>
 80098f0:	3e01      	subs	r6, #1
 80098f2:	e7a1      	b.n	8009838 <__multiply+0x80>
 80098f4:	0800a660 	.word	0x0800a660
 80098f8:	0800a682 	.word	0x0800a682

080098fc <__pow5mult>:
 80098fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009900:	4615      	mov	r5, r2
 8009902:	f012 0203 	ands.w	r2, r2, #3
 8009906:	4607      	mov	r7, r0
 8009908:	460e      	mov	r6, r1
 800990a:	d007      	beq.n	800991c <__pow5mult+0x20>
 800990c:	4c25      	ldr	r4, [pc, #148]	@ (80099a4 <__pow5mult+0xa8>)
 800990e:	3a01      	subs	r2, #1
 8009910:	2300      	movs	r3, #0
 8009912:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009916:	f7ff fea7 	bl	8009668 <__multadd>
 800991a:	4606      	mov	r6, r0
 800991c:	10ad      	asrs	r5, r5, #2
 800991e:	d03d      	beq.n	800999c <__pow5mult+0xa0>
 8009920:	69fc      	ldr	r4, [r7, #28]
 8009922:	b97c      	cbnz	r4, 8009944 <__pow5mult+0x48>
 8009924:	2010      	movs	r0, #16
 8009926:	f7ff fcdb 	bl	80092e0 <malloc>
 800992a:	4602      	mov	r2, r0
 800992c:	61f8      	str	r0, [r7, #28]
 800992e:	b928      	cbnz	r0, 800993c <__pow5mult+0x40>
 8009930:	4b1d      	ldr	r3, [pc, #116]	@ (80099a8 <__pow5mult+0xac>)
 8009932:	481e      	ldr	r0, [pc, #120]	@ (80099ac <__pow5mult+0xb0>)
 8009934:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009938:	f000 fa9e 	bl	8009e78 <__assert_func>
 800993c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009940:	6004      	str	r4, [r0, #0]
 8009942:	60c4      	str	r4, [r0, #12]
 8009944:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009948:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800994c:	b94c      	cbnz	r4, 8009962 <__pow5mult+0x66>
 800994e:	f240 2171 	movw	r1, #625	@ 0x271
 8009952:	4638      	mov	r0, r7
 8009954:	f7ff ff1a 	bl	800978c <__i2b>
 8009958:	2300      	movs	r3, #0
 800995a:	f8c8 0008 	str.w	r0, [r8, #8]
 800995e:	4604      	mov	r4, r0
 8009960:	6003      	str	r3, [r0, #0]
 8009962:	f04f 0900 	mov.w	r9, #0
 8009966:	07eb      	lsls	r3, r5, #31
 8009968:	d50a      	bpl.n	8009980 <__pow5mult+0x84>
 800996a:	4631      	mov	r1, r6
 800996c:	4622      	mov	r2, r4
 800996e:	4638      	mov	r0, r7
 8009970:	f7ff ff22 	bl	80097b8 <__multiply>
 8009974:	4631      	mov	r1, r6
 8009976:	4680      	mov	r8, r0
 8009978:	4638      	mov	r0, r7
 800997a:	f7ff fe53 	bl	8009624 <_Bfree>
 800997e:	4646      	mov	r6, r8
 8009980:	106d      	asrs	r5, r5, #1
 8009982:	d00b      	beq.n	800999c <__pow5mult+0xa0>
 8009984:	6820      	ldr	r0, [r4, #0]
 8009986:	b938      	cbnz	r0, 8009998 <__pow5mult+0x9c>
 8009988:	4622      	mov	r2, r4
 800998a:	4621      	mov	r1, r4
 800998c:	4638      	mov	r0, r7
 800998e:	f7ff ff13 	bl	80097b8 <__multiply>
 8009992:	6020      	str	r0, [r4, #0]
 8009994:	f8c0 9000 	str.w	r9, [r0]
 8009998:	4604      	mov	r4, r0
 800999a:	e7e4      	b.n	8009966 <__pow5mult+0x6a>
 800999c:	4630      	mov	r0, r6
 800999e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099a2:	bf00      	nop
 80099a4:	0800a724 	.word	0x0800a724
 80099a8:	0800a5f1 	.word	0x0800a5f1
 80099ac:	0800a682 	.word	0x0800a682

080099b0 <__lshift>:
 80099b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b4:	460c      	mov	r4, r1
 80099b6:	6849      	ldr	r1, [r1, #4]
 80099b8:	6923      	ldr	r3, [r4, #16]
 80099ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099be:	68a3      	ldr	r3, [r4, #8]
 80099c0:	4607      	mov	r7, r0
 80099c2:	4691      	mov	r9, r2
 80099c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099c8:	f108 0601 	add.w	r6, r8, #1
 80099cc:	42b3      	cmp	r3, r6
 80099ce:	db0b      	blt.n	80099e8 <__lshift+0x38>
 80099d0:	4638      	mov	r0, r7
 80099d2:	f7ff fde7 	bl	80095a4 <_Balloc>
 80099d6:	4605      	mov	r5, r0
 80099d8:	b948      	cbnz	r0, 80099ee <__lshift+0x3e>
 80099da:	4602      	mov	r2, r0
 80099dc:	4b28      	ldr	r3, [pc, #160]	@ (8009a80 <__lshift+0xd0>)
 80099de:	4829      	ldr	r0, [pc, #164]	@ (8009a84 <__lshift+0xd4>)
 80099e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80099e4:	f000 fa48 	bl	8009e78 <__assert_func>
 80099e8:	3101      	adds	r1, #1
 80099ea:	005b      	lsls	r3, r3, #1
 80099ec:	e7ee      	b.n	80099cc <__lshift+0x1c>
 80099ee:	2300      	movs	r3, #0
 80099f0:	f100 0114 	add.w	r1, r0, #20
 80099f4:	f100 0210 	add.w	r2, r0, #16
 80099f8:	4618      	mov	r0, r3
 80099fa:	4553      	cmp	r3, sl
 80099fc:	db33      	blt.n	8009a66 <__lshift+0xb6>
 80099fe:	6920      	ldr	r0, [r4, #16]
 8009a00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a04:	f104 0314 	add.w	r3, r4, #20
 8009a08:	f019 091f 	ands.w	r9, r9, #31
 8009a0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a14:	d02b      	beq.n	8009a6e <__lshift+0xbe>
 8009a16:	f1c9 0e20 	rsb	lr, r9, #32
 8009a1a:	468a      	mov	sl, r1
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	6818      	ldr	r0, [r3, #0]
 8009a20:	fa00 f009 	lsl.w	r0, r0, r9
 8009a24:	4310      	orrs	r0, r2
 8009a26:	f84a 0b04 	str.w	r0, [sl], #4
 8009a2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a2e:	459c      	cmp	ip, r3
 8009a30:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a34:	d8f3      	bhi.n	8009a1e <__lshift+0x6e>
 8009a36:	ebac 0304 	sub.w	r3, ip, r4
 8009a3a:	3b15      	subs	r3, #21
 8009a3c:	f023 0303 	bic.w	r3, r3, #3
 8009a40:	3304      	adds	r3, #4
 8009a42:	f104 0015 	add.w	r0, r4, #21
 8009a46:	4560      	cmp	r0, ip
 8009a48:	bf88      	it	hi
 8009a4a:	2304      	movhi	r3, #4
 8009a4c:	50ca      	str	r2, [r1, r3]
 8009a4e:	b10a      	cbz	r2, 8009a54 <__lshift+0xa4>
 8009a50:	f108 0602 	add.w	r6, r8, #2
 8009a54:	3e01      	subs	r6, #1
 8009a56:	4638      	mov	r0, r7
 8009a58:	612e      	str	r6, [r5, #16]
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	f7ff fde2 	bl	8009624 <_Bfree>
 8009a60:	4628      	mov	r0, r5
 8009a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a66:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	e7c5      	b.n	80099fa <__lshift+0x4a>
 8009a6e:	3904      	subs	r1, #4
 8009a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a74:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a78:	459c      	cmp	ip, r3
 8009a7a:	d8f9      	bhi.n	8009a70 <__lshift+0xc0>
 8009a7c:	e7ea      	b.n	8009a54 <__lshift+0xa4>
 8009a7e:	bf00      	nop
 8009a80:	0800a660 	.word	0x0800a660
 8009a84:	0800a682 	.word	0x0800a682

08009a88 <__mcmp>:
 8009a88:	690a      	ldr	r2, [r1, #16]
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	6900      	ldr	r0, [r0, #16]
 8009a8e:	1a80      	subs	r0, r0, r2
 8009a90:	b530      	push	{r4, r5, lr}
 8009a92:	d10e      	bne.n	8009ab2 <__mcmp+0x2a>
 8009a94:	3314      	adds	r3, #20
 8009a96:	3114      	adds	r1, #20
 8009a98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009a9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009aa0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009aa4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009aa8:	4295      	cmp	r5, r2
 8009aaa:	d003      	beq.n	8009ab4 <__mcmp+0x2c>
 8009aac:	d205      	bcs.n	8009aba <__mcmp+0x32>
 8009aae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ab2:	bd30      	pop	{r4, r5, pc}
 8009ab4:	42a3      	cmp	r3, r4
 8009ab6:	d3f3      	bcc.n	8009aa0 <__mcmp+0x18>
 8009ab8:	e7fb      	b.n	8009ab2 <__mcmp+0x2a>
 8009aba:	2001      	movs	r0, #1
 8009abc:	e7f9      	b.n	8009ab2 <__mcmp+0x2a>
	...

08009ac0 <__mdiff>:
 8009ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac4:	4689      	mov	r9, r1
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	4611      	mov	r1, r2
 8009aca:	4648      	mov	r0, r9
 8009acc:	4614      	mov	r4, r2
 8009ace:	f7ff ffdb 	bl	8009a88 <__mcmp>
 8009ad2:	1e05      	subs	r5, r0, #0
 8009ad4:	d112      	bne.n	8009afc <__mdiff+0x3c>
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f7ff fd63 	bl	80095a4 <_Balloc>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	b928      	cbnz	r0, 8009aee <__mdiff+0x2e>
 8009ae2:	4b3f      	ldr	r3, [pc, #252]	@ (8009be0 <__mdiff+0x120>)
 8009ae4:	f240 2137 	movw	r1, #567	@ 0x237
 8009ae8:	483e      	ldr	r0, [pc, #248]	@ (8009be4 <__mdiff+0x124>)
 8009aea:	f000 f9c5 	bl	8009e78 <__assert_func>
 8009aee:	2301      	movs	r3, #1
 8009af0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009af4:	4610      	mov	r0, r2
 8009af6:	b003      	add	sp, #12
 8009af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afc:	bfbc      	itt	lt
 8009afe:	464b      	movlt	r3, r9
 8009b00:	46a1      	movlt	r9, r4
 8009b02:	4630      	mov	r0, r6
 8009b04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009b08:	bfba      	itte	lt
 8009b0a:	461c      	movlt	r4, r3
 8009b0c:	2501      	movlt	r5, #1
 8009b0e:	2500      	movge	r5, #0
 8009b10:	f7ff fd48 	bl	80095a4 <_Balloc>
 8009b14:	4602      	mov	r2, r0
 8009b16:	b918      	cbnz	r0, 8009b20 <__mdiff+0x60>
 8009b18:	4b31      	ldr	r3, [pc, #196]	@ (8009be0 <__mdiff+0x120>)
 8009b1a:	f240 2145 	movw	r1, #581	@ 0x245
 8009b1e:	e7e3      	b.n	8009ae8 <__mdiff+0x28>
 8009b20:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009b24:	6926      	ldr	r6, [r4, #16]
 8009b26:	60c5      	str	r5, [r0, #12]
 8009b28:	f109 0310 	add.w	r3, r9, #16
 8009b2c:	f109 0514 	add.w	r5, r9, #20
 8009b30:	f104 0e14 	add.w	lr, r4, #20
 8009b34:	f100 0b14 	add.w	fp, r0, #20
 8009b38:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009b3c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	46d9      	mov	r9, fp
 8009b44:	f04f 0c00 	mov.w	ip, #0
 8009b48:	9b01      	ldr	r3, [sp, #4]
 8009b4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009b4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009b52:	9301      	str	r3, [sp, #4]
 8009b54:	fa1f f38a 	uxth.w	r3, sl
 8009b58:	4619      	mov	r1, r3
 8009b5a:	b283      	uxth	r3, r0
 8009b5c:	1acb      	subs	r3, r1, r3
 8009b5e:	0c00      	lsrs	r0, r0, #16
 8009b60:	4463      	add	r3, ip
 8009b62:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009b66:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009b70:	4576      	cmp	r6, lr
 8009b72:	f849 3b04 	str.w	r3, [r9], #4
 8009b76:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b7a:	d8e5      	bhi.n	8009b48 <__mdiff+0x88>
 8009b7c:	1b33      	subs	r3, r6, r4
 8009b7e:	3b15      	subs	r3, #21
 8009b80:	f023 0303 	bic.w	r3, r3, #3
 8009b84:	3415      	adds	r4, #21
 8009b86:	3304      	adds	r3, #4
 8009b88:	42a6      	cmp	r6, r4
 8009b8a:	bf38      	it	cc
 8009b8c:	2304      	movcc	r3, #4
 8009b8e:	441d      	add	r5, r3
 8009b90:	445b      	add	r3, fp
 8009b92:	461e      	mov	r6, r3
 8009b94:	462c      	mov	r4, r5
 8009b96:	4544      	cmp	r4, r8
 8009b98:	d30e      	bcc.n	8009bb8 <__mdiff+0xf8>
 8009b9a:	f108 0103 	add.w	r1, r8, #3
 8009b9e:	1b49      	subs	r1, r1, r5
 8009ba0:	f021 0103 	bic.w	r1, r1, #3
 8009ba4:	3d03      	subs	r5, #3
 8009ba6:	45a8      	cmp	r8, r5
 8009ba8:	bf38      	it	cc
 8009baa:	2100      	movcc	r1, #0
 8009bac:	440b      	add	r3, r1
 8009bae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bb2:	b191      	cbz	r1, 8009bda <__mdiff+0x11a>
 8009bb4:	6117      	str	r7, [r2, #16]
 8009bb6:	e79d      	b.n	8009af4 <__mdiff+0x34>
 8009bb8:	f854 1b04 	ldr.w	r1, [r4], #4
 8009bbc:	46e6      	mov	lr, ip
 8009bbe:	0c08      	lsrs	r0, r1, #16
 8009bc0:	fa1c fc81 	uxtah	ip, ip, r1
 8009bc4:	4471      	add	r1, lr
 8009bc6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009bca:	b289      	uxth	r1, r1
 8009bcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009bd0:	f846 1b04 	str.w	r1, [r6], #4
 8009bd4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009bd8:	e7dd      	b.n	8009b96 <__mdiff+0xd6>
 8009bda:	3f01      	subs	r7, #1
 8009bdc:	e7e7      	b.n	8009bae <__mdiff+0xee>
 8009bde:	bf00      	nop
 8009be0:	0800a660 	.word	0x0800a660
 8009be4:	0800a682 	.word	0x0800a682

08009be8 <__d2b>:
 8009be8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bec:	460f      	mov	r7, r1
 8009bee:	2101      	movs	r1, #1
 8009bf0:	ec59 8b10 	vmov	r8, r9, d0
 8009bf4:	4616      	mov	r6, r2
 8009bf6:	f7ff fcd5 	bl	80095a4 <_Balloc>
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	b930      	cbnz	r0, 8009c0c <__d2b+0x24>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	4b23      	ldr	r3, [pc, #140]	@ (8009c90 <__d2b+0xa8>)
 8009c02:	4824      	ldr	r0, [pc, #144]	@ (8009c94 <__d2b+0xac>)
 8009c04:	f240 310f 	movw	r1, #783	@ 0x30f
 8009c08:	f000 f936 	bl	8009e78 <__assert_func>
 8009c0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c14:	b10d      	cbz	r5, 8009c1a <__d2b+0x32>
 8009c16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c1a:	9301      	str	r3, [sp, #4]
 8009c1c:	f1b8 0300 	subs.w	r3, r8, #0
 8009c20:	d023      	beq.n	8009c6a <__d2b+0x82>
 8009c22:	4668      	mov	r0, sp
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	f7ff fd84 	bl	8009732 <__lo0bits>
 8009c2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c2e:	b1d0      	cbz	r0, 8009c66 <__d2b+0x7e>
 8009c30:	f1c0 0320 	rsb	r3, r0, #32
 8009c34:	fa02 f303 	lsl.w	r3, r2, r3
 8009c38:	430b      	orrs	r3, r1
 8009c3a:	40c2      	lsrs	r2, r0
 8009c3c:	6163      	str	r3, [r4, #20]
 8009c3e:	9201      	str	r2, [sp, #4]
 8009c40:	9b01      	ldr	r3, [sp, #4]
 8009c42:	61a3      	str	r3, [r4, #24]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	bf0c      	ite	eq
 8009c48:	2201      	moveq	r2, #1
 8009c4a:	2202      	movne	r2, #2
 8009c4c:	6122      	str	r2, [r4, #16]
 8009c4e:	b1a5      	cbz	r5, 8009c7a <__d2b+0x92>
 8009c50:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009c54:	4405      	add	r5, r0
 8009c56:	603d      	str	r5, [r7, #0]
 8009c58:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009c5c:	6030      	str	r0, [r6, #0]
 8009c5e:	4620      	mov	r0, r4
 8009c60:	b003      	add	sp, #12
 8009c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c66:	6161      	str	r1, [r4, #20]
 8009c68:	e7ea      	b.n	8009c40 <__d2b+0x58>
 8009c6a:	a801      	add	r0, sp, #4
 8009c6c:	f7ff fd61 	bl	8009732 <__lo0bits>
 8009c70:	9b01      	ldr	r3, [sp, #4]
 8009c72:	6163      	str	r3, [r4, #20]
 8009c74:	3020      	adds	r0, #32
 8009c76:	2201      	movs	r2, #1
 8009c78:	e7e8      	b.n	8009c4c <__d2b+0x64>
 8009c7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009c82:	6038      	str	r0, [r7, #0]
 8009c84:	6918      	ldr	r0, [r3, #16]
 8009c86:	f7ff fd35 	bl	80096f4 <__hi0bits>
 8009c8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c8e:	e7e5      	b.n	8009c5c <__d2b+0x74>
 8009c90:	0800a660 	.word	0x0800a660
 8009c94:	0800a682 	.word	0x0800a682

08009c98 <__sread>:
 8009c98:	b510      	push	{r4, lr}
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca0:	f000 f898 	bl	8009dd4 <_read_r>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	bfab      	itete	ge
 8009ca8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009caa:	89a3      	ldrhlt	r3, [r4, #12]
 8009cac:	181b      	addge	r3, r3, r0
 8009cae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009cb2:	bfac      	ite	ge
 8009cb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009cb6:	81a3      	strhlt	r3, [r4, #12]
 8009cb8:	bd10      	pop	{r4, pc}

08009cba <__swrite>:
 8009cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cbe:	461f      	mov	r7, r3
 8009cc0:	898b      	ldrh	r3, [r1, #12]
 8009cc2:	05db      	lsls	r3, r3, #23
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	4616      	mov	r6, r2
 8009cca:	d505      	bpl.n	8009cd8 <__swrite+0x1e>
 8009ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f000 f86c 	bl	8009db0 <_lseek_r>
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ce2:	81a3      	strh	r3, [r4, #12]
 8009ce4:	4632      	mov	r2, r6
 8009ce6:	463b      	mov	r3, r7
 8009ce8:	4628      	mov	r0, r5
 8009cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cee:	f000 b893 	b.w	8009e18 <_write_r>

08009cf2 <__sseek>:
 8009cf2:	b510      	push	{r4, lr}
 8009cf4:	460c      	mov	r4, r1
 8009cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cfa:	f000 f859 	bl	8009db0 <_lseek_r>
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	bf15      	itete	ne
 8009d04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d0e:	81a3      	strheq	r3, [r4, #12]
 8009d10:	bf18      	it	ne
 8009d12:	81a3      	strhne	r3, [r4, #12]
 8009d14:	bd10      	pop	{r4, pc}

08009d16 <__sclose>:
 8009d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d1a:	f000 b88f 	b.w	8009e3c <_close_r>

08009d1e <_realloc_r>:
 8009d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d22:	4607      	mov	r7, r0
 8009d24:	4614      	mov	r4, r2
 8009d26:	460d      	mov	r5, r1
 8009d28:	b921      	cbnz	r1, 8009d34 <_realloc_r+0x16>
 8009d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d2e:	4611      	mov	r1, r2
 8009d30:	f7ff bb00 	b.w	8009334 <_malloc_r>
 8009d34:	b92a      	cbnz	r2, 8009d42 <_realloc_r+0x24>
 8009d36:	f000 f8d1 	bl	8009edc <_free_r>
 8009d3a:	4625      	mov	r5, r4
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d42:	f000 f927 	bl	8009f94 <_malloc_usable_size_r>
 8009d46:	4284      	cmp	r4, r0
 8009d48:	4606      	mov	r6, r0
 8009d4a:	d802      	bhi.n	8009d52 <_realloc_r+0x34>
 8009d4c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d50:	d8f4      	bhi.n	8009d3c <_realloc_r+0x1e>
 8009d52:	4621      	mov	r1, r4
 8009d54:	4638      	mov	r0, r7
 8009d56:	f7ff faed 	bl	8009334 <_malloc_r>
 8009d5a:	4680      	mov	r8, r0
 8009d5c:	b908      	cbnz	r0, 8009d62 <_realloc_r+0x44>
 8009d5e:	4645      	mov	r5, r8
 8009d60:	e7ec      	b.n	8009d3c <_realloc_r+0x1e>
 8009d62:	42b4      	cmp	r4, r6
 8009d64:	4622      	mov	r2, r4
 8009d66:	4629      	mov	r1, r5
 8009d68:	bf28      	it	cs
 8009d6a:	4632      	movcs	r2, r6
 8009d6c:	f000 f876 	bl	8009e5c <memcpy>
 8009d70:	4629      	mov	r1, r5
 8009d72:	4638      	mov	r0, r7
 8009d74:	f000 f8b2 	bl	8009edc <_free_r>
 8009d78:	e7f1      	b.n	8009d5e <_realloc_r+0x40>

08009d7a <memmove>:
 8009d7a:	4288      	cmp	r0, r1
 8009d7c:	b510      	push	{r4, lr}
 8009d7e:	eb01 0402 	add.w	r4, r1, r2
 8009d82:	d902      	bls.n	8009d8a <memmove+0x10>
 8009d84:	4284      	cmp	r4, r0
 8009d86:	4623      	mov	r3, r4
 8009d88:	d807      	bhi.n	8009d9a <memmove+0x20>
 8009d8a:	1e43      	subs	r3, r0, #1
 8009d8c:	42a1      	cmp	r1, r4
 8009d8e:	d008      	beq.n	8009da2 <memmove+0x28>
 8009d90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d94:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d98:	e7f8      	b.n	8009d8c <memmove+0x12>
 8009d9a:	4402      	add	r2, r0
 8009d9c:	4601      	mov	r1, r0
 8009d9e:	428a      	cmp	r2, r1
 8009da0:	d100      	bne.n	8009da4 <memmove+0x2a>
 8009da2:	bd10      	pop	{r4, pc}
 8009da4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009da8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dac:	e7f7      	b.n	8009d9e <memmove+0x24>
	...

08009db0 <_lseek_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	4d07      	ldr	r5, [pc, #28]	@ (8009dd0 <_lseek_r+0x20>)
 8009db4:	4604      	mov	r4, r0
 8009db6:	4608      	mov	r0, r1
 8009db8:	4611      	mov	r1, r2
 8009dba:	2200      	movs	r2, #0
 8009dbc:	602a      	str	r2, [r5, #0]
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	f7f8 fb03 	bl	80023ca <_lseek>
 8009dc4:	1c43      	adds	r3, r0, #1
 8009dc6:	d102      	bne.n	8009dce <_lseek_r+0x1e>
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	b103      	cbz	r3, 8009dce <_lseek_r+0x1e>
 8009dcc:	6023      	str	r3, [r4, #0]
 8009dce:	bd38      	pop	{r3, r4, r5, pc}
 8009dd0:	200005cc 	.word	0x200005cc

08009dd4 <_read_r>:
 8009dd4:	b538      	push	{r3, r4, r5, lr}
 8009dd6:	4d07      	ldr	r5, [pc, #28]	@ (8009df4 <_read_r+0x20>)
 8009dd8:	4604      	mov	r4, r0
 8009dda:	4608      	mov	r0, r1
 8009ddc:	4611      	mov	r1, r2
 8009dde:	2200      	movs	r2, #0
 8009de0:	602a      	str	r2, [r5, #0]
 8009de2:	461a      	mov	r2, r3
 8009de4:	f7f8 fa91 	bl	800230a <_read>
 8009de8:	1c43      	adds	r3, r0, #1
 8009dea:	d102      	bne.n	8009df2 <_read_r+0x1e>
 8009dec:	682b      	ldr	r3, [r5, #0]
 8009dee:	b103      	cbz	r3, 8009df2 <_read_r+0x1e>
 8009df0:	6023      	str	r3, [r4, #0]
 8009df2:	bd38      	pop	{r3, r4, r5, pc}
 8009df4:	200005cc 	.word	0x200005cc

08009df8 <_sbrk_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	4d06      	ldr	r5, [pc, #24]	@ (8009e14 <_sbrk_r+0x1c>)
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	4604      	mov	r4, r0
 8009e00:	4608      	mov	r0, r1
 8009e02:	602b      	str	r3, [r5, #0]
 8009e04:	f7f8 faee 	bl	80023e4 <_sbrk>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	d102      	bne.n	8009e12 <_sbrk_r+0x1a>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	b103      	cbz	r3, 8009e12 <_sbrk_r+0x1a>
 8009e10:	6023      	str	r3, [r4, #0]
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	200005cc 	.word	0x200005cc

08009e18 <_write_r>:
 8009e18:	b538      	push	{r3, r4, r5, lr}
 8009e1a:	4d07      	ldr	r5, [pc, #28]	@ (8009e38 <_write_r+0x20>)
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	4608      	mov	r0, r1
 8009e20:	4611      	mov	r1, r2
 8009e22:	2200      	movs	r2, #0
 8009e24:	602a      	str	r2, [r5, #0]
 8009e26:	461a      	mov	r2, r3
 8009e28:	f7f8 fa8c 	bl	8002344 <_write>
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	d102      	bne.n	8009e36 <_write_r+0x1e>
 8009e30:	682b      	ldr	r3, [r5, #0]
 8009e32:	b103      	cbz	r3, 8009e36 <_write_r+0x1e>
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	bd38      	pop	{r3, r4, r5, pc}
 8009e38:	200005cc 	.word	0x200005cc

08009e3c <_close_r>:
 8009e3c:	b538      	push	{r3, r4, r5, lr}
 8009e3e:	4d06      	ldr	r5, [pc, #24]	@ (8009e58 <_close_r+0x1c>)
 8009e40:	2300      	movs	r3, #0
 8009e42:	4604      	mov	r4, r0
 8009e44:	4608      	mov	r0, r1
 8009e46:	602b      	str	r3, [r5, #0]
 8009e48:	f7f8 fa98 	bl	800237c <_close>
 8009e4c:	1c43      	adds	r3, r0, #1
 8009e4e:	d102      	bne.n	8009e56 <_close_r+0x1a>
 8009e50:	682b      	ldr	r3, [r5, #0]
 8009e52:	b103      	cbz	r3, 8009e56 <_close_r+0x1a>
 8009e54:	6023      	str	r3, [r4, #0]
 8009e56:	bd38      	pop	{r3, r4, r5, pc}
 8009e58:	200005cc 	.word	0x200005cc

08009e5c <memcpy>:
 8009e5c:	440a      	add	r2, r1
 8009e5e:	4291      	cmp	r1, r2
 8009e60:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009e64:	d100      	bne.n	8009e68 <memcpy+0xc>
 8009e66:	4770      	bx	lr
 8009e68:	b510      	push	{r4, lr}
 8009e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e72:	4291      	cmp	r1, r2
 8009e74:	d1f9      	bne.n	8009e6a <memcpy+0xe>
 8009e76:	bd10      	pop	{r4, pc}

08009e78 <__assert_func>:
 8009e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e7a:	4614      	mov	r4, r2
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	4b09      	ldr	r3, [pc, #36]	@ (8009ea4 <__assert_func+0x2c>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4605      	mov	r5, r0
 8009e84:	68d8      	ldr	r0, [r3, #12]
 8009e86:	b14c      	cbz	r4, 8009e9c <__assert_func+0x24>
 8009e88:	4b07      	ldr	r3, [pc, #28]	@ (8009ea8 <__assert_func+0x30>)
 8009e8a:	9100      	str	r1, [sp, #0]
 8009e8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e90:	4906      	ldr	r1, [pc, #24]	@ (8009eac <__assert_func+0x34>)
 8009e92:	462b      	mov	r3, r5
 8009e94:	f000 f886 	bl	8009fa4 <fiprintf>
 8009e98:	f000 f8a3 	bl	8009fe2 <abort>
 8009e9c:	4b04      	ldr	r3, [pc, #16]	@ (8009eb0 <__assert_func+0x38>)
 8009e9e:	461c      	mov	r4, r3
 8009ea0:	e7f3      	b.n	8009e8a <__assert_func+0x12>
 8009ea2:	bf00      	nop
 8009ea4:	20000020 	.word	0x20000020
 8009ea8:	0800a6e5 	.word	0x0800a6e5
 8009eac:	0800a6f2 	.word	0x0800a6f2
 8009eb0:	0800a720 	.word	0x0800a720

08009eb4 <_calloc_r>:
 8009eb4:	b570      	push	{r4, r5, r6, lr}
 8009eb6:	fba1 5402 	umull	r5, r4, r1, r2
 8009eba:	b934      	cbnz	r4, 8009eca <_calloc_r+0x16>
 8009ebc:	4629      	mov	r1, r5
 8009ebe:	f7ff fa39 	bl	8009334 <_malloc_r>
 8009ec2:	4606      	mov	r6, r0
 8009ec4:	b928      	cbnz	r0, 8009ed2 <_calloc_r+0x1e>
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	bd70      	pop	{r4, r5, r6, pc}
 8009eca:	220c      	movs	r2, #12
 8009ecc:	6002      	str	r2, [r0, #0]
 8009ece:	2600      	movs	r6, #0
 8009ed0:	e7f9      	b.n	8009ec6 <_calloc_r+0x12>
 8009ed2:	462a      	mov	r2, r5
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	f7fe fa19 	bl	800830c <memset>
 8009eda:	e7f4      	b.n	8009ec6 <_calloc_r+0x12>

08009edc <_free_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	4605      	mov	r5, r0
 8009ee0:	2900      	cmp	r1, #0
 8009ee2:	d041      	beq.n	8009f68 <_free_r+0x8c>
 8009ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ee8:	1f0c      	subs	r4, r1, #4
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	bfb8      	it	lt
 8009eee:	18e4      	addlt	r4, r4, r3
 8009ef0:	f7ff fb4c 	bl	800958c <__malloc_lock>
 8009ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8009f6c <_free_r+0x90>)
 8009ef6:	6813      	ldr	r3, [r2, #0]
 8009ef8:	b933      	cbnz	r3, 8009f08 <_free_r+0x2c>
 8009efa:	6063      	str	r3, [r4, #4]
 8009efc:	6014      	str	r4, [r2, #0]
 8009efe:	4628      	mov	r0, r5
 8009f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f04:	f7ff bb48 	b.w	8009598 <__malloc_unlock>
 8009f08:	42a3      	cmp	r3, r4
 8009f0a:	d908      	bls.n	8009f1e <_free_r+0x42>
 8009f0c:	6820      	ldr	r0, [r4, #0]
 8009f0e:	1821      	adds	r1, r4, r0
 8009f10:	428b      	cmp	r3, r1
 8009f12:	bf01      	itttt	eq
 8009f14:	6819      	ldreq	r1, [r3, #0]
 8009f16:	685b      	ldreq	r3, [r3, #4]
 8009f18:	1809      	addeq	r1, r1, r0
 8009f1a:	6021      	streq	r1, [r4, #0]
 8009f1c:	e7ed      	b.n	8009efa <_free_r+0x1e>
 8009f1e:	461a      	mov	r2, r3
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	b10b      	cbz	r3, 8009f28 <_free_r+0x4c>
 8009f24:	42a3      	cmp	r3, r4
 8009f26:	d9fa      	bls.n	8009f1e <_free_r+0x42>
 8009f28:	6811      	ldr	r1, [r2, #0]
 8009f2a:	1850      	adds	r0, r2, r1
 8009f2c:	42a0      	cmp	r0, r4
 8009f2e:	d10b      	bne.n	8009f48 <_free_r+0x6c>
 8009f30:	6820      	ldr	r0, [r4, #0]
 8009f32:	4401      	add	r1, r0
 8009f34:	1850      	adds	r0, r2, r1
 8009f36:	4283      	cmp	r3, r0
 8009f38:	6011      	str	r1, [r2, #0]
 8009f3a:	d1e0      	bne.n	8009efe <_free_r+0x22>
 8009f3c:	6818      	ldr	r0, [r3, #0]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	6053      	str	r3, [r2, #4]
 8009f42:	4408      	add	r0, r1
 8009f44:	6010      	str	r0, [r2, #0]
 8009f46:	e7da      	b.n	8009efe <_free_r+0x22>
 8009f48:	d902      	bls.n	8009f50 <_free_r+0x74>
 8009f4a:	230c      	movs	r3, #12
 8009f4c:	602b      	str	r3, [r5, #0]
 8009f4e:	e7d6      	b.n	8009efe <_free_r+0x22>
 8009f50:	6820      	ldr	r0, [r4, #0]
 8009f52:	1821      	adds	r1, r4, r0
 8009f54:	428b      	cmp	r3, r1
 8009f56:	bf04      	itt	eq
 8009f58:	6819      	ldreq	r1, [r3, #0]
 8009f5a:	685b      	ldreq	r3, [r3, #4]
 8009f5c:	6063      	str	r3, [r4, #4]
 8009f5e:	bf04      	itt	eq
 8009f60:	1809      	addeq	r1, r1, r0
 8009f62:	6021      	streq	r1, [r4, #0]
 8009f64:	6054      	str	r4, [r2, #4]
 8009f66:	e7ca      	b.n	8009efe <_free_r+0x22>
 8009f68:	bd38      	pop	{r3, r4, r5, pc}
 8009f6a:	bf00      	nop
 8009f6c:	200005c8 	.word	0x200005c8

08009f70 <__ascii_mbtowc>:
 8009f70:	b082      	sub	sp, #8
 8009f72:	b901      	cbnz	r1, 8009f76 <__ascii_mbtowc+0x6>
 8009f74:	a901      	add	r1, sp, #4
 8009f76:	b142      	cbz	r2, 8009f8a <__ascii_mbtowc+0x1a>
 8009f78:	b14b      	cbz	r3, 8009f8e <__ascii_mbtowc+0x1e>
 8009f7a:	7813      	ldrb	r3, [r2, #0]
 8009f7c:	600b      	str	r3, [r1, #0]
 8009f7e:	7812      	ldrb	r2, [r2, #0]
 8009f80:	1e10      	subs	r0, r2, #0
 8009f82:	bf18      	it	ne
 8009f84:	2001      	movne	r0, #1
 8009f86:	b002      	add	sp, #8
 8009f88:	4770      	bx	lr
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	e7fb      	b.n	8009f86 <__ascii_mbtowc+0x16>
 8009f8e:	f06f 0001 	mvn.w	r0, #1
 8009f92:	e7f8      	b.n	8009f86 <__ascii_mbtowc+0x16>

08009f94 <_malloc_usable_size_r>:
 8009f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f98:	1f18      	subs	r0, r3, #4
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	bfbc      	itt	lt
 8009f9e:	580b      	ldrlt	r3, [r1, r0]
 8009fa0:	18c0      	addlt	r0, r0, r3
 8009fa2:	4770      	bx	lr

08009fa4 <fiprintf>:
 8009fa4:	b40e      	push	{r1, r2, r3}
 8009fa6:	b503      	push	{r0, r1, lr}
 8009fa8:	4601      	mov	r1, r0
 8009faa:	ab03      	add	r3, sp, #12
 8009fac:	4805      	ldr	r0, [pc, #20]	@ (8009fc4 <fiprintf+0x20>)
 8009fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fb2:	6800      	ldr	r0, [r0, #0]
 8009fb4:	9301      	str	r3, [sp, #4]
 8009fb6:	f000 f845 	bl	800a044 <_vfiprintf_r>
 8009fba:	b002      	add	sp, #8
 8009fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fc0:	b003      	add	sp, #12
 8009fc2:	4770      	bx	lr
 8009fc4:	20000020 	.word	0x20000020

08009fc8 <__ascii_wctomb>:
 8009fc8:	4603      	mov	r3, r0
 8009fca:	4608      	mov	r0, r1
 8009fcc:	b141      	cbz	r1, 8009fe0 <__ascii_wctomb+0x18>
 8009fce:	2aff      	cmp	r2, #255	@ 0xff
 8009fd0:	d904      	bls.n	8009fdc <__ascii_wctomb+0x14>
 8009fd2:	228a      	movs	r2, #138	@ 0x8a
 8009fd4:	601a      	str	r2, [r3, #0]
 8009fd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009fda:	4770      	bx	lr
 8009fdc:	700a      	strb	r2, [r1, #0]
 8009fde:	2001      	movs	r0, #1
 8009fe0:	4770      	bx	lr

08009fe2 <abort>:
 8009fe2:	b508      	push	{r3, lr}
 8009fe4:	2006      	movs	r0, #6
 8009fe6:	f000 fa63 	bl	800a4b0 <raise>
 8009fea:	2001      	movs	r0, #1
 8009fec:	f7f8 f982 	bl	80022f4 <_exit>

08009ff0 <__sfputc_r>:
 8009ff0:	6893      	ldr	r3, [r2, #8]
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	b410      	push	{r4}
 8009ff8:	6093      	str	r3, [r2, #8]
 8009ffa:	da08      	bge.n	800a00e <__sfputc_r+0x1e>
 8009ffc:	6994      	ldr	r4, [r2, #24]
 8009ffe:	42a3      	cmp	r3, r4
 800a000:	db01      	blt.n	800a006 <__sfputc_r+0x16>
 800a002:	290a      	cmp	r1, #10
 800a004:	d103      	bne.n	800a00e <__sfputc_r+0x1e>
 800a006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a00a:	f000 b933 	b.w	800a274 <__swbuf_r>
 800a00e:	6813      	ldr	r3, [r2, #0]
 800a010:	1c58      	adds	r0, r3, #1
 800a012:	6010      	str	r0, [r2, #0]
 800a014:	7019      	strb	r1, [r3, #0]
 800a016:	4608      	mov	r0, r1
 800a018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a01c:	4770      	bx	lr

0800a01e <__sfputs_r>:
 800a01e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a020:	4606      	mov	r6, r0
 800a022:	460f      	mov	r7, r1
 800a024:	4614      	mov	r4, r2
 800a026:	18d5      	adds	r5, r2, r3
 800a028:	42ac      	cmp	r4, r5
 800a02a:	d101      	bne.n	800a030 <__sfputs_r+0x12>
 800a02c:	2000      	movs	r0, #0
 800a02e:	e007      	b.n	800a040 <__sfputs_r+0x22>
 800a030:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a034:	463a      	mov	r2, r7
 800a036:	4630      	mov	r0, r6
 800a038:	f7ff ffda 	bl	8009ff0 <__sfputc_r>
 800a03c:	1c43      	adds	r3, r0, #1
 800a03e:	d1f3      	bne.n	800a028 <__sfputs_r+0xa>
 800a040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a044 <_vfiprintf_r>:
 800a044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a048:	460d      	mov	r5, r1
 800a04a:	b09d      	sub	sp, #116	@ 0x74
 800a04c:	4614      	mov	r4, r2
 800a04e:	4698      	mov	r8, r3
 800a050:	4606      	mov	r6, r0
 800a052:	b118      	cbz	r0, 800a05c <_vfiprintf_r+0x18>
 800a054:	6a03      	ldr	r3, [r0, #32]
 800a056:	b90b      	cbnz	r3, 800a05c <_vfiprintf_r+0x18>
 800a058:	f7fe f922 	bl	80082a0 <__sinit>
 800a05c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a05e:	07d9      	lsls	r1, r3, #31
 800a060:	d405      	bmi.n	800a06e <_vfiprintf_r+0x2a>
 800a062:	89ab      	ldrh	r3, [r5, #12]
 800a064:	059a      	lsls	r2, r3, #22
 800a066:	d402      	bmi.n	800a06e <_vfiprintf_r+0x2a>
 800a068:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a06a:	f7fe f982 	bl	8008372 <__retarget_lock_acquire_recursive>
 800a06e:	89ab      	ldrh	r3, [r5, #12]
 800a070:	071b      	lsls	r3, r3, #28
 800a072:	d501      	bpl.n	800a078 <_vfiprintf_r+0x34>
 800a074:	692b      	ldr	r3, [r5, #16]
 800a076:	b99b      	cbnz	r3, 800a0a0 <_vfiprintf_r+0x5c>
 800a078:	4629      	mov	r1, r5
 800a07a:	4630      	mov	r0, r6
 800a07c:	f000 f938 	bl	800a2f0 <__swsetup_r>
 800a080:	b170      	cbz	r0, 800a0a0 <_vfiprintf_r+0x5c>
 800a082:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a084:	07dc      	lsls	r4, r3, #31
 800a086:	d504      	bpl.n	800a092 <_vfiprintf_r+0x4e>
 800a088:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a08c:	b01d      	add	sp, #116	@ 0x74
 800a08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a092:	89ab      	ldrh	r3, [r5, #12]
 800a094:	0598      	lsls	r0, r3, #22
 800a096:	d4f7      	bmi.n	800a088 <_vfiprintf_r+0x44>
 800a098:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a09a:	f7fe f96b 	bl	8008374 <__retarget_lock_release_recursive>
 800a09e:	e7f3      	b.n	800a088 <_vfiprintf_r+0x44>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0a4:	2320      	movs	r3, #32
 800a0a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a0aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0ae:	2330      	movs	r3, #48	@ 0x30
 800a0b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a260 <_vfiprintf_r+0x21c>
 800a0b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a0b8:	f04f 0901 	mov.w	r9, #1
 800a0bc:	4623      	mov	r3, r4
 800a0be:	469a      	mov	sl, r3
 800a0c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0c4:	b10a      	cbz	r2, 800a0ca <_vfiprintf_r+0x86>
 800a0c6:	2a25      	cmp	r2, #37	@ 0x25
 800a0c8:	d1f9      	bne.n	800a0be <_vfiprintf_r+0x7a>
 800a0ca:	ebba 0b04 	subs.w	fp, sl, r4
 800a0ce:	d00b      	beq.n	800a0e8 <_vfiprintf_r+0xa4>
 800a0d0:	465b      	mov	r3, fp
 800a0d2:	4622      	mov	r2, r4
 800a0d4:	4629      	mov	r1, r5
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	f7ff ffa1 	bl	800a01e <__sfputs_r>
 800a0dc:	3001      	adds	r0, #1
 800a0de:	f000 80a7 	beq.w	800a230 <_vfiprintf_r+0x1ec>
 800a0e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0e4:	445a      	add	r2, fp
 800a0e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 809f 	beq.w	800a230 <_vfiprintf_r+0x1ec>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a0f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0fc:	f10a 0a01 	add.w	sl, sl, #1
 800a100:	9304      	str	r3, [sp, #16]
 800a102:	9307      	str	r3, [sp, #28]
 800a104:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a108:	931a      	str	r3, [sp, #104]	@ 0x68
 800a10a:	4654      	mov	r4, sl
 800a10c:	2205      	movs	r2, #5
 800a10e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a112:	4853      	ldr	r0, [pc, #332]	@ (800a260 <_vfiprintf_r+0x21c>)
 800a114:	f7f6 f85c 	bl	80001d0 <memchr>
 800a118:	9a04      	ldr	r2, [sp, #16]
 800a11a:	b9d8      	cbnz	r0, 800a154 <_vfiprintf_r+0x110>
 800a11c:	06d1      	lsls	r1, r2, #27
 800a11e:	bf44      	itt	mi
 800a120:	2320      	movmi	r3, #32
 800a122:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a126:	0713      	lsls	r3, r2, #28
 800a128:	bf44      	itt	mi
 800a12a:	232b      	movmi	r3, #43	@ 0x2b
 800a12c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a130:	f89a 3000 	ldrb.w	r3, [sl]
 800a134:	2b2a      	cmp	r3, #42	@ 0x2a
 800a136:	d015      	beq.n	800a164 <_vfiprintf_r+0x120>
 800a138:	9a07      	ldr	r2, [sp, #28]
 800a13a:	4654      	mov	r4, sl
 800a13c:	2000      	movs	r0, #0
 800a13e:	f04f 0c0a 	mov.w	ip, #10
 800a142:	4621      	mov	r1, r4
 800a144:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a148:	3b30      	subs	r3, #48	@ 0x30
 800a14a:	2b09      	cmp	r3, #9
 800a14c:	d94b      	bls.n	800a1e6 <_vfiprintf_r+0x1a2>
 800a14e:	b1b0      	cbz	r0, 800a17e <_vfiprintf_r+0x13a>
 800a150:	9207      	str	r2, [sp, #28]
 800a152:	e014      	b.n	800a17e <_vfiprintf_r+0x13a>
 800a154:	eba0 0308 	sub.w	r3, r0, r8
 800a158:	fa09 f303 	lsl.w	r3, r9, r3
 800a15c:	4313      	orrs	r3, r2
 800a15e:	9304      	str	r3, [sp, #16]
 800a160:	46a2      	mov	sl, r4
 800a162:	e7d2      	b.n	800a10a <_vfiprintf_r+0xc6>
 800a164:	9b03      	ldr	r3, [sp, #12]
 800a166:	1d19      	adds	r1, r3, #4
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	9103      	str	r1, [sp, #12]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	bfbb      	ittet	lt
 800a170:	425b      	neglt	r3, r3
 800a172:	f042 0202 	orrlt.w	r2, r2, #2
 800a176:	9307      	strge	r3, [sp, #28]
 800a178:	9307      	strlt	r3, [sp, #28]
 800a17a:	bfb8      	it	lt
 800a17c:	9204      	strlt	r2, [sp, #16]
 800a17e:	7823      	ldrb	r3, [r4, #0]
 800a180:	2b2e      	cmp	r3, #46	@ 0x2e
 800a182:	d10a      	bne.n	800a19a <_vfiprintf_r+0x156>
 800a184:	7863      	ldrb	r3, [r4, #1]
 800a186:	2b2a      	cmp	r3, #42	@ 0x2a
 800a188:	d132      	bne.n	800a1f0 <_vfiprintf_r+0x1ac>
 800a18a:	9b03      	ldr	r3, [sp, #12]
 800a18c:	1d1a      	adds	r2, r3, #4
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	9203      	str	r2, [sp, #12]
 800a192:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a196:	3402      	adds	r4, #2
 800a198:	9305      	str	r3, [sp, #20]
 800a19a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a270 <_vfiprintf_r+0x22c>
 800a19e:	7821      	ldrb	r1, [r4, #0]
 800a1a0:	2203      	movs	r2, #3
 800a1a2:	4650      	mov	r0, sl
 800a1a4:	f7f6 f814 	bl	80001d0 <memchr>
 800a1a8:	b138      	cbz	r0, 800a1ba <_vfiprintf_r+0x176>
 800a1aa:	9b04      	ldr	r3, [sp, #16]
 800a1ac:	eba0 000a 	sub.w	r0, r0, sl
 800a1b0:	2240      	movs	r2, #64	@ 0x40
 800a1b2:	4082      	lsls	r2, r0
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	3401      	adds	r4, #1
 800a1b8:	9304      	str	r3, [sp, #16]
 800a1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1be:	4829      	ldr	r0, [pc, #164]	@ (800a264 <_vfiprintf_r+0x220>)
 800a1c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a1c4:	2206      	movs	r2, #6
 800a1c6:	f7f6 f803 	bl	80001d0 <memchr>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	d03f      	beq.n	800a24e <_vfiprintf_r+0x20a>
 800a1ce:	4b26      	ldr	r3, [pc, #152]	@ (800a268 <_vfiprintf_r+0x224>)
 800a1d0:	bb1b      	cbnz	r3, 800a21a <_vfiprintf_r+0x1d6>
 800a1d2:	9b03      	ldr	r3, [sp, #12]
 800a1d4:	3307      	adds	r3, #7
 800a1d6:	f023 0307 	bic.w	r3, r3, #7
 800a1da:	3308      	adds	r3, #8
 800a1dc:	9303      	str	r3, [sp, #12]
 800a1de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1e0:	443b      	add	r3, r7
 800a1e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1e4:	e76a      	b.n	800a0bc <_vfiprintf_r+0x78>
 800a1e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1ea:	460c      	mov	r4, r1
 800a1ec:	2001      	movs	r0, #1
 800a1ee:	e7a8      	b.n	800a142 <_vfiprintf_r+0xfe>
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	3401      	adds	r4, #1
 800a1f4:	9305      	str	r3, [sp, #20]
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	f04f 0c0a 	mov.w	ip, #10
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a202:	3a30      	subs	r2, #48	@ 0x30
 800a204:	2a09      	cmp	r2, #9
 800a206:	d903      	bls.n	800a210 <_vfiprintf_r+0x1cc>
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d0c6      	beq.n	800a19a <_vfiprintf_r+0x156>
 800a20c:	9105      	str	r1, [sp, #20]
 800a20e:	e7c4      	b.n	800a19a <_vfiprintf_r+0x156>
 800a210:	fb0c 2101 	mla	r1, ip, r1, r2
 800a214:	4604      	mov	r4, r0
 800a216:	2301      	movs	r3, #1
 800a218:	e7f0      	b.n	800a1fc <_vfiprintf_r+0x1b8>
 800a21a:	ab03      	add	r3, sp, #12
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	462a      	mov	r2, r5
 800a220:	4b12      	ldr	r3, [pc, #72]	@ (800a26c <_vfiprintf_r+0x228>)
 800a222:	a904      	add	r1, sp, #16
 800a224:	4630      	mov	r0, r6
 800a226:	f7fd fbc3 	bl	80079b0 <_printf_float>
 800a22a:	4607      	mov	r7, r0
 800a22c:	1c78      	adds	r0, r7, #1
 800a22e:	d1d6      	bne.n	800a1de <_vfiprintf_r+0x19a>
 800a230:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a232:	07d9      	lsls	r1, r3, #31
 800a234:	d405      	bmi.n	800a242 <_vfiprintf_r+0x1fe>
 800a236:	89ab      	ldrh	r3, [r5, #12]
 800a238:	059a      	lsls	r2, r3, #22
 800a23a:	d402      	bmi.n	800a242 <_vfiprintf_r+0x1fe>
 800a23c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a23e:	f7fe f899 	bl	8008374 <__retarget_lock_release_recursive>
 800a242:	89ab      	ldrh	r3, [r5, #12]
 800a244:	065b      	lsls	r3, r3, #25
 800a246:	f53f af1f 	bmi.w	800a088 <_vfiprintf_r+0x44>
 800a24a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a24c:	e71e      	b.n	800a08c <_vfiprintf_r+0x48>
 800a24e:	ab03      	add	r3, sp, #12
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	462a      	mov	r2, r5
 800a254:	4b05      	ldr	r3, [pc, #20]	@ (800a26c <_vfiprintf_r+0x228>)
 800a256:	a904      	add	r1, sp, #16
 800a258:	4630      	mov	r0, r6
 800a25a:	f7fd fe41 	bl	8007ee0 <_printf_i>
 800a25e:	e7e4      	b.n	800a22a <_vfiprintf_r+0x1e6>
 800a260:	0800a671 	.word	0x0800a671
 800a264:	0800a67b 	.word	0x0800a67b
 800a268:	080079b1 	.word	0x080079b1
 800a26c:	0800a01f 	.word	0x0800a01f
 800a270:	0800a677 	.word	0x0800a677

0800a274 <__swbuf_r>:
 800a274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a276:	460e      	mov	r6, r1
 800a278:	4614      	mov	r4, r2
 800a27a:	4605      	mov	r5, r0
 800a27c:	b118      	cbz	r0, 800a286 <__swbuf_r+0x12>
 800a27e:	6a03      	ldr	r3, [r0, #32]
 800a280:	b90b      	cbnz	r3, 800a286 <__swbuf_r+0x12>
 800a282:	f7fe f80d 	bl	80082a0 <__sinit>
 800a286:	69a3      	ldr	r3, [r4, #24]
 800a288:	60a3      	str	r3, [r4, #8]
 800a28a:	89a3      	ldrh	r3, [r4, #12]
 800a28c:	071a      	lsls	r2, r3, #28
 800a28e:	d501      	bpl.n	800a294 <__swbuf_r+0x20>
 800a290:	6923      	ldr	r3, [r4, #16]
 800a292:	b943      	cbnz	r3, 800a2a6 <__swbuf_r+0x32>
 800a294:	4621      	mov	r1, r4
 800a296:	4628      	mov	r0, r5
 800a298:	f000 f82a 	bl	800a2f0 <__swsetup_r>
 800a29c:	b118      	cbz	r0, 800a2a6 <__swbuf_r+0x32>
 800a29e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2a6:	6823      	ldr	r3, [r4, #0]
 800a2a8:	6922      	ldr	r2, [r4, #16]
 800a2aa:	1a98      	subs	r0, r3, r2
 800a2ac:	6963      	ldr	r3, [r4, #20]
 800a2ae:	b2f6      	uxtb	r6, r6
 800a2b0:	4283      	cmp	r3, r0
 800a2b2:	4637      	mov	r7, r6
 800a2b4:	dc05      	bgt.n	800a2c2 <__swbuf_r+0x4e>
 800a2b6:	4621      	mov	r1, r4
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	f7ff f93f 	bl	800953c <_fflush_r>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	d1ed      	bne.n	800a29e <__swbuf_r+0x2a>
 800a2c2:	68a3      	ldr	r3, [r4, #8]
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	60a3      	str	r3, [r4, #8]
 800a2c8:	6823      	ldr	r3, [r4, #0]
 800a2ca:	1c5a      	adds	r2, r3, #1
 800a2cc:	6022      	str	r2, [r4, #0]
 800a2ce:	701e      	strb	r6, [r3, #0]
 800a2d0:	6962      	ldr	r2, [r4, #20]
 800a2d2:	1c43      	adds	r3, r0, #1
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d004      	beq.n	800a2e2 <__swbuf_r+0x6e>
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	07db      	lsls	r3, r3, #31
 800a2dc:	d5e1      	bpl.n	800a2a2 <__swbuf_r+0x2e>
 800a2de:	2e0a      	cmp	r6, #10
 800a2e0:	d1df      	bne.n	800a2a2 <__swbuf_r+0x2e>
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	f7ff f929 	bl	800953c <_fflush_r>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	d0d9      	beq.n	800a2a2 <__swbuf_r+0x2e>
 800a2ee:	e7d6      	b.n	800a29e <__swbuf_r+0x2a>

0800a2f0 <__swsetup_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4b29      	ldr	r3, [pc, #164]	@ (800a398 <__swsetup_r+0xa8>)
 800a2f4:	4605      	mov	r5, r0
 800a2f6:	6818      	ldr	r0, [r3, #0]
 800a2f8:	460c      	mov	r4, r1
 800a2fa:	b118      	cbz	r0, 800a304 <__swsetup_r+0x14>
 800a2fc:	6a03      	ldr	r3, [r0, #32]
 800a2fe:	b90b      	cbnz	r3, 800a304 <__swsetup_r+0x14>
 800a300:	f7fd ffce 	bl	80082a0 <__sinit>
 800a304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a308:	0719      	lsls	r1, r3, #28
 800a30a:	d422      	bmi.n	800a352 <__swsetup_r+0x62>
 800a30c:	06da      	lsls	r2, r3, #27
 800a30e:	d407      	bmi.n	800a320 <__swsetup_r+0x30>
 800a310:	2209      	movs	r2, #9
 800a312:	602a      	str	r2, [r5, #0]
 800a314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a318:	81a3      	strh	r3, [r4, #12]
 800a31a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a31e:	e033      	b.n	800a388 <__swsetup_r+0x98>
 800a320:	0758      	lsls	r0, r3, #29
 800a322:	d512      	bpl.n	800a34a <__swsetup_r+0x5a>
 800a324:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a326:	b141      	cbz	r1, 800a33a <__swsetup_r+0x4a>
 800a328:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a32c:	4299      	cmp	r1, r3
 800a32e:	d002      	beq.n	800a336 <__swsetup_r+0x46>
 800a330:	4628      	mov	r0, r5
 800a332:	f7ff fdd3 	bl	8009edc <_free_r>
 800a336:	2300      	movs	r3, #0
 800a338:	6363      	str	r3, [r4, #52]	@ 0x34
 800a33a:	89a3      	ldrh	r3, [r4, #12]
 800a33c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a340:	81a3      	strh	r3, [r4, #12]
 800a342:	2300      	movs	r3, #0
 800a344:	6063      	str	r3, [r4, #4]
 800a346:	6923      	ldr	r3, [r4, #16]
 800a348:	6023      	str	r3, [r4, #0]
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	f043 0308 	orr.w	r3, r3, #8
 800a350:	81a3      	strh	r3, [r4, #12]
 800a352:	6923      	ldr	r3, [r4, #16]
 800a354:	b94b      	cbnz	r3, 800a36a <__swsetup_r+0x7a>
 800a356:	89a3      	ldrh	r3, [r4, #12]
 800a358:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a35c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a360:	d003      	beq.n	800a36a <__swsetup_r+0x7a>
 800a362:	4621      	mov	r1, r4
 800a364:	4628      	mov	r0, r5
 800a366:	f000 f83f 	bl	800a3e8 <__smakebuf_r>
 800a36a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a36e:	f013 0201 	ands.w	r2, r3, #1
 800a372:	d00a      	beq.n	800a38a <__swsetup_r+0x9a>
 800a374:	2200      	movs	r2, #0
 800a376:	60a2      	str	r2, [r4, #8]
 800a378:	6962      	ldr	r2, [r4, #20]
 800a37a:	4252      	negs	r2, r2
 800a37c:	61a2      	str	r2, [r4, #24]
 800a37e:	6922      	ldr	r2, [r4, #16]
 800a380:	b942      	cbnz	r2, 800a394 <__swsetup_r+0xa4>
 800a382:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a386:	d1c5      	bne.n	800a314 <__swsetup_r+0x24>
 800a388:	bd38      	pop	{r3, r4, r5, pc}
 800a38a:	0799      	lsls	r1, r3, #30
 800a38c:	bf58      	it	pl
 800a38e:	6962      	ldrpl	r2, [r4, #20]
 800a390:	60a2      	str	r2, [r4, #8]
 800a392:	e7f4      	b.n	800a37e <__swsetup_r+0x8e>
 800a394:	2000      	movs	r0, #0
 800a396:	e7f7      	b.n	800a388 <__swsetup_r+0x98>
 800a398:	20000020 	.word	0x20000020

0800a39c <__swhatbuf_r>:
 800a39c:	b570      	push	{r4, r5, r6, lr}
 800a39e:	460c      	mov	r4, r1
 800a3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a4:	2900      	cmp	r1, #0
 800a3a6:	b096      	sub	sp, #88	@ 0x58
 800a3a8:	4615      	mov	r5, r2
 800a3aa:	461e      	mov	r6, r3
 800a3ac:	da0d      	bge.n	800a3ca <__swhatbuf_r+0x2e>
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a3b4:	f04f 0100 	mov.w	r1, #0
 800a3b8:	bf14      	ite	ne
 800a3ba:	2340      	movne	r3, #64	@ 0x40
 800a3bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	6031      	str	r1, [r6, #0]
 800a3c4:	602b      	str	r3, [r5, #0]
 800a3c6:	b016      	add	sp, #88	@ 0x58
 800a3c8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ca:	466a      	mov	r2, sp
 800a3cc:	f000 f89c 	bl	800a508 <_fstat_r>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	dbec      	blt.n	800a3ae <__swhatbuf_r+0x12>
 800a3d4:	9901      	ldr	r1, [sp, #4]
 800a3d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a3da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a3de:	4259      	negs	r1, r3
 800a3e0:	4159      	adcs	r1, r3
 800a3e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3e6:	e7eb      	b.n	800a3c0 <__swhatbuf_r+0x24>

0800a3e8 <__smakebuf_r>:
 800a3e8:	898b      	ldrh	r3, [r1, #12]
 800a3ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3ec:	079d      	lsls	r5, r3, #30
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	d507      	bpl.n	800a404 <__smakebuf_r+0x1c>
 800a3f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a3f8:	6023      	str	r3, [r4, #0]
 800a3fa:	6123      	str	r3, [r4, #16]
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	6163      	str	r3, [r4, #20]
 800a400:	b003      	add	sp, #12
 800a402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a404:	ab01      	add	r3, sp, #4
 800a406:	466a      	mov	r2, sp
 800a408:	f7ff ffc8 	bl	800a39c <__swhatbuf_r>
 800a40c:	9f00      	ldr	r7, [sp, #0]
 800a40e:	4605      	mov	r5, r0
 800a410:	4639      	mov	r1, r7
 800a412:	4630      	mov	r0, r6
 800a414:	f7fe ff8e 	bl	8009334 <_malloc_r>
 800a418:	b948      	cbnz	r0, 800a42e <__smakebuf_r+0x46>
 800a41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a41e:	059a      	lsls	r2, r3, #22
 800a420:	d4ee      	bmi.n	800a400 <__smakebuf_r+0x18>
 800a422:	f023 0303 	bic.w	r3, r3, #3
 800a426:	f043 0302 	orr.w	r3, r3, #2
 800a42a:	81a3      	strh	r3, [r4, #12]
 800a42c:	e7e2      	b.n	800a3f4 <__smakebuf_r+0xc>
 800a42e:	89a3      	ldrh	r3, [r4, #12]
 800a430:	6020      	str	r0, [r4, #0]
 800a432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a436:	81a3      	strh	r3, [r4, #12]
 800a438:	9b01      	ldr	r3, [sp, #4]
 800a43a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a43e:	b15b      	cbz	r3, 800a458 <__smakebuf_r+0x70>
 800a440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a444:	4630      	mov	r0, r6
 800a446:	f000 f83b 	bl	800a4c0 <_isatty_r>
 800a44a:	b128      	cbz	r0, 800a458 <__smakebuf_r+0x70>
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	f023 0303 	bic.w	r3, r3, #3
 800a452:	f043 0301 	orr.w	r3, r3, #1
 800a456:	81a3      	strh	r3, [r4, #12]
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	431d      	orrs	r5, r3
 800a45c:	81a5      	strh	r5, [r4, #12]
 800a45e:	e7cf      	b.n	800a400 <__smakebuf_r+0x18>

0800a460 <_raise_r>:
 800a460:	291f      	cmp	r1, #31
 800a462:	b538      	push	{r3, r4, r5, lr}
 800a464:	4605      	mov	r5, r0
 800a466:	460c      	mov	r4, r1
 800a468:	d904      	bls.n	800a474 <_raise_r+0x14>
 800a46a:	2316      	movs	r3, #22
 800a46c:	6003      	str	r3, [r0, #0]
 800a46e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a472:	bd38      	pop	{r3, r4, r5, pc}
 800a474:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a476:	b112      	cbz	r2, 800a47e <_raise_r+0x1e>
 800a478:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a47c:	b94b      	cbnz	r3, 800a492 <_raise_r+0x32>
 800a47e:	4628      	mov	r0, r5
 800a480:	f000 f840 	bl	800a504 <_getpid_r>
 800a484:	4622      	mov	r2, r4
 800a486:	4601      	mov	r1, r0
 800a488:	4628      	mov	r0, r5
 800a48a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a48e:	f000 b827 	b.w	800a4e0 <_kill_r>
 800a492:	2b01      	cmp	r3, #1
 800a494:	d00a      	beq.n	800a4ac <_raise_r+0x4c>
 800a496:	1c59      	adds	r1, r3, #1
 800a498:	d103      	bne.n	800a4a2 <_raise_r+0x42>
 800a49a:	2316      	movs	r3, #22
 800a49c:	6003      	str	r3, [r0, #0]
 800a49e:	2001      	movs	r0, #1
 800a4a0:	e7e7      	b.n	800a472 <_raise_r+0x12>
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	4798      	blx	r3
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	e7e0      	b.n	800a472 <_raise_r+0x12>

0800a4b0 <raise>:
 800a4b0:	4b02      	ldr	r3, [pc, #8]	@ (800a4bc <raise+0xc>)
 800a4b2:	4601      	mov	r1, r0
 800a4b4:	6818      	ldr	r0, [r3, #0]
 800a4b6:	f7ff bfd3 	b.w	800a460 <_raise_r>
 800a4ba:	bf00      	nop
 800a4bc:	20000020 	.word	0x20000020

0800a4c0 <_isatty_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	4d06      	ldr	r5, [pc, #24]	@ (800a4dc <_isatty_r+0x1c>)
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	4608      	mov	r0, r1
 800a4ca:	602b      	str	r3, [r5, #0]
 800a4cc:	f7f7 ff72 	bl	80023b4 <_isatty>
 800a4d0:	1c43      	adds	r3, r0, #1
 800a4d2:	d102      	bne.n	800a4da <_isatty_r+0x1a>
 800a4d4:	682b      	ldr	r3, [r5, #0]
 800a4d6:	b103      	cbz	r3, 800a4da <_isatty_r+0x1a>
 800a4d8:	6023      	str	r3, [r4, #0]
 800a4da:	bd38      	pop	{r3, r4, r5, pc}
 800a4dc:	200005cc 	.word	0x200005cc

0800a4e0 <_kill_r>:
 800a4e0:	b538      	push	{r3, r4, r5, lr}
 800a4e2:	4d07      	ldr	r5, [pc, #28]	@ (800a500 <_kill_r+0x20>)
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	4604      	mov	r4, r0
 800a4e8:	4608      	mov	r0, r1
 800a4ea:	4611      	mov	r1, r2
 800a4ec:	602b      	str	r3, [r5, #0]
 800a4ee:	f7f7 fef1 	bl	80022d4 <_kill>
 800a4f2:	1c43      	adds	r3, r0, #1
 800a4f4:	d102      	bne.n	800a4fc <_kill_r+0x1c>
 800a4f6:	682b      	ldr	r3, [r5, #0]
 800a4f8:	b103      	cbz	r3, 800a4fc <_kill_r+0x1c>
 800a4fa:	6023      	str	r3, [r4, #0]
 800a4fc:	bd38      	pop	{r3, r4, r5, pc}
 800a4fe:	bf00      	nop
 800a500:	200005cc 	.word	0x200005cc

0800a504 <_getpid_r>:
 800a504:	f7f7 bede 	b.w	80022c4 <_getpid>

0800a508 <_fstat_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	4d07      	ldr	r5, [pc, #28]	@ (800a528 <_fstat_r+0x20>)
 800a50c:	2300      	movs	r3, #0
 800a50e:	4604      	mov	r4, r0
 800a510:	4608      	mov	r0, r1
 800a512:	4611      	mov	r1, r2
 800a514:	602b      	str	r3, [r5, #0]
 800a516:	f7f7 ff3d 	bl	8002394 <_fstat>
 800a51a:	1c43      	adds	r3, r0, #1
 800a51c:	d102      	bne.n	800a524 <_fstat_r+0x1c>
 800a51e:	682b      	ldr	r3, [r5, #0]
 800a520:	b103      	cbz	r3, 800a524 <_fstat_r+0x1c>
 800a522:	6023      	str	r3, [r4, #0]
 800a524:	bd38      	pop	{r3, r4, r5, pc}
 800a526:	bf00      	nop
 800a528:	200005cc 	.word	0x200005cc

0800a52c <_init>:
 800a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52e:	bf00      	nop
 800a530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a532:	bc08      	pop	{r3}
 800a534:	469e      	mov	lr, r3
 800a536:	4770      	bx	lr

0800a538 <_fini>:
 800a538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53a:	bf00      	nop
 800a53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a53e:	bc08      	pop	{r3}
 800a540:	469e      	mov	lr, r3
 800a542:	4770      	bx	lr
